structure SomeData :
	integer FieldOne,
	string FieldTwo


type listnode<type T> : list<T> | nothing

structure list<type T> :
	T ref value,
	listnode<T> next



type node : container | nothing

structure container :
	SomeData ref value,
	node next


structure Hack :			// This is a workaround for a DUMB compiler bug
	list<SomeData> ref List


entrypoint :
{
	SomeData d = 42, "test"

	list<SomeData> l = d, nothing
	mutate(l)

	print(d.FieldTwo)
	print(l.value.FieldTwo)
}



mutate : list<SomeData> ref l
{
	l.value.FieldTwo = "Fooooo"
}

