
structure ThunkTableEntry :
	string FunctionName,
	integer ThunkTableOffset,
	integer ThunkAddressOffset,
	integer ThunkAddressCopyOffset

structure ThunkTableLibrary :
	string LibraryName,
	listnode<ThunkTableEntry> Functions,
	integer StartOffset,
	integer NameOffset

structure ThunkTable :
	listnode<ThunkTableLibrary> Libraries,
	integer DescriptorOffset,
	integer TotalSize,
	integer AddressTableSize
	


type listnode<type T> : list<T> | nothing

structure list<type T> :
	T ref value,
	listnode<T> next


global
{
	ThunkTable GlobalThunkTable = nothing, 0, 0, 0
}

structure Stuff :
	string Test,
	integer Field

type StuffNode : Stuff | nothing

structure Wrap :
	integer Test,
	StuffNode Root,
	integer Foo


entrypoint :
{
	Wrap test = 0, nothing, 42
	Stuff stuff = "Test", 666

	Set(test.Root, stuff)

	Check(test.Root)

	ThunkTableAddEntry(GlobalThunkTable, "Kernel32.dll", "ExitProcess")
	ThunkTableAddEntry(GlobalThunkTable, "Kernel32.dll", "lstrlenA")
	ThunkTableAddEntry(GlobalThunkTable, "EpochRT.dll", "ERT_assert")
	ThunkTableAddEntry(GlobalThunkTable, "EpochRT.dll", "ERT_buffer_alloc")


	print("Done")
}


Set : StuffNode ref n, Stuff ref s
{
	StuffNode w = s
	n = w
}



Check : Stuff ref s
{
	print("PASS")
	print(s.Test)
}

Check : nothing
{
	print("FAIL")
}



ListPrependOrCreate<type T> : listnode<T> ref node, T ref value
{
	list<T> newlist = new value, node
	listnode<T> wrap = newlist
	node = wrap
}


ThunkTableAddEntry : ThunkTable ref table, string libname, string funcname
{
	ThunkTableAddFunctionToLibrary(table, table.Libraries, libname, funcname)
}

ThunkTableAddFunctionToLibrary : ThunkTable ref table, list<ThunkTableLibrary> ref libraries, string libname, string funcname
{
	if(libraries.value.LibraryName == libname)
	{
		ThunkTableAddFunctionToList(libraries.value, libraries.value.Functions, funcname)
	}
	else
	{
		ThunkTableAddFunctionToLibrary(table, libraries.next, libname, funcname)
	}
}

ThunkTableAddFunctionToLibrary : ThunkTable ref table, nothing, string libname, string funcname
{
	ThunkTableEntry entry = new funcname, 0, 0, 0
	list<ThunkTableEntry> entrylist = new entry, nothing
	listnode<ThunkTableEntry> entrynode = entrylist
	
	ThunkTableLibrary rtlib = new libname, entrynode, 0, 0
	ListPrependOrCreate<ThunkTableLibrary>(table.Libraries, rtlib)
}

ThunkTableAddFunctionToList : ThunkTableLibrary ref library, list<ThunkTableEntry> ref functions, string funcname
{
	if(functions.value.FunctionName == funcname)
	{
		// Function already exists, can bail safely
	}
	else
	{
		ThunkTableAddFunctionToList(library, functions.next, funcname)
	}
}

ThunkTableAddFunctionToList : ThunkTableLibrary ref library, nothing, string funcname
{
	ThunkTableEntry entry = new funcname, 0, 0, 0
	ListPrependOrCreate<ThunkTableEntry>(library.Functions, entry)
}

