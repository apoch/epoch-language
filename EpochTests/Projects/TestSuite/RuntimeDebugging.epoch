//
// RUNTIMEDEBUGGING.EPOCH
//
// Unit tests for Epoch Runtime debug support functions
//
// Also provides some rudimentary tests for the harness itself and
// a simple outline for how test modules can be added to the suite
// over time.
//


//
// Test section entry point - this is where the test section
// is controlled, from startup to shutdown. This function is
// invoked directly from the main entrypoint function in the
// TestSuite.epoch file.
//
// Note the simple layout - we start the test section, which
// initializes statistics counting and other reporting data,
// and then fire off a series of test calls to routines that
// live in this test module file. Once finished, the harness
// is informed that the section is over, and flow control is
// returned to the caller to begin another section.
//
TestRuntimeDebugFunctions :
{
	// Enter the section and initialize reporting data for it
	TestSection("Debug RTL functions")
	
	// Test assertions are working
	TRDFAssert()
	
	// Section finished, return to caller (optionally also
	// displaying stats if the harness is in verbose mode)
	TestSectionComplete()
}


//
// Assertions unit test - validate that asserting on a true
// expression will not halt execution or otherwise barf.
//
// We obviously can't (readily) validate that a false value
// would cause execution to halt, so we just have to accept
// this as a sufficient pass. If failed asserts really have
// broken, it should be plenty obvious elsewhere.
//
TRDFAssert :
{
	// Actually test the RTL assert, but don't let it fail because
	// we don't want to halt the test suite. Instead, we will test
	// for failures using the harness assertion function, which is
	// designed to recover from test assumption failures.
	assert(true)
	
	// Check the harness assertion routine as well with a success,
	// so that we don't pollute the results with a spurious failed
	// test. At some point we have to simply hope that the harness
	// works correctly and will catch failed tests, so we won't go
	// all meta with trying to validate the harness from inside.
	TestAssert(true, "basic assertion check")
}



