//
// STRUCTURES.EPOCH
//
// Test suite for structure data types
//


TestStructures : Harness ref harness
{
	TestSection(harness, "Structures")
	
	
	TSAlloc(harness)
	TSMultipleMembers(harness)
	TSNested(harness)
	TSAnonymous(harness)
	TSCustomConstructor(harness)
	TSCopyConstructor(harness)
	TSStructureParams(harness)
	
	TestSectionComplete(harness)
}




structure StructureTest1 :
	integer field


structure StructureTest2 :
	integer alpha,
	integer beta,
	integer gamma
	
	
structure NestedStructure1 :
	StructureTest2 large,
	StructureTest1 small
	

TSAlloc : Harness ref harness
{
	StructureTest1 test = 42
	
	TestAssert(test.field == 42, harness, "structure initialization")
}


TSMultipleMembers : Harness ref harness
{
	StructureTest2 test = 1, 2, 3
	
	TestAssert(test.alpha == 1, harness, "structure member order 1")
	TestAssert(test.beta == 2, harness, "structure member order 2")
	TestAssert(test.gamma == 3, harness, "structure member order 3")
}


TSStructureParams : Harness ref harness
{
	StructureTest2 test = 39, 1, 2
	integer sumfields = TSSumFields(test)
	
	TestAssert(sumfields == 42, harness, "structure parameters")
}


TSSumFields : StructureTest2 ref test -> test.alpha + test.beta + test.gamma


TSNested : Harness ref harness
{
	StructureTest1 innersmall = 42
	StructureTest2 innerlarge = 1, 2, 3
	NestedStructure1 nested = innerlarge, innersmall
	
	TestAssert(nested.large.alpha == 1, harness, "nested structure members 1")
	TestAssert(nested.large.beta == 2, harness, "nested structure members 2")
	TestAssert(nested.large.gamma == 3, harness, "nested structure members 3")
	TestAssert(nested.small.field == 42, harness, "nested structure members 4")
	
	nested.large.gamma = 4
	TestAssert(nested.large.gamma == 4, harness, "nested structure member assignment")
}

TSAnonymous : Harness ref harness
{
	TSAnonHelper(harness, StructureTest1(666))
}

TSAnonHelper : Harness ref harness, StructureTest1 in
{
	TestAssert(in.field == 666, harness, "anonymous structure creation")
}


StructureTest2 : integer mandatory -> StructureTest2 ret = mandatory, 0, -1 [constructor]

TSCustomConstructor : Harness ref harness
{
	StructureTest2 test = 2
	
	TestAssert(test.alpha == 2, harness, "custom constructor 1")
	TestAssert(test.beta == 0, harness, "custom constructor 2")
	TestAssert(test.gamma == -1, harness, "custom constructor 3")
}



TSCopyConstructor : Harness ref harness
{
	StructureTest1 original = 666
	StructureTest1 copy = original
	
	TestAssert(original.field == copy.field, harness, "copy constructor")
}

