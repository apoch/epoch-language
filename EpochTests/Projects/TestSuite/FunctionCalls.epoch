//
// FUNCTIONCALLS.EPOCH
//
// Unit tests for function invocation and calling conventions
//


TestFunctionCalls : Harness ref harness
{
	TestSection(harness, "Function calls")
	
	TestAssert(TFCBooleanReturn(), harness, "literal boolean return value")
	TestAssert(TFCNonTrivialReturn(), harness, "named boolean return value")
	
	TFCParamExpectTrue(true, harness)
	TFCParamExpectFalse(false, harness)
	
	TestAssert(CompareStrings("a", "b") == -1, harness, "external string compare")
	
	TFCHigherOrder(harness)
	
	TestSectionComplete(harness)
}



TFCBooleanReturn : -> true
TFCNonTrivialReturn : -> boolean ret = true


TFCParamExpectTrue : boolean expected, Harness ref harness
{
	TestAssert(expected, harness, "boolean function parameter")
}

TFCParamExpectFalse : boolean expected, Harness ref harness
{
	TestAssert(!expected, harness, "boolean function parameter, inverted")
}



CompareStrings : string lhs, string rhs -> integer ret = 0 [external("Kernel32.dll", "lstrcmpA")]



TFCHigherOrder : Harness ref harness
{
	integer foo = 40
	TestAssert(foo == 40, harness, "higher order function precondition")
	foo = TFCMutate(foo, TFCMutatorAddition, 5)
	foo = TFCMutate(foo, TFCMutatorSubtraction, 3)
	TestAssert(foo == 42, harness, "higher order function postcondition")
}


TFCMutate : integer value, (mutator : integer, integer -> integer), integer param -> mutator(value, param)

TFCMutatorAddition : integer value, integer param -> value + param
TFCMutatorSubtraction : integer value, integer param -> value - param
