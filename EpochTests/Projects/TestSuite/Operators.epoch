//
// OPERATORS.EPOCH
//
// Unit test suite for operators
//


TestOperators : Harness ref harness
{
	TestSection(harness, "Operators")

	TOBooleanNot(harness)
	TOAssignments(harness)
	
	TestSectionComplete(harness)
}


TOReturnTrue : -> true
TOReturnFalse : -> false


TOBooleanNot : Harness ref harness
{
	TestAssert(TOReturnTrue(), harness, "operatorless boolean return")
	TestAssert(!TOReturnFalse(), harness, "boolean operator applied to function")
	TestAssert(!!TOReturnTrue(), harness, "repeated boolean operator")
	TestAssert(!!!TOReturnFalse(), harness, "triple repeated boolean operator")
}



structure AssignmentTest1 :
	integer alpha,
	integer beta

TOAssignments : Harness ref harness
{
	integer foo = 42
	TestAssert(foo == 42, harness, "assignment operator precondition")
	foo = 666
	TestAssert(foo == 666, harness, "assignment operator postcondition")
	
	integer bar = 1
	TestAssert(bar == 1, harness, "chained assignment precondition")
	bar = foo = 3
	TestAssert(foo == 3, harness, "chained assignment postcondition 1")
	TestAssert(bar == 3, harness, "chained assignment postcondition 2")

	integer baz = 2
	TestAssert(baz == 2, harness, "deep chained assignment precondition")
	bar = baz = foo = 4
	TestAssert(foo == 4, harness, "deep chained assignment postcondition 1")
	TestAssert(bar == 4, harness, "deep chained assignment postcondition 2")
	TestAssert(baz == 4, harness, "deep chained assignment postcondition 3")
	
	AssignmentTest1 struct = 1, 2
	TestAssert(struct.alpha == 1, harness, "structure member assignment precondition 1")
	TestAssert(struct.beta == 2, harness, "structure member assignment precondition 2")
	
	struct.alpha = 666
	struct.beta = 42
	
	TestAssert(struct.alpha == 666, harness, "structure member assignment postcondition 1")
	TestAssert(struct.beta == 42, harness, "structure member assignment postcondition 2")
}
