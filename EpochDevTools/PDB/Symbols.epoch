//
// PDB symbol stream logic
//


structure SymbolSection :
	integer16 ImageSectionIndex,
	integer ImageSectionRVA,
	integer ImageSectionSize,
	integer Characteristics,
	string ImageSectionName
	
	
structure SymbolProcStart :
	integer PtrParent,
	integer PtrEnd,
	integer PtrNext,
	integer CodeSize,
	integer DebugStart,
	integer DebugEnd,
	integer FunctionType,
	integer16 Segment,
	integer Flags,
	string DisplayName
	
	
structure SymbolBlockEnd :
	integer Dummy
	
	
type PDBSymbol : SymbolSection | SymbolProcStart | SymbolBlockEnd



SymbolGetSize : SymbolSection ref symbol -> integer size = 18 + length(symbol.ImageSectionName) + 1
SymbolGetSize : SymbolProcStart ref symbol -> integer size = 18 + length(symbol.DisplayName) + 1
SymbolGetSize : SymbolBlockEnd ref symbol -> integer size = 2



ByteStreamEmitSymbolList : buffer ref stream, integer ref pos, list<PDBSymbol> ref symlist
{
	ByteStreamEmitSymbol(stream, pos, symlist.value)
	ByteStreamEmitSymbolList(stream, pos, symlist.next)
}

ByteStreamEmitSymbolList : buffer ref stream, integer ref pos, nothing



ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolSection ref symbol
{
	integer16 mysize = cast(integer16, SymbolGetSize(symbol))

	ByteStreamEmitInteger16(stream, pos, mysize)
	ByteStreamEmitInteger16(stream, pos, 0x1136)						// S_SECTION
	ByteStreamEmitInteger16(stream, pos, symbol.ImageSectionIndex)
	ByteStreamEmitInteger16(stream, pos, 0)								// Alignment, reserved byte
	ByteStreamEmitInteger(stream, pos, symbol.ImageSectionRVA)
	ByteStreamEmitInteger(stream, pos, symbol.ImageSectionSize)
	ByteStreamEmitInteger(stream, pos, symbol.Characteristics)

	integer count = 0
	while(count < length(symbol.ImageSectionName))
	{
		string char = charat(symbol.ImageSectionName, count)
		ByteStreamEmitSubstring(stream, pos, char, 1)

		++count
	}
	
	ByteStreamEmitByte(stream, pos, 0)									// null terminator
}


ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolProcStart ref symbol
{
	integer16 mysize = cast(integer16, SymbolGetSize(symbol))
	
	ByteStreamEmitInteger16(stream, pos, mysize)
	ByteStreamEmitInteger16(stream, pos, 0x1110)						// S_GPROC32
	ByteStreamEmitInteger(stream, pos, symbol.PtrParent)
	ByteStreamEmitInteger(stream, pos, symbol.PtrEnd)
	ByteStreamEmitInteger(stream, pos, symbol.PtrNext)
	ByteStreamEmitInteger(stream, pos, symbol.CodeSize)
	ByteStreamEmitInteger(stream, pos, symbol.DebugStart)
	ByteStreamEmitInteger(stream, pos, symbol.DebugEnd)
	ByteStreamEmitInteger(stream, pos, symbol.FunctionType)
	ByteStreamEmitByte(stream, pos, symbol.Flags & 0xff)
	
	integer count = 0
	while(count < length(symbol.DisplayName))
	{
		string char = charat(symbol.DisplayName, count)
		ByteStreamEmitSubstring(stream, pos, char, 1)
		
		++count
	}
	
	ByteStreamEmitByte(stream, pos, 0)									// null terminator
}


ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolBlockEnd ref symbol
{
	ByteStreamEmitInteger16(stream, pos, 2)
	ByteStreamEmitInteger16(stream, pos, 0x6)							// S_END	
}



