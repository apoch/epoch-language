//
// Test bed for PDB emission from Epoch code
//


structure PDBStream :
	simplelist<integer> Blocks,
	integer Length

structure PDBDirectory :
	integer NumStreams,
	PDBStream ref OldMSFDirectory,
	PDBStream ref PDB,
	PDBStream ref TPI,
	PDBStream ref DBI,
	PDBStream ref IPI,
	PDBStream ref Globals,
	PDBStream ref Publics,
	PDBStream ref Symbols,
	PDBStream ref TemporaryHack


structure PDBFileLayout :
	integer BlockSize,
	integer BlockCount,
	PDBStream ref DirectoryHints,
	PDBStream ref DirectoryStream,
	PDBDirectory ref Directory
	

structure PDBOutputStream :
	string            FileName,
	Win32Handle       FileHandle,
	integer           FilePosition,
	PDBFileLayout ref Layout,
	DBISection        DBI

	
structure DBISection :
	integer ModuleSubstreamSize,
	integer SectionContributionSize,
	integer SectionMapSize,
	list<DBIModule> Modules

structure DBIModule :
	string SourceFile,
	string ObjectFile,
	integer SymbolSize,
	list<PDBSymbol> Symbols,
	list<SectionContribution> SectionContributions


structure SectionContribution :
	integer16 SectionIndex,
	integer Offset,
	integer Size,
	integer Characteristics,
	integer16 ModuleIndex,
	integer DataCRC,
	integer RelocCRC



WritePDB : PDBOutputStream ref stream
{
	// We only support writing in a single pass, and no reads (yet).
	// So don't allow emission of a PDB if it already opened a file.
	assert(stream.FileHandle == -1)
	

	integer GENERIC_WRITE = 0x40000000
	integer CREATE_ALWAYS = 2


	stream.FileHandle = CreateFile(stream.FileName, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0)
	if(stream.FileHandle == -1)
	{
		print("Cannot open " ; stream.FileName ; " to emit .PDB!")
		assert(false)
	}
	
	WriteMagic(stream)
	WriteSuperBlock(stream)
	
	WriteBlockMap(stream)
	
	// This is some kind of indirection that points to the actual directory block??
	PadToBeginningOfBlock(stream, stream.Layout.DirectoryHints.Blocks.value)
	stream.FilePosition = stream.FilePosition + WriteDirectoryHint(stream.FileHandle, stream.Layout.DirectoryStream.Blocks.value)
	
	// Move up to the block for the directory data
	PadToBeginningOfBlock(stream, stream.Layout.DirectoryStream.Blocks.value)
	WriteDirectory(stream)
	
	// Move up to the block for the PDB info stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.PDB.Blocks.value)
	stream.FilePosition = WritePDBInfoStream(stream.FileHandle, stream.FilePosition)
	
	// Move up and write the TPI stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.TPI.Blocks.value)
	stream.FilePosition = WriteTPIStream(stream.FileHandle, stream.FilePosition)
	
	// Move up and write the DBI stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.DBI.Blocks.value)
	WriteDBIStream(stream)

	// Move up and write the IPI stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.IPI.Blocks.value)
	stream.FilePosition = WriteIPIStream(stream.FileHandle, stream.FilePosition)

	// Move up and write the globals (DBI) stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.Globals.Blocks.value)
	stream.FilePosition = WriteGlobalsStream(stream.FileHandle, stream.FilePosition)
	
	// Move up and write the publics (DBI) stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.Publics.Blocks.value)
	stream.FilePosition = WritePublicsStream(stream.FileHandle, stream.FilePosition)
	
	// Move up and write the symbol records (DBI) stream
	PadToBeginningOfBlock(stream, stream.Layout.Directory.Symbols.Blocks.value)
	stream.FilePosition = WriteSymbolRecordsStream(stream.FileHandle, stream.FilePosition)
	
	// HACK - TODO
	PadToBeginningOfBlock(stream, 13)
	WriteDBIModuleSymbols(stream, stream.DBI.Modules.value)
	
	// Pad to the end of the file
	PadToBeginningOfBlock(stream, stream.Layout.BlockCount + 1)

	CloseHandle(stream.FileHandle)
}



WriteBlockMap : PDBOutputStream ref stream
{
	buffer ff = 1
	integer ffsize = 0
	
	ByteStreamEmitByte(ff, ffsize, 0xff)
	
	while(stream.FilePosition < stream.Layout.BlockSize * 3)
	{
		integer written = 0
		WriteFile(stream.FileHandle, ff, ffsize, written, 0)
		stream.FilePosition = stream.FilePosition + 1
	}
}


PadToBeginningOfBlock : PDBOutputStream ref stream, integer blockindex
{
	// TODO - lame compiler bug workaround in the 32-bit compiler
	integer fpos = stream.FilePosition
	fpos += WritePadding(stream.FileHandle, stream.FilePosition, stream.Layout.BlockSize * blockindex)
	stream.FilePosition = fpos
}



WriteDirectoryHint : Win32Handle pdbfilehandle, integer hint -> integer written = 0
{
	buffer hack = 32
	integer hacksize = 0
	
	ByteStreamEmitInteger(hack, hacksize, hint)		// Block index of where the directory actually lives
	
	WriteFile(pdbfilehandle, hack, hacksize, written, 0)
}



WriteMagic : PDBOutputStream ref stream
{
	buffer magic = 64
	integer magicsize = 0
	
	string magicstring = "Microsoft C/C++ MSF 7.00"	// Magic header start
	
	integer count = 0
	while(count < length(magicstring))
	{
		string char = charat(magicstring, count)
		ByteStreamEmitSubstring(magic, magicsize, char, 1)

		++count
	}
	
	ByteStreamEmitByte(magic, magicsize, 13)		// Carriage return
	ByteStreamEmitByte(magic, magicsize, 10)		// Linefeed
	ByteStreamEmitByte(magic, magicsize, 26)		// Magic?
	ByteStreamEmitByte(magic, magicsize, 68)		// 'D'
	ByteStreamEmitByte(magic, magicsize, 83)		// 'S'
	ByteStreamEmitByte(magic, magicsize, 0)			// Null magic
	ByteStreamEmitByte(magic, magicsize, 0)			// Null magic
	ByteStreamEmitByte(magic, magicsize, 0)			// Null magic
	
	WriteFile(stream.FileHandle, magic, magicsize, stream.FilePosition, 0)
}


WriteSuperBlock : PDBOutputStream ref stream
{
	buffer sbheader = 128
	integer headersize = 0
	
	ByteStreamEmitInteger(sbheader, headersize, stream.Layout.BlockSize)
	ByteStreamEmitInteger(sbheader, headersize, 1)			// Free block map index
	ByteStreamEmitInteger(sbheader, headersize, stream.Layout.BlockCount)
	ByteStreamEmitInteger(sbheader, headersize, stream.Layout.DirectoryStream.Length)
	ByteStreamEmitInteger(sbheader, headersize, 0)			// Unknown
	ByteStreamEmitInteger(sbheader, headersize, stream.Layout.DirectoryHints.Blocks.value)
	
	integer written = 0
	WriteFile(stream.FileHandle, sbheader, headersize, written, 0)
	
	integer endfileposition = stream.FilePosition + written
	endfileposition += WritePadding(stream.FileHandle, endfileposition, stream.Layout.BlockSize)
	
	stream.FilePosition = endfileposition
}



WriteDirectory : PDBOutputStream ref stream
{
	buffer directory = 128
	integer directorysize = 0
	
	// Number of streams
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.NumStreams)	

	// Stream sizes
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.OldMSFDirectory.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.PDB.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.TPI.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.DBI.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.IPI.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.Globals.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.Publics.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.Symbols.Length)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.TemporaryHack.Length)

	// Stream blocks
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.OldMSFDirectory.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.PDB.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.TPI.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.DBI.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.IPI.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.Globals.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.Publics.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.Symbols.Blocks.value)
	ByteStreamEmitInteger(directory, directorysize, stream.Layout.Directory.TemporaryHack.Blocks.value)
	
	integer written = 0
	WriteFile(stream.FileHandle, directory, directorysize, written, 0)
	
	stream.FilePosition = stream.FilePosition + written
}



WritePDBInfoStream : Win32Handle pdbfilehandle, integer startfileposition -> integer endfileposition = 0
{
	buffer header = 256
	integer headersize = 0
	
	integer version = 20000404
	integer signature = 0 // TODO - timestamp?
	integer age = 1
	
	ByteStreamEmitInteger(header, headersize, version)
	ByteStreamEmitInteger(header, headersize, signature)
	ByteStreamEmitInteger(header, headersize, age)

	// GUID (16 bytes)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)

	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)

	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)

	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)
	ByteStreamEmitByte(header, headersize, 0xf0)


	// String table thingy
	ByteStreamEmitInteger(header, headersize, 80)		// Hack
	ByteStreamEmitInteger(header, headersize, 4096)
	ByteStreamEmitInteger(header, headersize, 4097)
	ByteStreamEmitInteger(header, headersize, 4098)
	ByteStreamEmitInteger(header, headersize, 4099)
	
	
	// DUMB TEMPORARY HACK
	ByteStreamEmitInteger(header, headersize, 0xfe)
	ByteStreamEmitInteger(header, headersize, 0xfd)
	ByteStreamEmitInteger(header, headersize, 0xfc)
	ByteStreamEmitInteger(header, headersize, 0xfb)

	ByteStreamEmitInteger(header, headersize, 0xee)
	ByteStreamEmitInteger(header, headersize, 0xed)
	ByteStreamEmitInteger(header, headersize, 0xec)
	ByteStreamEmitInteger(header, headersize, 0xeb)

	ByteStreamEmitInteger(header, headersize, 0xde)
	ByteStreamEmitInteger(header, headersize, 0xdd)
	ByteStreamEmitInteger(header, headersize, 0xdc)
	ByteStreamEmitInteger(header, headersize, 0xdb)

	ByteStreamEmitInteger(header, headersize, 0xce)
	ByteStreamEmitInteger(header, headersize, 0xcd)
	ByteStreamEmitInteger(header, headersize, 0xcc)
	ByteStreamEmitInteger(header, headersize, 0xcb)

	ByteStreamEmitInteger(header, headersize, 0xbe)
	ByteStreamEmitInteger(header, headersize, 0xbd)
	ByteStreamEmitInteger(header, headersize, 0)		// DE-POISONED: this is an array size of some kind
	ByteStreamEmitInteger(header, headersize, 0)		// same as above

	ByteStreamEmitInteger(header, headersize, 0xae)
	ByteStreamEmitInteger(header, headersize, 0xad)
	ByteStreamEmitInteger(header, headersize, 0xac)
	ByteStreamEmitInteger(header, headersize, 0xab)

	ByteStreamEmitInteger(header, headersize, 0x9e)
	ByteStreamEmitInteger(header, headersize, 0x9d)
	ByteStreamEmitInteger(header, headersize, 0x9c)
	ByteStreamEmitInteger(header, headersize, 0x9b)

	ByteStreamEmitInteger(header, headersize, 0x8e)
	ByteStreamEmitInteger(header, headersize, 0x8d)
	ByteStreamEmitInteger(header, headersize, 0x8c)
	ByteStreamEmitInteger(header, headersize, 0x8b)

	ByteStreamEmitInteger(header, headersize, 0x7e)
	ByteStreamEmitInteger(header, headersize, 0x7d)
	ByteStreamEmitInteger(header, headersize, 0x7c)
	ByteStreamEmitInteger(header, headersize, 0x7b)

	ByteStreamEmitInteger(header, headersize, 0x6e)
	ByteStreamEmitInteger(header, headersize, 0x6d)
	ByteStreamEmitInteger(header, headersize, 0x6c)
	ByteStreamEmitInteger(header, headersize, 0x6b)

	ByteStreamEmitInteger(header, headersize, 0x5e)
	ByteStreamEmitInteger(header, headersize, 0x5d)
	ByteStreamEmitInteger(header, headersize, 0x5c)
	ByteStreamEmitInteger(header, headersize, 0x5b)


	integer written = 0
	WriteFile(pdbfilehandle, header, headersize, written, 0)
	
	endfileposition = startfileposition + written
}



WriteTPIStream : Win32Handle pdbfilehandle, integer startfileposition -> integer endfileposition = 0
{
	buffer header = 128
	integer headersize = 0
	
	integer version = 20040203

	ByteStreamEmitInteger(header, headersize, version)
	ByteStreamEmitInteger(header, headersize, 56)			// TODO - hardcoded magic size
	ByteStreamEmitInteger(header, headersize, 0)		// Type index begin
	ByteStreamEmitInteger(header, headersize, 0)		// Type index end
	ByteStreamEmitInteger(header, headersize, 0)		// Type record bytes

	ByteStreamEmitInteger16(header, headersize, 0)		// Hash stream index
	ByteStreamEmitInteger16(header, headersize, 0)		// Hash aux stream index
	
	// These values seem fixed?
	ByteStreamEmitInteger(header, headersize, 4)		// Hash key size
	ByteStreamEmitInteger(header, headersize, 262143)	// Number of hash buckets
	
	ByteStreamEmitInteger(header, headersize, 0)		// Hash value buffer offset
	ByteStreamEmitInteger(header, headersize, 0)		// Hash value buffer length
	
	ByteStreamEmitInteger(header, headersize, 0)		// Index offset buffer offset
	ByteStreamEmitInteger(header, headersize, 0)		// Index offset buffer length
	
	ByteStreamEmitInteger(header, headersize, 0)		// Hash adjustment buffer offset
	ByteStreamEmitInteger(header, headersize, 0)		// Hash adjustment buffer length


	integer written = 0
	WriteFile(pdbfilehandle, header, headersize, written, 0)
	
	endfileposition = startfileposition + written	
}



WriteDBIStream : PDBOutputStream ref stream
{
	buffer header = 128
	integer headersize = 0
	
	integer signature = 0xffffffff
	integer version = 19990903
	
	ByteStreamEmitInteger(header, headersize, signature)
	ByteStreamEmitInteger(header, headersize, version)

	ByteStreamEmitInteger(header, headersize, 1)		// age (must match PDB age)
	ByteStreamEmitInteger16(header, headersize, 5)		// stream index of global symbols			// TODO - get this from the PDBDirectory
	ByteStreamEmitInteger16(header, headersize, 0)		// build number
	ByteStreamEmitInteger16(header, headersize, 6)		// stream index of public symbols			// TODO - get this from the PDBDirectory
	ByteStreamEmitInteger16(header, headersize, 0)		// PDB DLL version (MSPDBxxx.DLL)
	ByteStreamEmitInteger16(header, headersize, 7)		// stream index of symbol records			// TODO - get this from the PDBDirectory
	ByteStreamEmitInteger16(header, headersize, 0)		// rebuild number of PDB DLL
	ByteStreamEmitInteger(header, headersize, stream.DBI.ModuleSubstreamSize)
	ByteStreamEmitInteger(header, headersize, stream.DBI.SectionContributionSize)
	ByteStreamEmitInteger(header, headersize, stream.DBI.SectionMapSize)
	ByteStreamEmitInteger(header, headersize, 0)		// file info substream size
	ByteStreamEmitInteger(header, headersize, 0)		// type server map size
	ByteStreamEmitInteger(header, headersize, 0)		// index of MFC type server
	ByteStreamEmitInteger(header, headersize, 0)		// DbgHeader info size
	ByteStreamEmitInteger(header, headersize, 0)		// EC substream size (?)
	ByteStreamEmitInteger16(header, headersize, 0)		// flags
	ByteStreamEmitInteger16(header, headersize, 0x8664)	// machine type (AMD64)
	ByteStreamEmitInteger(header, headersize, 0)		// pad

	integer written = 0
	WriteFile(stream.FileHandle, header, headersize, written, 0)
	stream.FilePosition = stream.FilePosition + written	

	
	EmitDBIModule(stream, stream.DBI.Modules)
	EmitDBISectionContributions(stream)
	EmitDBISectionMap(stream)
}



EmitDBISectionContributions : PDBOutputStream ref stream
{
	buffer header = 16
	integer headersize = 0

	integer version = 0xeffe0000 + 19970605
	
	ByteStreamEmitInteger(header, headersize, version)
	
	integer written = 0
	WriteFile(stream.FileHandle, header, headersize, written, 0)
	stream.FilePosition = stream.FilePosition + written
	
	
	EmitDBISectionContributionsForModules(stream, stream.DBI.Modules)
}


EmitDBISectionMap : PDBOutputStream ref stream
{
	buffer header = 512
	integer headersize = 0
	
	ByteStreamEmitInteger16(header, headersize, 9)
	ByteStreamEmitInteger16(header, headersize, 9)
	
	// section descriptor
	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 1)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length
	
	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 2)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length

	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 3)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length

	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 4)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length

	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 5)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length

	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 6)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length

	ByteStreamEmitInteger16(header, headersize, 0x109)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 7)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x100)		// length

	ByteStreamEmitInteger16(header, headersize, 0x10d)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 8)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0x1000)		// length

	ByteStreamEmitInteger16(header, headersize, 0x208)		// flags
	ByteStreamEmitInteger16(header, headersize, 0)			// overlay
	ByteStreamEmitInteger16(header, headersize, 0)			// group
	ByteStreamEmitInteger16(header, headersize, 9)			// frame
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// name
	ByteStreamEmitInteger16(header, headersize, 0xffff)		// class name
	ByteStreamEmitInteger(header, headersize, 0)			// offset
	ByteStreamEmitInteger(header, headersize, 0xffffffff)	// length	
	
	integer written = 0
	WriteFile(stream.FileHandle, header, headersize, written, 0)
	stream.FilePosition = stream.FilePosition + written
}


EmitDBISectionContributionsForModules : PDBOutputStream ref stream, list<DBIModule> ref modules
{
	EmitDBISectionContribution(stream, modules.value.SectionContributions)
	EmitDBISectionContributionsForModules(stream, modules.next)
}

EmitDBISectionContributionsForModules : PDBOutputStream ref stream, nothing


EmitDBISectionContribution : PDBOutputStream ref stream, list<SectionContribution> ref scs
{
	EmitDBISectionContributionSingle(stream, scs.value)
	EmitDBISectionContribution(stream, scs.next)
}

EmitDBISectionContribution : PDBOutputStream ref stream, nothing


EmitDBISectionContributionSingle : PDBOutputStream ref stream, SectionContribution ref sc
{
	buffer contrib = 128
	integer contribsize = 0
	
	ByteStreamEmitInteger16(contrib, contribsize, sc.SectionIndex)
	ByteStreamEmitInteger16(contrib, contribsize, 0)
	ByteStreamEmitInteger(contrib, contribsize, sc.Offset)
	ByteStreamEmitInteger(contrib, contribsize, sc.Size)
	ByteStreamEmitInteger(contrib, contribsize, sc.Characteristics)
	ByteStreamEmitInteger16(contrib, contribsize, sc.ModuleIndex)
	ByteStreamEmitInteger16(contrib, contribsize, 0)
	ByteStreamEmitInteger(contrib, contribsize, sc.DataCRC)
	ByteStreamEmitInteger(contrib, contribsize, sc.RelocCRC)
	
	integer written = 0
	WriteFile(stream.FileHandle, contrib, contribsize, written, 0)
	stream.FilePosition = stream.FilePosition + written
}


ComputeSymbolSize : DBIModule ref mod
{
	mod.SymbolSize = 0
	ComputeSymbolSize(mod.Symbols, mod.SymbolSize)
}

ComputeSymbolSize : list<PDBSymbol> ref symlist, integer ref sizecounter
{
	sizecounter += SymbolGetSize(symlist.value) + 2
	
	//while((sizecounter & 3) != 0)
	//{
	//	++sizecounter
	//}
	
	ComputeSymbolSize(symlist.next, sizecounter)
}

ComputeSymbolSize : nothing, integer ref sizecounter


EmitDBIModule : PDBOutputStream ref stream, list<DBIModule> ref modlist
{
	ComputeSymbolSize(modlist.value)


	buffer unusedheader = 4
	integer unusedheadersize = 0
	ByteStreamEmitInteger(unusedheader, unusedheadersize, 0)

	integer written = 0
	WriteFile(stream.FileHandle, unusedheader, unusedheadersize, written, 0)
	stream.FilePosition = stream.FilePosition + written


	EmitDBISectionContributionSingle(stream, modlist.value.SectionContributions.value)	


	buffer modinfo = 128
	integer modsize = 0
		
	ByteStreamEmitInteger16(modinfo, modsize, 0)		// flags		TODO
	ByteStreamEmitInteger16(modinfo, modsize, 8)		// stream number of debug info		TODO
	ByteStreamEmitInteger(modinfo, modsize, modlist.value.SymbolSize + 4)
	ByteStreamEmitInteger(modinfo, modsize, 0)			// bytes of line number info
	ByteStreamEmitInteger(modinfo, modsize, 0)			// bytes of C13 line number info
	
	ByteStreamEmitInteger16(modinfo, modsize, 1)		// num contributing files
	ByteStreamEmitInteger16(modinfo, modsize, 0)		// padding
	
	ByteStreamEmitInteger(modinfo, modsize, 0)			// unused (file name offsets)
	ByteStreamEmitInteger(modinfo, modsize, 0)			// name index for source file name
	ByteStreamEmitInteger(modinfo, modsize, 0)			// name index for path to compiler PDB ??


	integer count = 0
	while(count < length(modlist.value.SourceFile))
	{
		string char = charat(modlist.value.SourceFile, count)
		ByteStreamEmitSubstring(modinfo, modsize, char, 1)

		++count
	}
	
	ByteStreamEmitByte(modinfo, modsize, 0)
	

	count = 0
	while(count < length(modlist.value.ObjectFile))
	{
		string char = charat(modlist.value.ObjectFile, count)
		ByteStreamEmitSubstring(modinfo, modsize, char, 1)

		++count
	}
	
	ByteStreamEmitByte(modinfo, modsize, 0)
	
	while((modsize & 3) != 0)
	{
		ByteStreamEmitByte(modinfo, modsize, 0)
	}
	
	
	WriteFile(stream.FileHandle, modinfo, modsize, written, 0)
	stream.FilePosition = stream.FilePosition + written

	EmitDBIModule(stream, modlist.next)
}

EmitDBIModule : PDBOutputStream ref stream, nothing


WriteIPIStream : Win32Handle pdbfilehandle, integer startfileposition -> integer endfileposition = 0
{
	buffer header = 128
	integer headersize = 0
	
	integer version = 20040203

	ByteStreamEmitInteger(header, headersize, version)
	ByteStreamEmitInteger(header, headersize, 56)			// TODO - hardcoded magic size
	ByteStreamEmitInteger(header, headersize, 0)		// Type index begin
	ByteStreamEmitInteger(header, headersize, 0)		// Type index end
	ByteStreamEmitInteger(header, headersize, 0)		// Type record bytes

	ByteStreamEmitInteger16(header, headersize, 0)		// Hash stream index
	ByteStreamEmitInteger16(header, headersize, 0)		// Hash aux stream index
	
	// These values seem fixed?
	ByteStreamEmitInteger(header, headersize, 4)		// Hash key size
	ByteStreamEmitInteger(header, headersize, 262143)	// Number of hash buckets
	
	ByteStreamEmitInteger(header, headersize, 0)		// Hash value buffer offset
	ByteStreamEmitInteger(header, headersize, 0)		// Hash value buffer length
	
	ByteStreamEmitInteger(header, headersize, 0)		// Index offset buffer offset
	ByteStreamEmitInteger(header, headersize, 0)		// Index offset buffer length
	
	ByteStreamEmitInteger(header, headersize, 0)		// Hash adjustment buffer offset
	ByteStreamEmitInteger(header, headersize, 0)		// Hash adjustment buffer length


	integer written = 0
	WriteFile(pdbfilehandle, header, headersize, written, 0)
	
	endfileposition = startfileposition + written	
}



WriteGlobalsStream : Win32Handle pdbfilehandle, integer startfileposition -> integer endfileposition = 0
{
	buffer header = 1024
	integer headersize = 0
	
	ByteStreamEmitInteger(header, headersize, 0)		// hash
	ByteStreamEmitInteger(header, headersize, 0)		// address map
	ByteStreamEmitInteger(header, headersize, 0)		// num thunks
	ByteStreamEmitInteger(header, headersize, 0)		// size of thunk
	ByteStreamEmitInteger16(header, headersize, 0)		// section index thunk table
	ByteStreamEmitInteger16(header, headersize, 0)		// padding
	ByteStreamEmitInteger(header, headersize, 0)		// offset of thunk table
	ByteStreamEmitInteger(header, headersize, 0)		// number of sections

	// Hash header
	ByteStreamEmitInteger(header, headersize, 0xffffffff)		// signature
	ByteStreamEmitInteger(header, headersize, 0xeffe0000 + 19990810)		// version
	ByteStreamEmitInteger(header, headersize, 0)		// size
	ByteStreamEmitInteger(header, headersize, 0)		// num buckets
	
	
	// Magic bitmap
	integer count = 0
	while(count < 516)
	{
		ByteStreamEmitByte(header, headersize, 0)
		
		++count
	}
	

	integer written = 0
	WriteFile(pdbfilehandle, header, headersize, written, 0)
	
	endfileposition = startfileposition + written	
}


WritePublicsStream : Win32Handle pdbfilehandle, integer startfileposition -> integer endfileposition = 0
{
	endfileposition = WriteGlobalsStream(pdbfilehandle, startfileposition)
}


WriteSymbolRecordsStream : Win32Handle pdbfilehandle, integer startfileposition -> integer endfileposition = 0
{
	buffer symbols = 1024
	integer symbolssize = 0


	SymbolSection sectionsymbol = 8, 0x8000, 0x1000, 0x60000020, ".text"
	ByteStreamEmitSymbol(symbols, symbolssize, sectionsymbol)


	integer written = 0
	WriteFile(pdbfilehandle, symbols, symbolssize, written, 0)
	endfileposition = startfileposition + written
}



WriteDBIModuleSymbols : PDBOutputStream ref stream, DBIModule ref module
{
	buffer header = 4
	integer headersize = 0
	
	ByteStreamEmitInteger(header, headersize, 4)
	
	integer written = 0
	WriteFile(stream.FileHandle, header, headersize, written, 0)
	
	stream.FilePosition = stream.FilePosition + written
	
	
	buffer symboldata = module.SymbolSize + 1024
	integer symboldatasize = 0
	ByteStreamEmitSymbolList(symboldata, symboldatasize, module.Symbols)
	
	WriteFile(stream.FileHandle, symboldata, symboldatasize, written, 0)
	stream.FilePosition = stream.FilePosition + written
	
	
	buffer footer = 4
	integer footersize = 0
	
	ByteStreamEmitInteger(footer, footersize, 0)			// Global Refs size
	
	WriteFile(stream.FileHandle, footer, footersize, written, 0)
	stream.FilePosition = stream.FilePosition + written
}


