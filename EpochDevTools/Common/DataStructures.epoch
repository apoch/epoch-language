//
// The Epoch Language Project
// Epoch Development Tools - Common Library Modules
//
// DATASTRUCTURES.EPOCH
// Library of common data structures and algorithms for using them
//




//
// Trie data structure
//
// The trie is a special structure which is especially useful for
// mapping strings onto integer handles.
//

structure Trie :
	integer Character,
	listnode<Trie> Children,
	integer Handle


PlaceDataInTrie : Trie ref trie, string data, integer handle [nogc]
{
	integer datalen = length(data)
	if(datalen == 0)
	{
		trie.Handle = handle
		return()
	}

	PlaceDataInTrieChild(trie.Children, trie, subchar(data, 0), data, 1, datalen, handle)
}

PlaceDataInTrieRecurse : Trie ref trie, string data, integer offset, integer datalen, integer handle [nogc]
{
	if(datalen == offset)
	{
		trie.Handle = handle
		return()
	}

	PlaceDataInTrieChild(trie.Children, trie, subchar(data, offset), data, offset + 1, datalen, handle)
}

PlaceDataInTrieChild : list<Trie> ref children, Trie ref originaltrie, integer character, string alldata, integer offset, integer datalen, integer handle [nogc]
{
	if(children.value.Character == character)
	{
		PlaceDataInTrieRecurse(children.value, alldata, offset, datalen, handle)
	}
	else
	{
		PlaceDataInTrieChild(children.next, originaltrie, character, alldata, offset, datalen, handle)
	}
}

PlaceDataInTrieChild : nothing, Trie ref originaltrie, integer character, string alldata, integer offset, integer datalen, integer handle [nogc]
{
	Trie newtrie = character, nothing, 0
	PlaceDataInTrieRecurse(newtrie, alldata, offset, datalen, handle)

	list<Trie> newtrielist = newtrie, originaltrie.Children
	originaltrie.Children = newtrielist
}


FindHandleInTrie : Trie ref trie, string data -> integer handle = 0 [nogc]
{
	if(length(data) == 0)
	{
		handle = trie.Handle
		return()
	}

	handle = FindHandleInTrieChildren(trie.Children, subchar(data, 0), data, 1, length(data))
}

FindHandleInTrieChildren : list<Trie> ref triechildren, integer character, string alldata, integer offset, integer datalength -> integer handle = 0 [nogc]
{
	if(triechildren.value.Character == character)
	{
		if(datalength == offset)
		{
			handle = triechildren.value.Handle
			return()
		}

		handle = FindHandleInTrieChildren(triechildren.value.Children, subchar(alldata, offset), alldata, offset + 1, datalength)
		return()
	}

	handle = FindHandleInTrieChildren(triechildren.next, character, alldata, offset, datalength)
}

FindHandleInTrieChildren : nothing, integer character, string alldata, integer offset, integer datalength -> integer handle = 0 [nogc]


//
// Binary tree structure
//
// This structure is useful for dictionaries mapping integers
// onto other types, particularly heavy-weight strucures.
//

type BinaryTreeNode<type T> : BinaryTree<T> | nothing

structure BTPayloadWrap<type T> :
	T ref Payload

structure BinaryTree<type T> :
	integer Value,
	BTPayloadWrap<T> Payload,
	BinaryTreeNode<T> Left,
	BinaryTreeNode<T> Right,
	integer Height
	
structure BinaryTreeRoot<type T> :
	BinaryTreeNode<T> ref RootNode
	
	
BinaryTreeCreateOrInsert<type T> : BinaryTreeRoot<T> ref root, integer value, T ref payload [nogc]
{
	if(!InsertIntoBinaryTree<T>(root.RootNode, value, payload))
	{
		BTPayloadWrap<T> wrap = payload
		BinaryTree<T> newtree = value, wrap, nothing, nothing, 0
		root.RootNode = newtree
	}
}


InsertIntoBinaryTree<type T> : BinaryTree<T> ref tree, integer value, T ref payload -> boolean ret = true [nogc]
{
	if(tree.Value > value)
	{
		if(!InsertIntoBinaryTree<T>(tree.Left, value, payload))
		{
			BTPayloadWrap<T> wrap = payload
			BinaryTree<T> newtree = value, wrap, nothing, nothing, 0
			tree.Left = newtree
		}
	}
	elseif(tree.Value < value)
	{
		if(!InsertIntoBinaryTree<T>(tree.Right, value, payload))
		{
			BTPayloadWrap<T> wrap = payload
			BinaryTree<T> newtree = value, wrap, nothing, nothing, 0
			tree.Right = newtree
		}
	}
	else
	{
		return()
	}

	integer balance = ComputeBalance<T>(tree)
	if(balance > 1)
	{
		tree.Height = RecomputeTreeDepth<T>(tree)
		if(ComputeBalance<T>(tree.Left) > 0)
		{
			RotateLL<T>(tree)
		}
		else
		{
			RotateLR<T>(tree)
		}
	}
	elseif(balance < -1)
	{
		tree.Height = RecomputeTreeDepth<T>(tree)
		if(ComputeBalance<T>(tree.Right) < 0)
		{
			RotateRR<T>(tree)
		}
		else
		{
			RotateRL<T>(tree)
		}
	}
}

InsertIntoBinaryTree<type T> : nothing, integer value, T ref payload -> boolean ret = false [nogc]

RotateLL<type T> : BinaryTree<T> ref tree [nogc]
{
	BinaryTreeNode<T> temp = tree.Right
	tree.Right = tree.Left
	tree.Left = GetLeft<T>(tree.Right)

	BinaryTreeNode<T> newnode = GetRight<T>(tree.Right)
	SetNodeLeft<T>(tree.Right, newnode)
	SetNodeRight<T>(tree.Right, temp)

	integer tempvalue = tree.Value
	tree.Value = GetNodeValue<T>(tree.Right)
	SetNodeValue<T>(tree.Right, tempvalue)

	SwapNodePayload<T>(tree, tree.Right)

	SetHeight<T>(tree.Right, RecomputeTreeDepth<T>(tree.Right))
	tree.Height = RecomputeTreeDepth<T>(tree)
}

GetLeft<type T> : BinaryTree<T> ref tree -> BinaryTreeNode<T> ret = tree.Left [nogc]
GetLeft<type T> : nothing -> BinaryTreeNode<T> ret = nothing [nogc]

GetRight<type T> : BinaryTree<T> ref tree -> BinaryTreeNode<T> ret = tree.Right [nogc]
GetRight<type T> : nothing -> BinaryTreeNode<T> ret = nothing [nogc]

SetNodeLeft<type T> : BinaryTree<T> ref tree, BinaryTreeNode<T> newleft [nogc]
{
	tree.Left = newleft
}

SetNodeRight<type T> : BinaryTree<T> ref tree, BinaryTreeNode<T> newright [nogc]
{
	tree.Right = newright
}

RotateRR<type T> : BinaryTree<T> ref tree [nogc]
{
	BinaryTreeNode<T> temp = tree.Left
	tree.Left = tree.Right
	tree.Right = GetRight<T>(tree.Left)

	BinaryTreeNode<T> newnode = GetLeft<T>(tree.Left)
	SetNodeRight<T>(tree.Left, newnode)
	SetNodeLeft<T>(tree.Left, temp)

	integer tempvalue = tree.Value
	tree.Value = GetNodeValue<T>(tree.Left)
	SetNodeValue<T>(tree.Left, tempvalue)

	SwapNodePayload<T>(tree, tree.Left)

	SetHeight<T>(tree.Left, RecomputeTreeDepth<T>(tree.Left))
	tree.Height = RecomputeTreeDepth<T>(tree)
}

RotateLR<type T> : BinaryTree<T> ref tree [nogc]
{
	RotateRR<T>(tree.Left)
	RotateLL<T>(tree)
}

RotateRL<type T> : BinaryTree<T> ref tree [nogc]
{
	RotateLL<T>(tree.Right)
	RotateRR<T>(tree)
}


TreeDepth<type T> : BinaryTree<T> ref tree -> integer depth = tree.Height [nogc]
TreeDepth<type T> : nothing -> 0 [nogc]


HasNode<type T> : BinaryTree<T> ref tree -> true [nogc]
HasNode<type T> : nothing -> false [nogc]

ComputeBalance<type T> : BinaryTree<T> ref tree -> integer balance = 0 [nogc]
{
	integer leftdepth = TreeDepth<T>(tree.Left)
	integer rightdepth = TreeDepth<T>(tree.Right)

	balance = leftdepth - rightdepth
}

ComputeBalance<type T> : nothing -> 0 [nogc]


RecomputeTreeDepth<type T> : BinaryTree<T> ref tree -> integer depth = 1 [nogc]
{
	integer ldepth = TreeDepth<T>(tree.Left)
	integer rdepth = TreeDepth<T>(tree.Right)

	if(ldepth > rdepth)
	{
		depth += ldepth
	}
	else
	{
		depth += rdepth
	}
}

SetHeight<type T> : BinaryTree<T> ref tree, integer newheight [nogc]
{
	tree.Height = newheight
}


SearchBinaryTree<type T> : BinaryTree<T> ref tree, integer target -> boolean found = false [nogc]
{
	if(tree.Value == target)
	{
		found = true
		return()
	}
	elseif(target < tree.Value)
	{
		found = SearchBinaryTree<T>(tree.Left, target)
	}
	else
	{
		found = SearchBinaryTree<T>(tree.Right, target)
	}
}

SearchBinaryTree<type T> : nothing, integer target -> boolean found = false [nogc]


SearchBinaryTreeForPayload<type T> : BinaryTree<T> ref tree, integer target, ContextNode<T> ref out -> boolean found = false [nogc]
{
	if(tree.Value == target)
	{
		found = true
		ContextNode<T> outwrap = tree.Payload.Payload
		out = outwrap
		return()
	}
	elseif(target < tree.Value)
	{
		found = SearchBinaryTreeForPayload<T>(tree.Left, target, out)
	}
	else
	{
		found = SearchBinaryTreeForPayload<T>(tree.Right, target, out)
	}
}

SearchBinaryTreeForPayload<type T> : nothing, integer target, ContextNode<T> ref out -> boolean found = false [nogc]


BinaryTreeCopyPayload<type T> : BinaryTree<T> ref tree, integer target, T ref out -> boolean found = false [nogc]
{
	if(tree.Value == target)
	{
		found = true
		out = tree.Payload.Payload
		return()
	}
	elseif(target < tree.Value)
	{
		found = BinaryTreeCopyPayload<T>(tree.Left, target, out)
	}
	else
	{
		found = BinaryTreeCopyPayload<T>(tree.Right, target, out)
	}
}

BinaryTreeCopyPayload<type T> : nothing, integer target, T ref out -> boolean found = false [nogc]



GetNodeValue<type T> : BinaryTree<T> ref node -> integer ret = node.Value [nogc]

SetNodeValue<type T> : BinaryTree<T> ref node, integer value [nogc]
{
	node.Value = value
}

SwapNodePayload<type T> : BinaryTree<T> ref a, BinaryTree<T> ref b [nogc]
{
	BTPayloadWrap<T> p = a.Payload.Payload
	a.Payload = b.Payload
	b.Payload = p
}



BinaryTreeWalkAllNodes<type T> : BinaryTree<T> ref tree, (func : integer, T ref -> boolean) -> boolean ret = true
{
	if(!func(tree.Value, tree.Payload.Payload))
	{
		ret = false
	}

	if(!BinaryTreeWalkAllNodes<T>(tree.Left, func))
	{
		ret = false
	}

	if(!BinaryTreeWalkAllNodes<T>(tree.Right, func))
	{
		ret = false
	}
}

BinaryTreeWalkAllNodes<type T> : nothing, (func : integer, T ref -> boolean) -> boolean ret = true



BinaryTreeWalkAllNodesWithParam<type T, type ParamT> : BinaryTree<T> ref tree, (func : integer, T ref, ParamT ref -> boolean), ParamT ref param -> boolean ret = true
{
	if(!func(tree.Value, tree.Payload.Payload, param))
	{
		ret = false
	}

	if(!BinaryTreeWalkAllNodesWithParam<T, ParamT>(tree.Left, func, param))
	{
		ret = false
	}

	if(!BinaryTreeWalkAllNodesWithParam<T, ParamT>(tree.Right, func, param))
	{
		ret = false
	}
}

BinaryTreeWalkAllNodesWithParam<type T, type ParamT> : nothing, (func : integer, T ref, ParamT ref -> boolean), ParamT ref param -> boolean ret = true



//
// Miscellaneous useful functions
//

assertmsg : boolean check, string message [nogc]
{
	if(!check)
	{
		print(message)
		assert(false)
	}
}

