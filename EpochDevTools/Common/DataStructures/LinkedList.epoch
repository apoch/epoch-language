//
// The Epoch Language Project
// Epoch Development Tools - Common Library Modules
//
// LINKEDLIST.EPOCH
// Common library implementation of linked list data structure
//



//
// Singly linked list data structures
//
// The simplelist holds elements by value type, whereas
// the list holds them by reference. Prefer to use the
// simplelist for things which are cheap to copy.
//

type simplelistnode<type T> : simplelist<T> | nothing

structure simplelist<type T> :
	T value,
	simplelistnode<T> next


type listnode<type T> : list<T> | nothing

structure list<type T> :
	T ref value,
	listnode<T> next


//
// List manipulation functions
//

simpleprepend<type T> : simplelist<T> ref thelist, T value [nogc]
{
	simplelist<T> newlist = value, thelist
	thelist = newlist
}

prepend<type T> : list<T> ref thelist, T ref value [nogc]
{
	list<T> newlist = value, thelist
	thelist = newlist
}

ListPrependOrCreate<type T> : listnode<T> ref node, T ref value [nogc]
{
	list<T> newlist = value, node
	listnode<T> wrap = newlist
	node = wrap
}

simple_append_recurse<type T> : simplelist<T> ref thelist, nothing, T value [nogc]
{
	simplelist<T> newlist = value, nothing
	thelist.next = newlist
}

simple_append_recurse<type T> : simplelist<T> ref thelist, simplelist<T> ref tail, T value [nogc]
{
	simple_append_recurse<T>(tail, tail.next, value)
}

simple_append<type T> : simplelist<T> ref thelist, T value [nogc]
{
	simple_append_recurse<T>(thelist, thelist.next, value)
}

append_recurse<type T> : list<T> ref thelist, nothing, T ref value [nogc]
{
	list<T> newlist = value, nothing
	thelist.next = newlist
}

append_recurse<type T> : list<T> ref thelist, list<T> ref tail, T ref value [nogc]
{
	append_recurse<T>(tail, tail.next, value)
}

append<type T> : list<T> ref thelist, T ref value [nogc]
{
	append_recurse<T>(thelist, thelist.next, value)
}

pop<type T> : list<T> ref head, list<T> ref tail [nogc]
{
	head = tail
}


copyfromlist<type T> : list<T> ref thelist, integer count, T ref outvalue -> boolean found = false [nogc]
{
	if(count == 0)
	{
		outvalue = thelist.value
		
		found = true
		return()
	}

	assert(count > 0)
	found = copyfromlist<T>(thelist.next, count - 1, outvalue)
}

copyfromlist<type T> : nothing, integer count, T ref outvalue -> false [nogc]



//
// List traversal/inspection functions
//

countnonzero : simplelist<integer> ref thelist -> integer count = 0 [nogc]
{
	if(thelist.value != 0)
	{
		++count
	}

	count += countnonzero(thelist.next)
}

countnonzero : nothing -> 0 [nogc]



listcontains : simplelist<integer> ref thelist, integer value -> boolean ret = false [nogc]
{
	if(thelist.value == value)
	{
		ret = true
	}
	else
	{
		ret = listcontains(thelist.next, value)
	}
}

listcontains : nothing, integer value -> boolean contains = false [nogc]


