//
// The Epoch Language Project
// Epoch Development Tools - Common Library Modules
//
// TRIE.EPOCH
// Common library implementation of trie data structure
//
// This data structure is designed to store an associative mapping
// from strings to integer values. It is primarily used in the core
// compiler for allocating string handles as the parser operates.
//
// A trie is a tree structure in which each node has an associated
// character. The root node is mapped to the empty string, and each
// path through the tree corresponds to a sequence of characters
// comprising either a partial or a complete key. Nodes (internal
// or leaf) can have an assigned value (string handle in this case)
// which represents the mapping of string onto integer.
//
// Mappings are created by adding nodes for each character in the
// key. They are retrieved by descending through the tree, and
// following the node that corresponds to the current character of
// the key. When the key length is exhausted, the current node has
// the associated value.
//
// Put another way, each ply N of the tree represents the Nth
// character of a potential key in the structure. Each node (if it
// has a value) stores the value of the string ending with that
// associated character.
//


//
// Structure representing a node in a trie
//
// Each node has an associated character value, an associated
// integer handle, and an optional list of child nodes that
// represent subsequent characters in other key strings.
//

structure Trie :
	integer Character,
	listnode<Trie> Children,
	integer Handle


//
// Store a string-integer mapping in a given trie structure
//
// Expected to run in O(n) time in n characters in the key string.
//
// May allocate up to n nodes to store the appropriate data within
// the trie itself.
//
PlaceDataInTrie : Trie ref trie, string data, integer handle
{
	integer datalen = length(data)
	if(datalen == 0)
	{
		trie.Handle = handle
		return()
	}

	PlaceDataInTrieChild(trie.Children, trie, subchar(data, 0), data, 1, datalen, handle)
}

PlaceDataInTrieRecurse : Trie ref trie, string data, integer offset, integer datalen, integer handle
{
	if(datalen == offset)
	{
		trie.Handle = handle
		return()
	}

	PlaceDataInTrieChild(trie.Children, trie, subchar(data, offset), data, offset + 1, datalen, handle)
}

PlaceDataInTrieChild : list<Trie> ref children, Trie ref originaltrie, integer character, string alldata, integer offset, integer datalen, integer handle
{
	if(children.value.Character == character)
	{
		PlaceDataInTrieRecurse(children.value, alldata, offset, datalen, handle)
	}
	else
	{
		PlaceDataInTrieChild(children.next, originaltrie, character, alldata, offset, datalen, handle)
	}
}

PlaceDataInTrieChild : nothing, Trie ref originaltrie, integer character, string alldata, integer offset, integer datalen, integer handle
{
	Trie newtrie = new character, nothing, 0
	PlaceDataInTrieRecurse(newtrie, alldata, offset, datalen, handle)

	list<Trie> newtrielist = new newtrie, originaltrie.Children
	originaltrie.Children = newtrielist
}


//
// Given a string key, retrieve the mapped integer value from a trie.
//
// Expected to run in O(n) time for n characters in the key.
// Must not allocate memory.
//
FindHandleInTrie : Trie ref trie, string data -> integer handle = 0
{
	if(length(data) == 0)
	{
		handle = trie.Handle
		return()
	}

	handle = FindHandleInTrieChildren(trie.Children, subchar(data, 0), data, 1, length(data))
}

FindHandleInTrieChildren : list<Trie> ref triechildren, integer character, string alldata, integer offset, integer datalength -> integer handle = 0
{
	if(triechildren.value.Character == character)
	{
		if(datalength == offset)
		{
			handle = triechildren.value.Handle
			return()
		}

		handle = FindHandleInTrieChildren(triechildren.value.Children, subchar(alldata, offset), alldata, offset + 1, datalength)
		return()
	}

	handle = FindHandleInTrieChildren(triechildren.next, character, alldata, offset, datalength)
}

FindHandleInTrieChildren : nothing, integer character, string alldata, integer offset, integer datalength -> integer handle = 0


