//
// The Epoch Language Project
// Epoch Development Tools - Era Integrated Development Environment
//
// MAINWINDOW.EPOCH
// UI implementation for the main IDE window
//


//
// Window procedure for the main UI window
//
// Receives Win32 messages and dispatches them to the
// appropriate routines for handling.
//
MainWindowProcedure : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0
{
	// TODO - factor this out into multiple functions
	integer WM_NOTIFY = 0x4e
	integer WM_TIMER = 0x113
	integer WM_ACTIVATE = 0x06
	integer WM_MOUSEMOVE = 0x200
	integer WM_LBUTTONUP = 0x202
	integer WM_ERASEBKGND = 0x0014

	if(message == WM_PAINT)
	{
		integer BDR_RAISED = 0x5
		integer BF_RECT = 0xf
		integer BF_TOP = 0x2
		integer EDGE_ETCHED = 0x6
		integer DT_RIGHT = 0x2
		integer TRANSPARENT = 1

		Rect prect = 0, 0, 0, 0
		PaintInfo ps = 0, false, prect, false, false, 0, 0, 0, 0, 0, 0, 0, 0

		integer hdc = BeginPaint(hwnd, ps)
		
		SetBkMode(hdc, TRANSPARENT)

		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		Rect status = client.left, client.bottom - 24, client.right, client.bottom

		FillRect(hdc, status, BrushActiveTab)
		DrawEdge(hdc, status, EDGE_ETCHED, BF_TOP)

		simplelist<integer> newedges = 0, nothing
		TabEdges = newedges
		
		client.top = client.top + 30
		DrawTabList(CurrentTabs, client, client.left + 250 + 3, hdc, 0)

		status.top = status.top + 3
		
		SelectObject(hdc, FontUIDefault)
		
		SetTextColor(hdc, 0)

		integer line = 0
		integer col = 0
		GetScintillaPosition(GetActiveEditorHwnd(), line, col)
		DrawText(hdc, "Line: " ; cast(string, line + 1) ; " Column: " ; cast(string, col + 1) ; " ", -1, status, DT_RIGHT)

		EndPaint(hwnd, ps)

		RefreshWindowBackground = false
	}
	elseif(message == WM_ERASEBKGND)
	{
		if(RefreshWindowBackground)
		{
			ret = DefWindowProc(hwnd, message, wparam, lparam)
		}
		else
		{
			ret = 1
		}
	}
	elseif(message == WM_CLOSE)
	{
		CheckForDirtyTabsAndExit(hwnd)
	}
	elseif(message == WM_DESTROY)
	{
		PostQuitMessage(0)
	}
	elseif(message == WM_SIZE)
	{
		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		
		integer toolbarhwnd = GetDlgItem(hwnd, WNDID_TOOLBAR)
		MoveWindow(toolbarhwnd, client.left, client.top, client.right - client.left, client.top + 30, true)

		client.top = client.top + 30
		Rect editor = client.left + 250 + 3, client.top + 28, client.right, client.bottom - 150 - 24 - 3
		Rect history = client.left, client.bottom - 150 - 24, client.right, client.bottom - 24
		Rect project = client.left, client.top, client.left + 250, client.bottom - 150 - 24 - 3

		integer scintillahwnd = GetActiveEditorHwnd()
		MoveWindow(scintillahwnd, editor.left, editor.top, editor.right - editor.left, editor.bottom - editor.top, true)
		
		integer historyhwnd = GetDlgItem(hwnd, WNDID_STATUS_HISTORY)
		MoveWindow(historyhwnd, history.left, history.top, history.right - history.left, history.bottom - history.top, true)
		
		integer projecthwnd = GetDlgItem(hwnd, WNDID_PROJECT_TREEVIEW)
		MoveWindow(projecthwnd, project.left, project.top, project.right - project.left, project.bottom - project.top, true)

		integer width = client.right - client.left
		SetScintillaScrolling(scintillahwnd, width - 64)

		RefreshWindowBackground = true
		InvalidateRect(hwnd, client, true)
	}
	elseif(message == WM_COMMAND)
	{
		wparam = wparam & 0xffff
		if(wparam == 900)
		{
			CycleTabs()
		}
		elseif(wparam == 901)
		{
			SourceLookupTableInit()
			ParseAllProjectCode(CurrentProject)
		}
		elseif(wparam == 902)
		{
			integer scintillahwnd = GetActiveEditorHwnd()
			string currenttoken = ScintillaGetSelectedToken(scintillahwnd)
			
			if(length(currenttoken) > 0)
			{
				SourceLookupTableFindSymbol(currenttoken)
			}
		}
		elseif(wparam == 1001)
		{
			CreateEditorTab(hwnd, "")
		}
		elseif(wparam == 1002)
		{
			integer customfilterbuffersize = 256
			buffer customfilterbuffer = customfilterbuffersize

			integer filebuffersize = 2048
			buffer filebuffer = filebuffersize

			integer filetitlebuffersize = 2048
			buffer filetitlebuffer = filetitlebuffersize

			integer16 word = 0

			OpenFileNameStruct ofn = sizeof(ofn), hwnd, GetModuleHandle(0), FileTypeFilters,
						 customfilterbuffer, customfilterbuffersize, 1, filebuffer, filebuffersize,
						 filetitlebuffer, filetitlebuffersize, "", "Open File", 0, word, word, "", 0, 0, ""

			integer ofnret = GetOpenFileName(ofn)
			if(ofnret != 0)
			{
				CreateEditorTab(hwnd, cast(string, ofn.file))
			}
		}
		elseif(wparam == 1003)
		{
			integer scintillahwnd = GetActiveEditorHwnd()
			SaveDocument(hwnd, scintillahwnd)
		}
		elseif(wparam == 1004)
		{
			integer scintillahwnd = GetActiveEditorHwnd()
			SaveDocumentAs(hwnd, scintillahwnd)
		}
		elseif(wparam == 1005)
		{
			CheckForDirtyTabsAndExit(hwnd)
		}
		elseif(wparam == 2001)
		{
			integer findwnd = GetDlgItem(GetDlgItem(hwnd, WNDID_TOOLBAR), TOOLID_FIND_EDIT)
			SetWindowText(findwnd, "")
			SetFocus(findwnd)
		}
		elseif(wparam == 2002)
		{
			integer findwnd = GetDlgItem(GetDlgItem(hwnd, WNDID_TOOLBAR), TOOLID_FIND_EDIT)
			buffer needlebuffer = 512
			GetWindowText(findwnd, needlebuffer, 511)
			ScintillaFind(GetActiveEditorHwnd(), cast(string, needlebuffer))
		}
		elseif(wparam == 2003)
		{
			integer findwnd = GetDlgItem(GetDlgItem(hwnd, WNDID_TOOLBAR), TOOLID_FIND_EDIT)
			buffer needlebuffer = 512
			GetWindowText(findwnd, needlebuffer, 511)
			ScintillaFindReverse(GetActiveEditorHwnd(), cast(string, needlebuffer))
		}
		elseif(wparam == 3001)
		{
			MessageBox(hwnd, "Era is the prototype Integrated Development Environment for the Epoch programming language.", "About Era", 64)
		}
		elseif(wparam == 4001)
		{
			// TODO - dialog for adding existing file to project
		}
		elseif(wparam == 4002)
		{
			integer editorwnd = CreateEditorTab(hwnd, "")
			string filename = SaveDocumentAs(hwnd, editorwnd)
			
			filename = MakePathRelative(filename, TrimFileName(CurrentProject.ProjectFileName))
			
			TreeViewAddItem(GetDlgItem(hwnd, WNDID_PROJECT_TREEVIEW), ProjectTreeViewNodeSourceRoot, TrimFilePath(filename), PROJECT_TV_NODETYPE_SOURCECODE)
			simple_append<string>(CurrentProject.SourceFiles, filename)
		}
		elseif(wparam == 4003)
		{
			// TODO - wire up SaveProject on File menu
			ProjectSaveToDisk(CurrentProject)
		}
		elseif(wparam == 4004)
		{
			ClearHistory()
			BuildProject(CurrentProject)
		}
	}
	elseif(message == WM_NOTIFY)
	{
		NotifyMessageHeader nmhdr = 0, 0, 0
		marshalstructure(nmhdr, lparam)
		
		if(nmhdr.childid == GetActiveEditorChildCode())
		{
			integer SCN_UPDATEUI = 2007
			integer SCN_CHARADDED = 2001

			if(nmhdr.code == SCN_MARGINCLICK)
			{
				ScintillaNotification scn = 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
				marshalstructure(scn, lparam)

				if(scn.margin == 1)
				{
					integer scintillawnd = GetActiveEditorHwnd()
					integer linenumber = SendMessage(scintillawnd, SCI_LINEFROMPOSITION, scn.position, 0)
					SendMessage(scintillawnd, SCI_TOGGLEFOLD, linenumber, 0)
				}
			}
			elseif(nmhdr.code == SCN_UPDATEUI)
			{
				Rect client = 0, 0, 0, 0
				GetClientRect(hwnd, client)
				Rect status = client.left, client.bottom - 24, client.right, client.bottom

				InvalidateRect(hwnd, status, false)
			}
			elseif(nmhdr.code == SCN_CHARADDED)
			{
				ScintillaNotification scn = 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
				marshalstructure(scn, lparam)

				if(scn.ch == 10)		// Linefeed
				{
					PerformAutoIndent(GetActiveEditorHwnd())
				}
				elseif(scn.ch == 0x7d)		// Right curly brace
				{
					PerformAutoUnindent(GetActiveEditorHwnd())
				}
			}
		}
		elseif(nmhdr.childid == WNDID_PROJECT_TREEVIEW)
		{
			integer NM_DBLCLK = 0xfffffffd
			
			if(nmhdr.code == NM_DBLCLK)
			{
				integer TVGN_CARET = 0x09
				integer TVM_GETNEXTITEM = 0x110a
				integer itemhandle = SendMessage(GetDlgItem(hwnd, WNDID_PROJECT_TREEVIEW), TVM_GETNEXTITEM, TVGN_CARET, 0)
				
				if(itemhandle != 0)
				{
					integer TVIF_HANDLE = 0x10
					integer TVIF_TEXT = 0x01
					integer TVM_GETITEM = 0x1100 + 62
					
					buffer holderbuffer = 256
					TreeViewItemBuffer item = TVIF_HANDLE + TVIF_TEXT, itemhandle, 0, 0, holderbuffer, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0
					SendMessage(GetDlgItem(hwnd, WNDID_PROJECT_TREEVIEW), TVM_GETITEM, 0, item)

					if(item.lparam == PROJECT_TV_NODETYPE_SOURCECODE)
					{
						integer tabindex = FindTabWithDocument(CurrentTabs, cast(string, item.text))
						if(tabindex < 0)
						{
							CreateEditorTab(hwnd, cast(string, item.text))
						}
						else
						{
							SetActiveTab(tabindex)
						}
					}
					elseif(item.lparam == PROJECT_TV_NODETYPE_RESOURCE)
					{
						// TODO - pop up resource editor
					}
					elseif(item.lparam == PROJECT_TV_NODETYPE_OPTIONS)
					{
						integer tabindex = FindTabWithOptions(CurrentTabs)
						if(tabindex < 0)
						{
							CreateOptionsTab(hwnd)
						}
						else
						{
							SetActiveTab(tabindex)
						}
					}
				}
			}
		}
	}
	elseif(message == WM_TIMER)
	{
		integer scintillahwnd = GetActiveEditorHwnd()
		//integer doclength = SendMessage(scintillahwnd, SCI_GETLENGTH, 0, 0) + 1
		//buffer output = doclength
		//SendMessage(scintillahwnd, SCI_GETTEXT, doclength, output)

		//ParseCallbacks callbacks = ParseOK, ParseStructure
		//ParseSource(output, callbacks)
		ScintillaColorize(scintillahwnd)
	}
	elseif(message == WM_ACTIVATE)
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
		SetFocus(GetActiveEditorHwnd())
	}
	elseif(message == WM_MOUSEMOVE)
	{
		integer prevhighlighttab = HighlightTabIndex
		
		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		Rect tabbar = client.left + 250 + 3, client.top + 30, client.right, client.top + 28 + 30

		integer xcoord = lparam & 0xffff
		integer ycoord = (lparam & 0xffff0000) / 0x10000
		
		if(ycoord < tabbar.top)
		{
			HighlightTabIndex = -1
		}
		elseif(ycoord > tabbar.bottom)
		{
			HighlightTabIndex = -1
		}
		elseif(xcoord < tabbar.left)
		{
			HighlightTabIndex = -1
		}
		elseif(xcoord > tabbar.right)
		{
			HighlightTabIndex = -1
		}
		else
		{
			HighlightTabIndex = TestForMouseOverTab(TabEdges, xcoord)
		}

		if(prevhighlighttab != HighlightTabIndex)
		{
			InvalidateRect(hwnd, tabbar, false)
		}
		
		if(HighlightTabIndex < 0)
		{
			ReleaseCapture()
		}
		else
		{
			SetCapture(hwnd)
		}
	}
	elseif(message == WM_LBUTTONUP)
	{
		integer xcoord = lparam & 0xffff
		integer newtabindex = TestForMouseOverTab(TabEdges, xcoord)
		if(!(newtabindex < 0))
		{
			if(TestForMouseOverTabClose(TabEdges, xcoord))
			{
				CloseTab(newtabindex)
								
				Rect client = 0, 0, 0, 0
				GetClientRect(hwnd, client)
				RefreshWindowBackground = true
				InvalidateRect(hwnd, client, true)
			}
			else
			{
				SetActiveTab(newtabindex)
			}
		}
	}
	elseif(message == WM_CTLCOLOREDIT)
	{
		SetTextColor(wparam, 0xb0b0b0)
		SetBkColor(wparam, 0x202020)
		ret = BrushDarkBackground
	}
	elseif(message == WM_CTLCOLORSTATIC)
	{
		SetTextColor(wparam, 0xb0b0b0)
		SetBkColor(wparam, 0x202020)
		ret = BrushDarkBackground
	}
	else
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
	}
}

//
// Window procedure for the toolbar strip at the top of the UI
//
ToolbarWindowProcedure : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0
{
	if(message == WM_SIZE)
	{
		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		
		MoveWindow(GetDlgItem(hwnd, TOOLID_FIND_BUTTON), client.right - 30 - 3, client.top + 3, 30, client.bottom - client.top - 6, true)
		MoveWindow(GetDlgItem(hwnd, TOOLID_FIND_EDIT), client.right - 30 - 2 - 300 - 3, client.top + 3, 300, client.bottom - client.top - 6, true)
	}
	elseif(message == WM_COMMAND)
	{
		wparam = wparam & 0xffff
		if(wparam == TOOLID_FIND_BUTTON)
		{
			buffer needlebuffer = 512
			GetWindowText(GetDlgItem(hwnd, TOOLID_FIND_EDIT), needlebuffer, 511)
			
			ScintillaFind(GetActiveEditorHwnd(), cast(string, needlebuffer))
		}
	}
	elseif(message == WM_CTLCOLOREDIT)
	{
		SetTextColor(wparam, 0xb0b0b0)
		SetBkColor(wparam, 0x202020)
		ret = BrushDarkBackground
	}
	elseif(message == WM_CTLCOLORSTATIC)
	{
		SetTextColor(wparam, 0xb0b0b0)
		SetBkColor(wparam, 0x202020)
		ret = BrushDarkBackground
	}
	elseif(message == WM_CTLCOLORBTN)
	{
		ret = BrushBackground
	}
	else
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
	}
}



//
// Subclassed window procedure for the "search" box on the toolbar
//
// This basically exists so we can consume the Enter key when it is
// pressed in the Search box, and redirect it to cause an actual search
// to be initiated in the editor window.
//
FindBoxSubclassProc : integer hwnd, integer message, integer wparam, integer lparam, integer id, integer refdata -> integer result = 0
{
	integer WM_CHAR = 0x102
	integer VK_RETURN = 0xd
	
	if((message == WM_CHAR) && (wparam == VK_RETURN))
	{
		SendMessage(GetParent(GetParent(hwnd)), WM_COMMAND, 2002, 0)
		result = 0
	}
	else
	{
		result = DefSubclassProc(hwnd, message, wparam, lparam)
	}
}


ParseAllProjectCode : EpochProject ref project
{
	AppendHistoryLine("Parsing project...")
	ParseAllCodeFiles(project.SourceFiles)
	AppendHistoryLine("Parsing complete.")
}

ParseAllCodeFiles : simplelist<string> ref filelist
{
	if(filelist.value != "")
	{
		integer len = 0
		string contents = ReadFile(filelist.value, len)
		
		Parse(filelist.value, contents, len, AppendHistoryLine)
	}
	
	ParseAllCodeFiles(filelist.next)
}

ParseAllCodeFiles : nothing

