//
// The Epoch Language Project
// Epoch Development Tools - Era Integrated Development Environment
//
// MULTISAVEDIALOG.EPOCH
// Multiple document save prompt
//
// When multiple documents are eligible to be saved, this
// dialog is used to prompt the user to select which ones
// to save and which to discard. The most common use case
// for this dialog is exiting the IDE.
//


PromptToSaveAndExit : integer hwnd, list<OpenTab> ref dirtytabs -> boolean ret = false
{
	integer LB_SETSEL = 0x185
	
	WindowClass wc = sizeof(wc), 0, SavePromptWindowProcedure, 0, 0, GetHInstance(), 0, LoadCursor(0, IDC_ARROW), BrushBackground, "", "EraSavePromptClass", 0
	RegisterClassEx(wc)

	Rect adjusted = 0, 0, 420, 390
	AdjustWindowRect(adjusted, 0x02c80000, false)
	
	Rect parentrect = 0, 0, 0, 0
	GetWindowRect(hwnd, parentrect)
	
	integer centeredx = ((parentrect.right - parentrect.left) - (adjusted.right - adjusted.left)) / 2
	integer centeredy = ((parentrect.bottom - parentrect.top) - (adjusted.bottom - adjusted.top)) / 2
	
	integer dialoghwnd = CreateWindowEx(0, "EraSavePromptClass", "ERA - Epoch Development Environment", 0x02c80000, centeredx, centeredy, adjusted.right - adjusted.left, adjusted.bottom - adjusted.top, hwnd, 0, GetHInstance(), 0)

	EnableWindow(hwnd, false)
	
	ShowWindow(dialoghwnd, SW_SHOW)

	integer listhwnd = CreateWindowEx(0, "LISTBOX", "", 0x50800008, 10, 50, 400, 300, dialoghwnd, 0, GetHInstance(), 0)
	SendMessage(listhwnd, WM_SETFONT, FontUIDefault, 0)
	
	PopulateListWithTabTitles(listhwnd, dirtytabs)
	
	SendMessage(listhwnd, LB_SETSEL, 1, -1)
	
	
	integer savebuttonhwnd = CreateWindowEx(0, "BUTTON", "&Save Selected", 0x50800000, 10, 350, 150, 30, dialoghwnd, 1001, GetHInstance(), 0)
	integer discardbuttonhwnd = CreateWindowEx(0, "BUTTON", "&Discard All", 0x50800000, 170, 350, 150, 30, dialoghwnd, 1002, GetHInstance(), 0)
	integer cancelbuttonhwnd = CreateWindowEx(0, "BUTTON", "Cancel", 0x50800000, 330, 350, 80, 30, dialoghwnd, 2, GetHInstance(), 0)
	
	SendMessage(savebuttonhwnd, WM_SETFONT, FontUIDefault, 0)
	SendMessage(discardbuttonhwnd, WM_SETFONT, FontUIDefault, 0)
	SendMessage(cancelbuttonhwnd, WM_SETFONT, FontUIDefault, 0)
	
	boolean active = true
	while(active)
	{
		WaitMessage()
		active = ModalDialogPump(dialoghwnd)
	}
	
	EnableWindow(hwnd, true)
	BringWindowToTop(hwnd)
}


SavePromptWindowProcedure : integer hwnd, integer message, integer wparam, integer lparam -> integer result = 0
{
	if(message == WM_CLOSE)
	{
		EnableWindow(GetParent(hwnd), true)
		DestroyWindow(hwnd)
	}
	elseif(message == WM_DESTROY)
	{
		// No specific handling needed
	}
	elseif(message == WM_PAINT)
	{
		integer TRANSPARENT = 1

		Rect prect = 0, 0, 0, 0
		PaintInfo ps = 0, false, prect, false, false, 0, 0, 0, 0, 0, 0, 0, 0

		integer hdc = BeginPaint(hwnd, ps)
		
		SetBkMode(hdc, TRANSPARENT)
		SelectObject(hdc, FontUIDefault)

		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		client.top = client.top + 3
		client.left = client.left + 10
		DrawText(hdc, unescape("The following documents have unsaved changes.\r\nSelect which (if any) to save before proceeding."), -1, client, 0)

		EndPaint(hwnd, ps)		
	}
	elseif(message == WM_COMMAND)
	{
		wparam = wparam & 0xffff
		if(wparam == 1001)
		{
			// TODO - save all tabs that are dirty and then kill the app
		}
		elseif(wparam == 1002)
		{
			DestroyTabs(CurrentTabs)
			
			list<OpenTab> newtablist = OpenTab(TAB_TYPE_SENTINEL, 0, "", ""), nothing
			CurrentTabs = newtablist

			DestroyWindow(hwnd)
			PostQuitMessage(0)
		}
		elseif(wparam == 2)
		{
			DestroyWindow(hwnd)
		}
	}
	elseif(message == WM_KEYDOWN)
	{
		if(wparam == 0x1b)		// Esc
		{
			DestroyWindow(hwnd)
		}
		else
		{
			result = DefWindowProc(hwnd, message, wparam, lparam)
		}
	}
	else
	{
		result = DefWindowProc(hwnd, message, wparam, lparam)
	}
}


PopulateListWithTabTitles : integer listhwnd, list<OpenTab> ref dirtytabs
{
	integer LB_ADDSTRING = 0x180
	integer LB_SETITEMDATA = 0x19a
	
	if(dirtytabs.value.TabTitle != "")
	{
		integer index = SendMessage(listhwnd, LB_ADDSTRING, 0, dirtytabs.value.TabTitle)
		SendMessage(listhwnd, LB_SETITEMDATA, index, dirtytabs.value.ContentsHWND)
	}
	
	PopulateListWithTabTitles(listhwnd, dirtytabs.next)
}

PopulateListWithTabTitles : integer listhwnd, nothing


