


StoreVariableInSingleScope : Scope ref scope, integer varname, integer vartype, boolean isref, integer origin
{
	integer size = 4		// TODO - actual variable sizes

	if((vartype & 0x7f000000) == 0x07000000)		// Sum type family signature
	{
		size = 8
	}
	elseif(vartype == 0x01000003)
	{
		size = 1
	}

	integer offset = -1
	if(origin == 1)			// VARIABLE_ORIGIN_PARAMETER
	{
		if(isref)
		{
			size = 8
		}

		offset = scope.ParamOffset
		scope.ParamOffset = scope.ParamOffset + size
	}
	else
	{
		offset = scope.LocalOffset
		scope.LocalOffset = scope.LocalOffset + size
	}

	Variable var = varname, vartype, origin, offset
	append<Variable>(scope.Variables, var)
}


CountScopeVariables : Scope ref scope -> integer count = 0 [nogc]
{
	CountScopeVariables(scope.Variables, count)
}

CountScopeVariables : list<Variable> ref variables, integer ref count [nogc]
{
	if(variables.value.Name != 0)
	{
		++count
	}

	CountScopeVariables(variables.next, count)
}

CountScopeVariables : nothing, integer ref count [nogc]


FindVariable : integer name, integer ref frames -> integer index = 0
{
	FindVariableInSingleScope(EmittingScope.Wrapped, name, index)

	if(index < 0)
	{
		index = 0
		FindVariableInSingleScope(GlobalScope.Wrapped, name, index)
		frames = -1
	}
}


FindVariableInSingleScope : Scope ref scope, integer varname, integer ref index
{
	FindVariableInSingleScope(scope.Variables, varname, index)
}

FindVariableInSingleScope : list<Variable> ref vars, integer varname, integer ref index
{
	if(vars.value.Name != varname)
	{
		if(vars.value.Name != 0)
		{
			++index
		}

		FindVariableInSingleScope(vars.next, varname, index)
	}
}

FindVariableInSingleScope : nothing, integer varname, integer ref index
{
	index = -1
}


FindReturnVariableIndex : -> integer index = 0
{
	FindReturnVariableInSingleScope(EmittingScope.Wrapped, index)
}

FindReturnVariableName: -> integer name = 0
{
	FindReturnVariableNameInSingleScope(EmittingScope.Wrapped, name)
}

FindReturnVariableInSingleScope : Scope ref scope, integer ref index
{
	FindReturnVariableInSingleScope(scope.Variables, index)
}

FindReturnVariableInSingleScope : list<Variable> ref vars, integer ref index
{
	if(vars.value.Origin != 2)		// VARIABLE_ORIGIN_RETURN
	{
		if(vars.value.Name != 0)
		{
			++index
		}

		FindReturnVariableInSingleScope(vars.next, index)
	}
}

FindReturnVariableInSingleScope : nothing, integer ref index
{
	index = -1
}

FindReturnVariableNameInSingleScope : Scope ref scope, integer ref name
{
	FindReturnVariableNameInSingleScope(scope.Variables, name)
}

FindReturnVariableNameInSingleScope : list<Variable> ref vars, integer ref name
{
	if(vars.value.Origin == 2)		// VARIABLE_ORIGIN_RETURN
	{
		name = vars.value.Name
	}
	else
	{
		FindReturnVariableNameInSingleScope(vars.next, name)
	}
}

FindReturnVariableNameInSingleScope : nothing, integer ref name
{
	name = 0
}



FindVariableType : integer varname -> integer rettype = 0
{
	rettype = GetVariableTypeFromScope(EmittingScope.Wrapped, varname)
	if(rettype == 0)
	{
		rettype = GetVariableTypeFromScope(GlobalScope.Wrapped, varname)
	}
}

FindVariableDataInSingleScope : Scope ref scope, integer varname, Variable ref outvar -> boolean found = false [nogc]
{
	found = FindVariableDataInSingleScope(scope.Variables, varname, outvar)
	if(!found)
	{
		if(scope.Name != GlobalCodeBlockName)
		{
			found = FindVariableDataInSingleScope(GlobalScope.Wrapped, varname, outvar)
		}
	}
}

FindVariableDataInSingleScope : list<Variable> ref vars, integer varname, Variable ref outvar -> boolean found = false [nogc]
{
	if(vars.value.Name == varname)
	{
		outvar = vars.value
		found = true
		return()
	}

	found = FindVariableDataInSingleScope(vars.next, varname, outvar)
}

FindVariableDataInSingleScope : nothing, integer varname, Variable ref outvar -> boolean found = false [nogc]


GetVariableTypeFromScope : Scope ref scope, integer varname -> integer vartype = 0 [nogc]
{
	vartype = GetVariableTypeFromScope(scope.Variables, varname)
	if(vartype == 0)
	{
		if(scope.Name != GlobalCodeBlockName)
		{
			vartype = GetVariableTypeFromScope(GlobalScope.Wrapped, varname)
		}
	}
}

GetVariableTypeFromScope : list<Variable> ref vars, integer varname -> integer vartype = 0 [nogc]
{
	if(vars.value.Name == varname)
	{
		vartype = vars.value.VarType
	}
	else
	{
		vartype = GetVariableTypeFromScope(vars.next, varname)
	}
}

GetVariableTypeFromScope : nothing, integer varname -> 0 [nogc]




ConstructVariableFromStatement : Statement ref statement, Scope ref scope, integer vartype, integer origin
{
	integer varname = ExtractConstructorIdentifier(statement.Parameters)

	if(varname != 0)
	{
		// TODO - do real shadowing checks here
		Variable var = 0, 0, 0, 0
		FindVariableDataInSingleScope(scope, varname, var)
		if(var.Name != 0)
		{
			return()
		}

		StoreVariableInSingleScope(scope, varname, vartype, false, origin)
	}
}



CacheGlobalCodeBlock : [nogc]
{
	ContextNode<Scope> wrap = nothing
	boolean success = SearchBinaryTreeForPayload<Scope>(GlobalRootNamespace.Scopes.RootNode, GlobalCodeBlockName, wrap)
	
	assertmsg(success, "Failed to cache global code block; internal error.")

	GlobalScope.Wrapped = wrap
}

