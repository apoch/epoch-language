


StoreVariableInSingleScope : Scope ref scope, integer varname, integer vartype, boolean isref, integer origin
{
	Variable var = varname, vartype, origin, 0
	append<Variable>(scope.Variables, var)
}


FindReturnVariableNameInSingleScope : Scope ref scope, integer ref name
{
	FindReturnVariableNameInSingleScope(scope.Variables, name)
}

FindReturnVariableNameInSingleScope : list<Variable> ref vars, integer ref name
{
	if(vars.value.Origin == 2)		// VARIABLE_ORIGIN_RETURN
	{
		name = vars.value.Name
	}
	else
	{
		FindReturnVariableNameInSingleScope(vars.next, name)
	}
}

FindReturnVariableNameInSingleScope : nothing, integer ref name
{
	name = 0
}



FindVariableType : integer varname -> integer rettype = 0
{
	rettype = GetVariableTypeFromScope(EmittingScope.Wrapped, varname)
	if(rettype == 0)
	{
		rettype = GetVariableTypeFromScope(GlobalScope.Wrapped, varname)
	}
}

FindVariableDataInSingleScope : Scope ref scope, integer varname, Variable ref outvar -> boolean found = false
{
	found = FindVariableDataInSingleScope(scope.Variables, varname, outvar)
	if(!found)
	{
		if(scope.Name != GlobalCodeBlockName)
		{
			found = FindVariableDataInSingleScope(GlobalScope.Wrapped, varname, outvar)
		}
	}
}

FindVariableDataInSingleScope : list<Variable> ref vars, integer varname, Variable ref outvar -> boolean found = false
{
	if(vars.value.Name == varname)
	{
		outvar = vars.value
		found = true
		return()
	}

	found = FindVariableDataInSingleScope(vars.next, varname, outvar)
}

FindVariableDataInSingleScope : nothing, integer varname, Variable ref outvar -> boolean found = false


GetVariableTypeFromScope : Scope ref scope, integer varname -> integer vartype = 0
{
	vartype = GetVariableTypeFromScope(scope.Variables, varname)
	if(vartype == 0)
	{
		if(scope.Name != GlobalCodeBlockName)
		{
			vartype = GetVariableTypeFromScope(GlobalScope.Wrapped, varname)
		}
	}
}

GetVariableTypeFromScope : list<Variable> ref vars, integer varname -> integer vartype = 0
{
	if(vars.value.Name == varname)
	{
		vartype = vars.value.VarType
	}
	else
	{
		vartype = GetVariableTypeFromScope(vars.next, varname)
	}
}

GetVariableTypeFromScope : nothing, integer varname -> 0




ConstructVariableFromStatement : Statement ref statement, Scope ref scope, integer vartype, integer origin
{
	integer varname = ExtractConstructorIdentifier(statement.Parameters)

	if(varname != 0)
	{
		// TODO - do real shadowing checks here
		Variable var = 0, 0, 0, 0
		FindVariableDataInSingleScope(scope, varname, var)
		if(var.Name != 0)
		{
			return()
		}

		StoreVariableInSingleScope(scope, varname, vartype, false, origin)
	}
}



CacheGlobalCodeBlock :
{
	ContextNode<Scope> wrap = nothing
	boolean success = SearchBinaryTreeForPayload<Scope>(GlobalRootNamespace.Scopes.RootNode, GlobalCodeBlockName, wrap)
	
	assertmsg(success, "Failed to cache global code block; internal error.")

	GlobalScope.Wrapped = wrap
}

