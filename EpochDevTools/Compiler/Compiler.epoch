//
// The Epoch Language Project
// Epoch Development Tools - Compiler Core
//
// COMPILER.EPOCH
// Entry point and command line parsing logic
//


//
// External helpers, linked from the Epoch runtime
//

ExecuteByteCodeBuffer : buffer ref code, integer len [external("EpochRuntime.dll", "ExecuteByteCodeDeferred", "stdcall")]



//
// Compiler entry point
//
entrypoint :
{
	print("Epoch Language Project")
	print("Command line compiler and tools interface")
	print("")
	
	if(!cmdlineisvalid())
	{
		print("Invalid command line provided.")
		return()
	}
	
	if(cmdlinegetcount() < 2)
	{
		print("Please specify the program or project to compile.")
		return()
	}
	
	string files = ""
	string output = ""
	
	integer cmdlineindex = 1
	while(cmdlineindex < cmdlinegetcount())
	{
		string switch = cmdlineget(cmdlineindex)
		
		if(switch == "/files")
		{
			++cmdlineindex
			files = cmdlineget(cmdlineindex)
		}
		elseif(switch == "/output")
		{
			++cmdlineindex
			output = cmdlineget(cmdlineindex)
		}
		
		++cmdlineindex
	}
	
	if(length(files) == 0)
	{
		print("No input files specified; use /files switch")
		ExitProcess(100)
	}
	
	if(length(output) == 0)
	{
		output = "EpochProgram.exe"
	}
	

	PrepareStringTable()
	PrepareThunkTable(GlobalThunkTable)
	InitBuiltInOverloads()


	simplelist<string> sourcefilelist = "", nothing
	simplelist<string> resourcefilelist = "", nothing
	EpochProject project = "", output, sourcefilelist, resourcefilelist, true

	
	print("Compilation arguments:")
	
	string split = files
	while(stringcontains(split, ";"))
	{
		integer i = 0
		while(i < length(split))
		{
			string c = charat(split, i)
			if(c == ";")
			{
				string singlefile = substring(split, 0, i)
				split = substring(split, i + 1)
				
				print(singlefile)
				
				simple_append<string>(sourcefilelist, singlefile)
				
				i = 0
			}
			else
			{
				++i
			}
		}
	}
	
	if(length(split) > 0)
	{
		print(split)
		simple_append<string>(sourcefilelist, split)
	}
	
	print(" --->")
	print(output)
	
	
	integer projectStartMs = timeGetTime()

	print("Parsing source code...")
	integer startMs = timeGetTime()
	boolean parseok = ProjectParseAllCode(project.SourceFiles)
	integer endMs = timeGetTime()
	print("Parsing completed in " ; cast(string, endMs - startMs) ; " milliseconds")
	
	if(!parseok)
	{
		integer projectEndMs = timeGetTime()
		print("Building failed in " ; cast(string, projectEndMs - projectStartMs) ; " milliseconds")
		
		ExitProcess(200)
	}
	

	print("Performing semantic analysis...")
	startMs = timeGetTime()
	boolean irok = IRProcess()
	endMs = timeGetTime()
	print("Semantic analysis completed in " ; cast(string, endMs - startMs) ; " milliseconds")
	
	if(!irok)
	{
		integer projectEndMs = timeGetTime()
		print("Building failed in " ; cast(string, projectEndMs - projectStartMs) ; " milliseconds")
		
		ExitProcess(300)
	}
	
	print("Writing executable file...")
	MakeExe(project)

	integer projectEndMs = timeGetTime()
	print("Building succeeded in " ; cast(string, projectEndMs - projectStartMs) ; " milliseconds")
	ExitProcess(0)
}

//
// Helper for traversing the list of files in a project
// and passing each in turn to the Epoch parser
//
ProjectParseAllCode : simplelist<string> ref files -> boolean success = true
{
	if(files.value != "")
	{
		print(files.value)
		if(!ParseFile(files.value))
		{
			success = false
		}
	}
	
	if(!ProjectParseAllCode(files.next))
	{
		success = false
	}
}

ProjectParseAllCode : nothing -> true


//
// Wrapper for loading and parsing a code file
//
ParseFile : string filename -> boolean success = false
{
	integer len = 0
	string contents = ReadFile(filename, len)

	if(len == 0)
	{
		return()
	}
	
	success = Parse(filename, contents, len, PrintWrapper)
}


//
// Source lookup table stubs
//
// These are just here to keep the parser happy, since it assumes
// someone wants callbacks whenever a symbol is registered during
// the parsing of a program. Right now, the compiler does not use
// this metadata, so these functions do nothing.
//

SourceLookupTableAddStrongAlias : integer id, string name, ParsedToken ref token
SourceLookupTableAddStructure : integer id, string name, ParsedToken ref token
SourceLookupTableAddSumType : integer id, string name, ParsedToken ref token
SourceLookupTableAddWeakAlias : integer id, string name, ParsedToken ref token
SourceLookupTableAddFunction : integer id, string name, ParsedToken ref token


//
// General utility functions
//


//
// print() currently is not wired up for passing to higher-order
// functions, so we use this stupid wrapper instead. Someday the
// compiler should be updated to allow print() to be passed like
// any other function.
//
PrintWrapper : string line
{
	print(line)
}


//
// Change the working directory to the path in which the given
// file resides, if a path is provided. Otherwise do nothing.
//
ChangeToPath : string filename
{
	if(!stringcontains(filename, "\"))
	{
		return()
	}
	
	integer pos = length(filename) - 1
	while(charat(filename, pos) != "\")
	{
		--pos
	}
	
	string path = substring(filename, 0, pos)
	SetCurrentDirectory(path)
}


