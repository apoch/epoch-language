//
// Data structures for holding the internal representation of a compiled program
//


structure integer64 : integer dummy			// TODO - terrible hack, redo this once we get to self-hosting again

structure ParsedToken :
	string Token,
	string FileName,
	integer Row,
	integer Column

structure TypeAlias :
	integer TypeID,
	integer AliasNameHandle,
	integer BaseNameHandle

structure StructureMemberVariable :
	integer Name,
	integer Type,
	integer TypeNameHandle,
	OptionalTemplateArgs TemplateArgs

structure StructureMemberFunctionRef :
	integer Name,
	FunctionSignature ref Signature


type StructureMember : StructureMemberVariable | StructureMemberFunctionRef

structure StructureDefinition :
	integer Name,
	integer Type,
	integer ConstructorName,
	integer AnonConstructorName,
	integer CopyConstructorName,
	list<StructureMember> ref Members,
	integer MemberCount,
	string ReadableName,
	boolean IsTemplate


structure IdentifierAtom :
	integer Handle,
	integer Type,
	boolean IsReference,
	boolean IsFunction

structure StringHandleAtom :
	integer Handle

structure OperatorInvokeAtom :
	integer OperatorName

structure TypeAnnotationAtom :
	integer Type

structure RefBinding :
	integer Identifier,
	integer StructureName,
	boolean IsReference,
	boolean InputIsReference

structure CompoundAtom :
	list<RefBinding> ref Bindings,
	integer Type

structure AtomSentinel :
	integer dummy

structure ArrayIndexAtom :
	integer ArrayVarName,
	Expression IndexExpression,
	integer Type

type ExpressionAtom : 	integer | integer16 | integer64 | boolean | real | StringHandleAtom |
			IdentifierAtom | OperatorInvokeAtom | TypeAnnotationAtom | RefBinding |
			CompoundAtom |
			Statement |
			ParentheticalExpression |
			ArrayIndexAtom |
			AtomSentinel


structure Expression :
	list<ExpressionAtom> ref Atoms,
	integer Type

type OptionalExpression : Expression | nothing

structure ExpressionList :
	list<Expression> ref Expressions

type OptionalExpressionList : ExpressionList | nothing


type OptionalTemplateArgs : TemplateArgumentList | nothing

type ExpressionOrAssignment : Expression | Assignment | AssignmentCompound | AssignmentArrayIndex

structure Statement :
	integer Name,
	OptionalExpressionList Parameters,
	integer Type,
	OptionalTemplateArgs TemplateArgs,
	boolean TopLevel,
	boolean InferenceDone,
	integer ArrayArity

structure MessageSend :
	integer TargetName,
	integer MessageName,
	OptionalExpressionList Parameters,
	integer Type,
	OptionalTemplateArgs TemplateArgs,
	boolean InferenceDone

structure Assignment :
	integer Operator,
	integer LHSName,
	integer LHSType,
	integer Annotation,
	ExpressionOrAssignment RHS

structure AssignmentCompound :
	integer Operator,
	simplelist<integer> LHS,			// TODO - JIT bug - making this a reference type causes bogosity
	integer LHSType,
	integer Annotation,
	ExpressionOrAssignment RHS

structure AssignmentArrayIndex :
	integer Operator,
	integer LHSName,
	integer LHSType,
	integer Annotation,
	ExpressionOrAssignment RHS,
	Expression IndexExpression


structure PreOpStatement :
	integer Operator,
	simplelist<integer> ref Operand,
	integer Type

structure PostOpStatement :
	integer Operator,
	simplelist<integer> ref Operand,
	integer Type

type ExpressionOrPrePostOp : Expression | PreOpStatement | PostOpStatement


structure ParentheticalExpression :
	ExpressionOrPrePostOp Inner


type CodeBlockEntry : Statement | MessageSend | PreOpStatement | PostOpStatement |
		      Assignment | AssignmentCompound | AssignmentArrayIndex | EntityChain

structure CodeBlock :
	list<CodeBlockEntry> ref Entries

type OptionalCodeBlock : CodeBlock | nothing

structure Entity :
	integer Tag,
	integer PostfixTag,
	OptionalExpression Param,
	OptionalCodeBlock Code


structure EntityList :
	list<Entity> ref ActualList

type OptionalEntityList : EntityList | nothing


structure EntityChain :
	OptionalEntityList Entries


structure UnresolvedParameter :
	integer NameHandle,
	integer TypeNameHandle,
	integer ResolvedType,
	boolean HasRefTag,
	OptionalExpression PatternMatchValue,
	OptionalTemplateArgs TemplateArgs

structure FunctionParams :
	list<UnresolvedParameter> ref Params

type OptionalParameters : FunctionParams | nothing

structure Overload :
	integer NormalName,
	integer MangledName,
	ContextNode<FunctionDefinition> Implementation

structure FunctionDefinition :
	integer RawName,
	integer Name,
	OptionalExpression Return,
	OptionalCodeBlock Code,
	OptionalParameters Params,
	list<Overload> Overloads,
	ContextWrapper<Scope> AttachedScope,
	string RawNameString,
	integer InvokeTag,
	boolean InferenceDone,
	boolean IsTemplate,
	boolean AnonymousReturn



structure Variable :
	integer Name,
	integer VarType,
	integer Origin,
	integer Offset

structure Scope :
	integer Name,
	integer ParentName,
	list<Variable> ref Variables,
	integer ParamOffset,
	integer LocalOffset


structure Parameter :
	integer Name,
	integer Type


structure ContextStackEntry :
	integer EntryType,
	integer EntryName


structure ArrayType :
	integer SignatureType,
	integer ElementType,
	integer Arity

structure SumTypeBase :
	integer Name,
	OptionalTemplateArgs TemplateArgs

structure SumType :
	integer Name,
	integer Type,
	list<SumTypeBase> ref Bases,
	boolean IsTemplate


structure FunctionSignature :
	integer Name,
	list<Parameter> ref Parameters,
	integer ReturnTypeName,
	boolean InferenceDone

structure PendingTypeMatcher :
	integer OverloadName,
	integer MatcherName,
	ContextNode<FunctionDefinition> OverloadImplementation

structure PendingPatternMatcher :
	integer RawName,
	integer OverloadName,
	integer MatcherName

structure TypeMatcher :
	integer Name,
	list<FunctionSignature> ref Overloads


structure FunctionTag :
	integer FunctionName,
	string TagName,
	list<string> ref Parameters


structure TemplateParameter :
	integer ParamName,
	integer ParamType

structure TemplateArgument :
	integer ReplaceWith,
	string ReplaceWithString

structure TemplateArgumentList :
	list<TemplateArgument> ref Args

structure TemplateFunction :
	integer FunctionDefName,
	list<TemplateParameter> ref Parameters

structure TemplateStructure :
	integer StructureDefName,
	list<TemplateParameter> ref Parameters

structure TemplateSumType :
	integer SumTypeName,
	list<TemplateParameter> ref Parameters

structure TemplateInstance :
	integer DefName,
	integer InstanceName,
	list<TemplateArgument> ref Arguments


structure ParameterTypeList :
	simplelist<integer> ref Types


type ContextNode<type T> : T | nothing

structure ContextWrapper<type T> :
	ContextNode<T> ref Wrapped



structure Namespace :
	integer								NameHandle,
	listnode<Namespace>					Children,
	BinaryTreeRoot<Scope>				Scopes,
	BinaryTreeRoot<SumType>				SumTypes,
	BinaryTreeRoot<TypeAlias>			TypeAliases,
	BinaryTreeRoot<TypeAlias>			TypeWeakAliases,
	BinaryTreeRoot<StructureDefinition>	Structures,
	BinaryTreeRoot<FunctionSignature>	FunctionSignatures,
	listnode<FunctionTag>				FunctionTags,
	BinaryTreeRoot<FunctionDefinition> 	Functions,
	BinaryTreeRoot<Overload> 			Overloads,
	BinaryTreeRoot<TypeMatcher>			TypeMatchers,
	BinaryTreeRoot<TemplateFunction>	TemplateFunctions,
	BinaryTreeRoot<TemplateStructure>	TemplateStructures,
	BinaryTreeRoot<TemplateSumType>		TemplateSumTypes,
	BinaryTreeRoot<TemplateInstance>	TemplateFunctionInstances,
	BinaryTreeRoot<TemplateInstance>	TemplateStructureInstances,
	BinaryTreeRoot<TemplateInstance>	TemplateSumTypeInstancess



IREnterFunction : integer namehandle
{
	OnCodeGenRegisterScope(namehandle, 0, true)
}

IRExitFunction :
{
	OnCodeGenExitContext()
}


IREnterStatement : string funcname, boolean istoplevel, boolean hastemplateargs, integer arrayarity
{
	integer namehandle = PoolString(funcname)
	OnCodeGenEnterStatement(namehandle, 0, istoplevel, hastemplateargs, arrayarity)
}

IRExitStatement :
{
	OnCodeGenExitContext()
}


IREnterMessageSend : integer targetname, integer messagename
{
	OnCodeGenEnterMessageSend(targetname, messagename)
}

IRExitMessageSend :
{
	OnCodeGenExitContext()
}


IRAddOperator : string operatorname
{
	OnCodeGenRegisterOperatorInvoke(PoolString(operatorname))
}

IRAddLiteralString : string literal
{
	OnCodeGenRegisterLiteralString(PoolString(literal))
}

IRAddLiteralBoolean : boolean literal
{
	OnCodeGenRegisterLiteralBoolean(literal)
}

IRAddLiteralReal : real literal
{
	OnCodeGenRegisterLiteralReal(literal)
}

IRAddLiteralInteger : integer literal
{
	OnCodeGenRegisterLiteralInteger(literal, 0x01000001)		// We can demote the integer later
}

IRAddLiteralIdentifier : string token
{
	OnCodeGenRegisterAtomIdentifier(PoolString(token), 0)
}


IRRegisterUnresolvedParameter : string name, integer typeid
{
	UnresolvedParameter p = PoolString(name), 0, typeid, false, nothing, nothing
	AppendUnresolvedParameterToFunction(Functions.value, Functions.value.Params, p)
}




FindLastPreOpAndAppendCompoundMemberHelper : CodeBlock ref codeblock, integer operand
{
	FindLastPreOpAndAppendCompoundMember(codeblock.Entries, codeblock.Entries.next, operand)
}

FindLastPreOpAndAppendCompoundMember : list<CodeBlockEntry> ref entries, list<CodeBlockEntry> ref tail, integer membername
{
	FindLastPreOpAndAppendCompoundMember(tail, tail.next, membername)
}

FindLastPreOpAndAppendCompoundMember : list<CodeBlockEntry> ref entries, nothing, integer membername
{
	AppendCompoundMemberHelper(entries.value, membername)
}



PopCodeBlock : list<OptionalCodeBlock> ref stack, list<OptionalCodeBlock> ref next
{
	stack = next
}

PopCodeBlock : list<OptionalCodeBlock> ref stack, nothing
{
	list<OptionalCodeBlock> newlist = nothing, nothing
	stack = newlist
}



PopCurrentStatementAndAppendToScratchExpression : list<Expression> ref expressions, list<Expression> ref tail
{
	ExpressionAtom atom = SubStatements.value

	expressions = tail

	PlaceAtomInScratchExpression(atom)
	pop<Statement>(SubStatements, SubStatements.next)
}

SetGlobalCodeBlock : CodeBlock ref block
{
	GlobalCodeBlock = block
}

SetGlobalCodeBlock : nothing

