


DumpTypeList : simplelist<integer> ref types
{
	if(types.value != 0)
	{
		string refflag = ""
		if(IsReferenceType(types.value))
		{
			refflag = " ref"
		}

		print(" Potential type: " ; GetPooledString(GetNameOfType(types.value)) ; refflag)
	}

	DumpTypeList(types.next)
}

DumpTypeList : nothing



DumpAllOverloadParameters : list<Overload> ref overloads, integer rawname
{
	if(overloads.value.NormalName == rawname)
	{
		DumpFunctionParameters(Functions, overloads.value.MangledName)
	}

	DumpAllOverloadParameters(overloads.next, rawname)
}

DumpAllOverloadParameters : nothing, integer rawname


DumpFunctionParameters : list<FunctionDefinition> ref functions, integer funcname
{
	if(functions.value.Name == funcname)
	{
		print(GetPooledString(funcname))
		DumpUnresolvedParameters(functions.value.Params)
	}
	else
	{
		DumpFunctionParameters(functions.next, funcname)
	}
}

DumpFunctionParameters : nothing, integer funcname



DumpUnresolvedParameters : list<UnresolvedParameter> ref params
{
	print(GetPooledString(GetNameOfType(params.value.ResolvedType)))
	DumpUnresolvedParameters(params.next)
}

DumpUnresolvedParameters : nothing

DumpAtom : AtomSentinel 	   ref sentinel    { print("Sentinel") }
DumpAtom : StringHandleAtom 	   ref nonsentinel { print("String handle " ; cast(string, nonsentinel.Handle) ; " = '" ; GetPooledString(nonsentinel.Handle) ; "'") }
DumpAtom : IdentifierAtom 	   ref nonsentinel { print("Identifier " ; cast(string, nonsentinel.Handle) ; " = '" ; GetPooledString(nonsentinel.Handle) ; "'") }
DumpAtom : OperatorInvokeAtom 	   ref nonsentinel { print("Operator " ; cast(string, nonsentinel.OperatorName)) }
DumpAtom : TypeAnnotationAtom 	   ref nonsentinel { print("Type annotation") }
DumpAtom : integer 		   ref nonsentinel { print("integer " ; cast(string, nonsentinel)) }
DumpAtom : integer16 		   ref nonsentinel { print("integer16") }
DumpAtom : boolean 		   ref nonsentinel { print("boolean") }
DumpAtom : real 		   ref nonsentinel { print("real " ; cast(string, nonsentinel)) }
DumpAtom : RefBinding              ref nonsentinel { print("RefBinding") }
DumpAtom : ParentheticalExpression ref nonsentinel { print("Parenthetical") }
DumpAtom : CompoundAtom            ref nonsentinel { print("Compound") }

DumpAtom : Statement		   ref nonsentinel
{
	print("Statement " ; GetPooledString(nonsentinel.Name))
	print("BEGIN PARAMS")
	DumpParameterAtoms(nonsentinel.Parameters)
	print("END PARAMS")
}

DumpExpressionAtoms : list<ExpressionAtom> ref atoms
{
	DumpAtom(atoms.value)
	DumpExpressionAtoms(atoms.next)
}

DumpExpressionAtoms : nothing


DumpExpressionList : list<Expression> ref exprs
{
	print("BEGIN EXPR")
	DumpExpressionAtoms(exprs.value.Atoms)
	print("END EXPR")

	DumpExpressionList(exprs.next)
}

DumpExpressionList : nothing


DumpParameterAtoms : ExpressionList ref exprs
{
	DumpExpressionList(exprs.Expressions)
}

DumpParameterAtoms : nothing


DumpOverloadList : list<InferencePossibility> ref possibilities
{
	if(possibilities.value.FunctionName != 0)
	{
		print(GetPooledString(possibilities.value.FunctionName))
	}

	DumpOverloadList(possibilities.next)
}

DumpOverloadList : nothing


DumpSignature : FunctionSignature ref sig
{
	print("  Function signature")
	DumpSignatureParams(sig.Parameters)
	print("  ->")
	if(sig.ReturnTypeName != 0)
	{
		print(GetPooledString(sig.ReturnTypeName))
	}
}

DumpSignatureParams : list<Parameter> ref params
{
	if(params.value.Type != 0)
	{
		print(GetPooledString(GetNameOfType(params.value.Type)))
	}
	DumpSignatureParams(params.next)
}

DumpSignatureParams : nothing



DumpOverloadList : list<Overload> ref overloads
{
	DumpOverload(overloads.value)
	DumpOverloadList(overloads.next)
}


DumpOverload : Overload ref overload
{
	print(GetPooledString(overload.NormalName) ; " -> " ; GetPooledString(overload.MangledName))
}

