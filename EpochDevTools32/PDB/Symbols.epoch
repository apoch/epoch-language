//
// The Epoch Language Project
// Epoch Development Tools - PDB generation library
//
// SYMBOLS.EPOCH
// CodeView symbol management routines and definitions
//
// Logic for storing and emitting a serialized stream of CodeView
// symbols for use in a PDB file. See also the other PDB-related
// modules for additional documentation and context.
//


structure SymbolSection :
	integer16 ImageSectionIndex,
	integer ImageSectionRVA,
	integer ImageSectionSize,
	integer Characteristics,
	string ImageSectionName
	
	
structure SymbolProcStart :
	integer PtrParent,
	integer PtrEnd,
	integer PtrNext,
	integer CodeSize,
	integer DebugStart,
	integer DebugEnd,
	integer FunctionType,
	integer16 Segment,
	integer Flags,
	string DisplayName,
	integer SectionRelative
	
	
structure SymbolBlockEnd :
	integer Dummy


structure SymbolLocal :
	integer TypeIndex,
	integer16 Flags,
	string Name


type PDBSymbol : SymbolSection | SymbolProcStart | SymbolBlockEnd | SymbolLocal



SymbolGetSize : SymbolSection ref symbol -> integer size = AlignToFour(20 + length(symbol.ImageSectionName) + 1)
SymbolGetSize : SymbolProcStart ref symbol -> integer size = AlignToFour(39 + length(symbol.DisplayName) + 1)
SymbolGetSize : SymbolBlockEnd ref symbol -> integer size = 8
SymbolGetSize : SymbolLocal ref symbol -> integer size = AlignToFour(10 + length(symbol.Name) + 1)


ByteStreamEmitSymbolList : buffer ref stream, integer ref pos, list<PDBSymbol> ref symlist
{
	ByteStreamEmitSymbol(stream, pos, symlist.value)	
	ByteStreamEmitSymbolList(stream, pos, symlist.next)
}

ByteStreamEmitSymbolList : buffer ref stream, integer ref pos, nothing



ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolSection ref symbol
{
	integer16 mysize = cast(integer16, SymbolGetSize(symbol) - 2)

	ByteStreamEmitInteger16(stream, pos, mysize)
	ByteStreamEmitInteger16(stream, pos, 0x1136)						// S_SECTION
	ByteStreamEmitInteger16(stream, pos, symbol.ImageSectionIndex)
	ByteStreamEmitInteger16(stream, pos, 0)								// Alignment, reserved byte
	ByteStreamEmitInteger(stream, pos, symbol.ImageSectionRVA)
	ByteStreamEmitInteger(stream, pos, symbol.ImageSectionSize)
	ByteStreamEmitInteger(stream, pos, symbol.Characteristics)

	integer count = 0
	while(count < length(symbol.ImageSectionName))
	{
		string char = charat(symbol.ImageSectionName, count)
		ByteStreamEmitSubstring(stream, pos, char, 1)

		++count
	}
	
	ByteStreamEmitByte(stream, pos, 0)									// null terminator


	while((pos & 3) != 0)
	{
		ByteStreamEmitByte(stream, pos, 0)
	}
}


ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolProcStart ref symbol
{
	integer16 mysize = cast(integer16, SymbolGetSize(symbol) - 2)

	// TODO - clean this out
	integer bumphack = 0
	if(symbol.DisplayName == "test")
	{
		bumphack = 16
	}
	
	ByteStreamEmitInteger16(stream, pos, mysize)
	ByteStreamEmitInteger16(stream, pos, 0x1110)						// S_GPROC32
	ByteStreamEmitInteger(stream, pos, symbol.PtrParent)
	ByteStreamEmitInteger(stream, pos, symbol.PtrEnd + bumphack)
	
	if(symbol.DisplayName == "test")
	{
		ByteStreamEmitInteger(stream, pos, symbol.PtrEnd)
	}
	else
	{
		ByteStreamEmitInteger(stream, pos, symbol.PtrNext)
	}
	
	ByteStreamEmitInteger(stream, pos, symbol.CodeSize)
	ByteStreamEmitInteger(stream, pos, symbol.DebugStart)
	ByteStreamEmitInteger(stream, pos, symbol.DebugEnd)
	ByteStreamEmitInteger(stream, pos, symbol.FunctionType)
	ByteStreamEmitInteger(stream, pos, symbol.SectionRelative)
	ByteStreamEmitInteger16(stream, pos, symbol.Segment)
	ByteStreamEmitByte(stream, pos, symbol.Flags & 0xff)
	
	integer count = 0
	while(count < length(symbol.DisplayName))
	{
		string char = charat(symbol.DisplayName, count)
		ByteStreamEmitSubstring(stream, pos, char, 1)
		
		++count
	}
	
	ByteStreamEmitByte(stream, pos, 0)									// null terminator

	while((pos & 3) != 0)
	{
		ByteStreamEmitByte(stream, pos, 0)
	}


	if(symbol.DisplayName == "test")
	{
		integer T_INT = 0x74 ///0x8003
		SymbolLocal local = T_INT, 0, "count"

		ByteStreamEmitSymbol(stream, pos, local)
	}
}


ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolBlockEnd ref symbol
{
	integer16 mysize = cast(integer16, SymbolGetSize(symbol) - 2)

	ByteStreamEmitInteger16(stream, pos, mysize)
	ByteStreamEmitInteger16(stream, pos, 0x6)							// S_END	
	ByteStreamEmitInteger(stream, pos, 0)

	while((pos & 3) != 0)
	{
		ByteStreamEmitByte(stream, pos, 0)
	}
}


ByteStreamEmitSymbol : buffer ref stream, integer ref pos, SymbolLocal ref symbol
{
	integer16 mysize = cast(integer16, SymbolGetSize(symbol) - 2)

	print("Emitting local variable symbol: " ; symbol.Name)

	ByteStreamEmitInteger16(stream, pos, mysize)
	ByteStreamEmitInteger16(stream, pos, 0x113e)						// S_LOCAL
	ByteStreamEmitInteger(stream, pos, symbol.TypeIndex)
	ByteStreamEmitInteger16(stream, pos, symbol.Flags)
	ByteStreamEmitStringNarrow(stream, pos, symbol.Name)

	ByteStreamEmitByte(stream, pos, 0)

	while((pos & 3) != 0)
	{
		ByteStreamEmitByte(stream, pos, 0)
	}
}


