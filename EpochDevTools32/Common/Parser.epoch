//
// Testing of separate compilation - hosting parser in its own file (partially...)
//

structure tailhack :
	listnode<ParsedToken> tail



Parse : string filename, string code, integer len, (printer : string) -> boolean success = false
{
	Lex(filename, code, len)

	// Discard the dummy token
	PopToken()

	string token = PeekToken(0)
	while(token != "")
	{
		if(ParseSumType())
		{
		}
		elseif(ParseStrongAlias())
		{
		}
		elseif(ParseWeakAlias())
		{
		}
		elseif(ParseStructure())
		{
		}
		elseif(ParseGlobalBlock())
		{
		}
		elseif(ParseTask())
		{
		}
		elseif(!ParseFunction())
		{
			printer("Error: code could not be parsed: " ; token ; " " ; PeekToken(1) ; " " ; PeekToken(2))
			
			ParsedToken t = PeekParsedToken(0)
			printer("File: " ; t.FileName)
			printer("Line: " ; cast(string, t.Row))
			printer("Column: " ; cast(string, t.Column))
			
			return()
		}

		token = PeekToken(0)
	}

	success = true
}


PushToken : string token, string filename, integer row, integer column
{
	ParsedToken pt = token, filename, row, column
	quick_append(TokenStreamTail.tail, pt)
}


PopToken :
{
	PopTokenFromStream(TokenStream, TokenStream.next)
}

PopTokens : integer count
{
	while(count > 0)
	{
		--count
		PopToken()
	}
}

PopTokenFromStream : list<ParsedToken> ref tokens, list<ParsedToken> ref tail
{
	tokens = tail
}

PopTokenFromStream : list<ParsedToken> ref tokens, nothing
{
	tokens.value = DummyParsedToken
}


PeekToken : integer displacement -> string token = PeekTokenInStream(TokenStream, displacement)

PeekTokenInStream : list<ParsedToken> ref tokens, integer displacement -> string token = tokens.value.Token
{
	if(displacement > 0)
	{
		token = PeekTokenInStream(tokens.next, displacement - 1)
	}
}

PeekTokenInStream : nothing, integer displacement -> ""


PeekParsedToken : integer displacement -> ParsedToken ret = PeekParsedTokenInStream(TokenStream, displacement)
PeekParsedTokenInStream : list<ParsedToken> ref tokens, integer displacement -> ParsedToken token = tokens.value
{
	if(displacement > 0)
	{
		token = PeekParsedTokenInStream(tokens.next, displacement - 1)
	}
}
PeekParsedTokenInStream : nothing, integer displacement -> DummyParsedToken



PeekWithExpectation : integer displacement, string expected -> boolean found = false
{
	string token = PeekToken(displacement)
	if(token == expected)
	{
		found = true
	}
}


ParseGlobalBlock : -> boolean matched = false
{
	if(PeekToken(0) != "global")
	{
		return()
	}

	if(PeekToken(1) != "{")
	{
		return()
	}

	PopTokens(2)

	integer blockname = PoolString("@@globalblock")
	OnCodeGenRegisterScope(blockname, 0, false)
	OnCodeGenRegisterGlobalBlock(blockname)

	while(PeekToken(0) != "}")
	{
		if(!ParseInitialization(false))
		{
			print("Failure to parse global entry")
			return()
		}
	}

	PopToken()
	OnCodeGenExitContext()
	matched = true
}



ParseTask : -> boolean matched = false
{
	if(PeekToken(0) != "task")
	{
		return()
	}
	
	if(PeekToken(2) != "{")
	{
		return()
	}
	
	PopToken()
	
	string taskname = PeekToken(0)
	
	PopTokens(2)
	
	OnCodeGenEnterTask(PoolString(taskname))
	
	while(PeekToken(0) != "}")
	{
		if(!ParseFunction())
		{
			print("Illegal task contents")
			return()
		}
	}
	
	OnCodeGenExitContext()
	
	PopToken()
	matched = true
}



ParseWeakAlias : -> boolean matched = false
{
	if(!PeekWithExpectation(0, "alias"))
	{
		return()
	}

	if(!PeekWithExpectation(2, "="))
	{
		return()
	}

	PopToken()
	string aliasname = PeekToken(0)
	
	ParsedToken aliastoken = PeekParsedToken(0)
	
	string basename = PeekToken(2)
	PopTokens(3)

	OnCodeGenRegisterWeakAlias((++GlobalWeakAliasCounter), PoolString(aliasname), PoolString(basename))
	
	SourceLookupTableAddWeakAlias(GlobalWeakAliasCounter, aliasname, aliastoken)

	matched = true
}


ParseStrongAlias : -> boolean matched = false
{
	if(!PeekWithExpectation(0, "type"))
	{
		return()
	}

	if(!PeekWithExpectation(2, ":"))
	{
		return()
	}

	PopToken()
	string aliasname = PeekToken(0)
	
	ParsedToken aliastoken = PeekParsedToken(0)
	
	string basename = PeekToken(2)
	PopTokens(3)

	OnCodeGenRegisterAlias((++GlobalAliasCounter), PoolString(aliasname), PoolString(basename))
	
	SourceLookupTableAddStrongAlias(GlobalAliasCounter, aliasname, aliastoken)

	matched = true
}


ParseSumType : -> boolean matched = false
{
	boolean templated = false

	if(!PeekWithExpectation(0, "type"))
	{
		return()
	}

	string sumtypename = PeekToken(1)
	ParsedToken sumtypetoken = PeekParsedToken(1)

	if(PeekToken(2) == "<")
	{
		PopTokens(3)
		if(!ParseTemplateParameters())
		{
			return()
		}

		templated = true

		if(!PeekWithExpectation(1, ":"))
		{
			return()
		}
	}
	elseif(!PeekWithExpectation(2, ":"))
	{
		return()
	}
	elseif(!PeekWithExpectation(4, "|"))
	{
		return()
	}
	else
	{
		PopToken()
	}

	integer typename = PoolString(sumtypename)
	integer typeid = (++GlobalSumTypeCounter)
	PopTokens(2)
	
	SourceLookupTableAddSumType(GlobalSumTypeCounter, sumtypename, sumtypetoken)

	ParseSumTypeBases(typename, typeid)

	string finalbasename = PeekToken(0)
	FindSumTypeAndAddBase(typename, typeid, PoolString(finalbasename), false)		// TODO - allow template args on trailing type
	PopToken()

	if(templated)
	{
		SetUpSumTypeTemplate(typeid)
	}

	matched = true
}


ParseSumTypeBases : integer typename, integer typeid
{
	boolean hasmorebases = true

	while(hasmorebases)
	{
		string basename = PeekToken(0)

		if(PeekToken(1) == "<")
		{
			integer baselookahead = ParseTemplateArgs(2)
			PopTokens(baselookahead + 2)

			FindSumTypeAndAddBase(typename, typeid, PoolString(basename), true)
		}
		else
		{
			FindSumTypeAndAddBase(typename, typeid, PoolString(basename), false)
			PopTokens(2)
		}

		hasmorebases = (PeekToken(1) == "|")
	}
}


ParseStructure : -> boolean matched = false
{
	boolean templated = false

	if(!PeekWithExpectation(0, "structure"))
	{
		return()
	}

	string structurename = PeekToken(1)
	ParsedToken structuretoken = PeekParsedToken(1)

	if(PeekToken(2) == "<")
	{
		PopTokens(3)
		if(!ParseTemplateParameters())
		{
			return()
		}

		templated = true

		if(!PeekWithExpectation(1, ":"))
		{
			return()
		}
	}
	elseif(!PeekWithExpectation(2, ":"))
	{
		return()
	}

	PopTokens(2)
	if(!templated)
	{
		PopToken()
	}

	integer structuretype = (++GlobalStructureCounter)
	integer structurenamehandle = PoolString(structurename)
	
	SourceLookupTableAddStructure(GlobalStructureCounter, structurename, structuretoken)

	boolean moremembers = true
	while(moremembers)
	{
		if(PeekToken(0) == "(")
		{
			PopToken()

			string memberfuncname = PeekToken(0)
			PopToken()

			if(!PeekWithExpectation(0, ":"))
			{
				return()
			}

			PopToken()

			integer memberfuncnamehandle = PoolString(memberfuncname)

			simplelist<integer> paramtypenames = 0, nothing

			boolean moreparams = true
			while(moreparams)
			{
				string paramtypename = PeekToken(0)
				PopToken()

				simpleprepend<integer>(paramtypenames, PoolString(paramtypename))

				if(PeekToken(0) != ",")
				{
					moreparams = false
				}
				else
				{
					PopToken()
				}
			}

			integer returntypehandle = 0

			if(PeekToken(0) == "->")
			{
				PopToken()
				returntypehandle = PoolString(PeekToken(0))
				PopToken()
			}

			OnCodeGenRegisterStructureMemFuncSig(structurenamehandle, structuretype, memberfuncnamehandle, returntypehandle)
			OnCodeGenRegisterStructureMemFuncSigParamList(structurenamehandle, structuretype, memberfuncnamehandle, paramtypenames)

			if(!PeekWithExpectation(0, ")"))
			{
				return()
			}

			PopToken()
		}
		else
		{
			boolean membertemplated = false
			boolean isref = false
			string membertypename = PeekToken(0)
			PopToken()
			string membername = PeekToken(0)
			PopToken()

			if(membername == "<")
			{
				integer memberlookahead = ParseTemplateArgs(0)
				if(memberlookahead > 0)
				{
					membertemplated = true
					PopTokens(memberlookahead + 1)
					membername = PeekToken(0)
					PopToken()
				}
				else
				{
					print("Error in template arguments for structure member")
					return()
				}
			}

			if(membername == "ref")
			{
				isref = true
				membername = PeekToken(0)
				PopToken()
			}

			OnCodeGenRegisterStructureMemVar(structurenamehandle, structuretype, PoolString(membername), PoolString(membertypename), isref, membertemplated)
		}

		if(PeekToken(0) != ",")
		{
			moremembers = false
		}
		else
		{
			PopToken()
		}
	}

	if(templated)
	{
		SetStructureToTemplate(structurenamehandle)
	}

	matched = true
}


ParseFunction : -> boolean matched = false
{
	string functionname = PeekToken(0)
	ParsedToken functiontoken = PeekParsedToken(0)
	
	boolean templated = false

	if(PeekToken(1) == "<")
	{
		PopTokens(2)
		if(!ParseTemplateParameters())
		{
			return()
		}

		templated = true
	}

	if(!PeekWithExpectation(1, ":"))
	{
		return()
	}

	PopTokens(2)

	integer rawnamehandle = PoolString(functionname)
	integer namehandle = RegisterOverloadForFunction(functionname, rawnamehandle)

	OnCodeGenRegisterFunction(namehandle, rawnamehandle, functionname, templated)
	
	SourceLookupTableAddFunction(namehandle, functionname, functiontoken)
	
	if(PeekToken(0) != "[")
	{
		ParseFunctionParams(rawnamehandle, namehandle)
		ParseFunctionReturn(namehandle)
	}
	ParseFunctionTags(namehandle, rawnamehandle)

	if(!PeekWithExpectation(0, "{"))
	{
		matched = true
		IREnterFunction(namehandle)
		OnCodeGenEnterFunctionBody(namehandle)
		IRExitFunction()
		return()
	}

	PopTokens(1)
	IREnterFunction(namehandle)
	OnCodeGenEnterFunctionBody(namehandle)

	ParseCodeBlock()

	IRExitFunction()
	matched = true
}


ParseTemplateParameters : -> boolean matched = false
{
	boolean hasparams = true

	while(hasparams)
	{
		string paramtype = PeekToken(0)
		string paramname = PeekToken(1)

		IRRegisterTemplateParameter(PoolString(paramtype), PoolString(paramname))

		PopTokens(2)

		if(PeekToken(0) == ">")
		{
			hasparams = false
		}
		elseif(PeekToken(0) == ",")
		{
			PopToken()
		}
		else
		{
			print("Syntax error in template parameters")
			return()
		}
	}

	matched = true
}


ParseFunctionParams : integer rawname, integer mangledname
{
	string typetoken = PeekToken(0)
	if(typetoken == "")
	{
		return()
	}

	while((typetoken != "{") && (typetoken != "->"))
	{
		if(typetoken == "nothing")
		{
			integer pooledhandle = PooledStringHandleForNothing
			integer nothinghandle = PoolString("nothing@@" ; cast(string, GlobalNothingCounter))
			++GlobalNothingCounter

			PopToken()
			IRRegisterFunctionParam(nothinghandle, pooledhandle, false, false)
		}
		elseif(typetoken == "(")
		{
			PopToken()
			string higherordername = PeekToken(0)

			if(PeekWithExpectation(1, ":"))
			{
				PopTokens(2)

				simplelist<integer> paramtypenames = 0, nothing
				simplelist<boolean> paramrefflags = false, nothing

				boolean moreparams = true
				if(PeekToken(0) == ")")
				{
					moreparams = false
				}

				while(moreparams)
				{
					string paramtypename = PeekToken(0)
					PopToken()
					
					boolean paramisref = false
					if(PeekToken(0) == "ref")
					{
						paramisref = true
						PopToken()
					}

					simpleprepend<integer>(paramtypenames, PoolString(paramtypename))
					simpleprepend<boolean>(paramrefflags, paramisref)

					if(PeekToken(0) != ",")
					{
						moreparams = false
					}
					else
					{
						PopToken()
					}
				}

				integer returntypename = 0

				if(PeekToken(0) == "->")
				{
					PopToken()
					returntypename = PoolString(PeekToken(0))
					PopToken()
				}

				integer sigtype = FindOrCreateFunctionSignatureType(paramtypenames, paramrefflags, returntypename)

				if(!PeekWithExpectation(0, ")"))
				{
					print("Error in higher order function parameter syntax")
					return()
				}

				IRRegisterUnresolvedParameter(higherordername, sigtype)

				PopToken()
			}
		}
		elseif(HandleLiteralFunctionParam(typetoken))
		{
			PopToken()
			IRSetupPatternMatching(rawname, mangledname)
		}
		else
		{
			integer lookahead = 0
			boolean templated = false

			if(PeekToken(1) == "<")
			{
				lookahead = ParseTemplateArgs(2)
				if(lookahead > 0)
				{
					templated = true
				}
			}

			string nametoken = PeekToken(1 + lookahead)
			PopTokens(2 + lookahead)

			boolean isreference = false
			if(nametoken == "ref")
			{
				isreference = true
				nametoken = PeekToken(0)
				PopToken()
			}

			// TODO - error checking

			IRRegisterFunctionParam(PoolString(nametoken), PoolString(typetoken), isreference, templated)
		}

		typetoken = PeekToken(0)
		if(typetoken != ",")
		{
			return()
		}
		PopToken()
		typetoken = PeekToken(0)
	}
}


ParseFunctionReturn : integer namehandle
{
	if(!PeekWithExpectation(0, "->"))
	{
		return()
	}

	PopToken()

	OnCodeGenEnterFunctionReturn(namehandle, true)
	if(!ParseInitialization(true))
	{
		ParseExpression()
	}
	OnCodeGenExitContext()
}


ParseFunctionTags : integer functionname, integer rawfuncname
{
	if(!PeekWithExpectation(0, "["))
	{
		return()
	}

	PopToken()

	while(PeekToken(0) != "]")
	{
		ParseSingleFunctionTag(functionname, rawfuncname)
	}

	PopToken()
}

ParseSingleFunctionTag : integer functionname, integer rawfuncname
{
	string tagname = PeekToken(0)

	if(PeekToken(1) == "(")
	{
		PopTokens(2)
		OnCodeGenRegisterFunctionTag(functionname, tagname, rawfuncname)

		string token = PeekToken(0)
		while(token != ")")
		{
			if(token == "")
			{
				print("Incomplete function tag")
				return()
			}

			string parameter = PeekToken(0)
			if(subchar(parameter, 0) == CharacterQuote)
			{
				parameter = substring(parameter, 1, length(parameter) - 2)
			}

			PopToken()

			OnCodeGenRegisterFunctionTagParam(functionname, tagname, parameter)

			token = PeekToken(0)
			if(token == ",")
			{
				PopToken()
				token = PeekToken(0)
			}
		}

		PopToken()
	}
	else
	{
		PopToken()
		OnCodeGenRegisterFunctionTag(functionname, tagname, rawfuncname)
	}

	if(tagname == "external")
	{
		FlagFunctionAsExternal(functionname)
	}

	if(PeekToken(0) == ",")
	{
		PopToken()
	}
}


ParseStatement : boolean substatement -> boolean matched = false
{
	string statementname = PeekToken(0)
	boolean templated = false
	integer lookahead = 0

	if(PeekToken(1) == "<")
	{
		lookahead = ParseTemplateArgs(2)
		if(lookahead > 0)
		{
			templated = true
		}
	}

	if(!PeekWithExpectation(1 + lookahead, "("))
	{
		return()
	}

	if(substatement)
	{
		OnCodeGenEnterSubStatement()
	}

	IREnterStatement(statementname, !substatement, templated, 0)

	PopTokens(2 + lookahead)

	string token = PeekToken(0)
	while(token != ")")
	{
		if(token == "")
		{
			print("Error: missing a )")
			return()
		}

		if(!ParseExpression())
		{
			print("Error: mangled expression")
			return()
		}

		token = PeekToken(0)
		if(token == ",")
		{
			PopToken()
			token = PeekToken(0)
			OnCodeGenShiftParameter()
		}
	}

	PopToken()
	IRExitStatement()

	if(substatement)
	{
		IRExitStatement()
	}

	matched = true
}

ScanTemplateArgs : integer initialconsume -> integer consumed = initialconsume
{
	boolean hasargs = true
	while(hasargs)
	{
		++consumed

		if(PeekToken(consumed) == ">")
		{
			hasargs = false
		}
		elseif(PeekToken(consumed) == ",")
		{
			++consumed
		}
		else
		{
			consumed = 0
			return()
		}
	}
}

ParseTemplateArgs : integer intialconsume -> integer consumed = intialconsume
{
	TemplateArgumentList newarglist = scratchtemplatearglist
	prepend<TemplateArgumentList>(ScratchTemplateArgumentStack, newarglist)

	boolean hasargs = true
	while(hasargs)
	{
		string argvalue = PeekToken(consumed)
		++consumed

		integer replacehandle = PoolString(argvalue)
		TemplateArgument newarg = replacehandle, argvalue
		AppendTemplateArgument(ScratchTemplateArgumentStack.value.Args, newarg)

		if(PeekToken(consumed) == ">")
		{
			hasargs = false
		}
		elseif(PeekToken(consumed) == ",")
		{
			++consumed
		}
		else
		{
			PopTemplateArgStack(ScratchTemplateArgumentStack, ScratchTemplateArgumentStack.next)
			consumed = 0
			return()
		}
	}
}

ParseInitialization : boolean inreturn -> boolean matched = false
{
	boolean templated = false
	string typename = PeekToken(0)
	string varname = PeekToken(1)

	integer skipahead = 0
	if(varname == ".")
	{
		return()
	}
	elseif(varname == "<")
	{
		skipahead = ScanTemplateArgs(2)
		varname = PeekToken(1 + skipahead)

		templated = true
	}

	boolean isarray = false
	integer arity = 0
	if(varname == "[")
	{
		string aritytoken = PeekToken(skipahead + 2)

		arity = cast(integer, aritytoken)

		if(PeekToken(skipahead + 3) != "]")
		{
			return()
		}

		skipahead = skipahead + 3

		isarray = true
		varname = PeekToken(skipahead + 1)
	}

	if(PeekToken(2 + skipahead) != "=")
	{
		return()
	}

	if(templated)
	{
		ParseTemplateArgs(2)
	}

	PopTokens(3 + skipahead)

	if(inreturn)
	{
		OnCodeGenEnterSubStatement()
	}

	if(isarray && (arity < 1))
	{
		print("Arrays must have positive arity")
		return()
	}

	IREnterStatement(typename, true, templated, arity)
	IRAddLiteralIdentifier(varname)

	OnCodeGenShiftParameter()

	ParseExpression()
	while(PeekToken(0) == ",")
	{
		PopToken()
		OnCodeGenShiftParameter()
		ParseExpression()
	}

	IRExitStatement()

	matched = true

	if(inreturn)
	{
		IRExitStatement()
		DisableAnonymousReturnOnCurrentFunction()
	}
}


ParseExpression : -> boolean matched = false
{
	boolean matchedstatement = false

	if(!ParseExpressionTerm(true, matchedstatement))
	{
		return()
	}

	if(matchedstatement && (PeekToken(0) == ")"))
	{
	}
	else
	{
		while(ParseExpressionOperator())
		{
			if(!ParseExpressionTerm(false, matchedstatement))
			{
				return()
			}
		}
	}

	matched = true
}

ParseExpressionTerm : boolean startsexpr, boolean ref matchedstatement -> boolean matched = false
{
	string term = PeekToken(0)

	if(term == ")")
	{
		return()
	}
	elseif(term == ",")
	{
		return()
	}
	elseif(term == "")
	{
		return()
	}
	elseif(term == "(")
	{
		OnCodeGenRegisterParenthetical()

		PopToken()
		if(ParseExpression())
		{
			PopToken()
			matched = true
		}
		else
		{
			print("Error in parenthetical expression")
		}

		OnCodeGenExitContext()


		return()
	}

	// Unary operator detection
	if(term == "!")
	{
		PopToken()
		IRAddOperator(term)
		matched = ParseExpressionTerm(startsexpr, matchedstatement)
		return()
	}

	if(term == "false")
	{
		IRAddLiteralBoolean(false)
	}
	elseif(term == "true")
	{
		IRAddLiteralBoolean(true)
	}
	elseif(term == "0")
	{
		IRAddLiteralInteger(0)
	}
	elseif(term == "0.0")
	{
		IRAddLiteralReal(0.0)
	}
	elseif(ParsePreopStatement(true))
	{
		matched = true
		return()
	}
	elseif(ParseStatement(true))
	{
		matched = true
		matchedstatement = true
		return()
	}
	else
	{
		if(subchar(term, 0) == CharacterQuote)
		{
			string stringliteral = substring(term, 1, length(term) - 2)
			IRAddLiteralString(stringliteral)
		}
		else
		{
			if(stringcontains(term, "."))
			{
				real realvalue = cast(real, term)
				IRAddLiteralReal(realvalue)
			}
			else
			{
				integer literalvalue = cast(integer, term)
				if(substring(term, 0, 2) == "0x")
				{
					IRAddLiteralInteger(literalvalue)
				}
				else
				{
					if(literalvalue != 0)
					{
						IRAddLiteralInteger(literalvalue)
					}
					else
					{
						if(PeekToken(1) == "[")
						{
							PopTokens(2)

							OnCodeGenEnterArrayIndex(term)
							matched = ParseExpression()
							OnCodeGenExitContext()
							if(matched)
							{
								PopToken()
							}
							return()
						}
						else
						{
							IRAddLiteralIdentifier(term)
						}
					}
				}
			}
		}
	}

	PopToken()
	matched = true
}

ParseExpressionOperator : -> boolean matched = false
{
	string op = PeekToken(0)
	if(op == ")")
	{
		return()
	}
	elseif(op == ",")
	{
		return()
	}
	elseif(op == "")
	{
		return()
	}
	elseif(length(op) > 2)
	{
		return()
	}


	boolean knownoperator = false
	if(op == ".")
	{
		knownoperator = true
	}
	elseif(op == "+")
	{
		knownoperator = true
	}
	elseif(op == "-")
	{
		knownoperator = true
	}
	elseif(op == "*")
	{
		knownoperator = true
	}
	elseif(op == "/")
	{
		knownoperator = true
	}
	elseif(op == "==")
	{
		knownoperator = true
	}
	elseif(op == "!=")
	{
		knownoperator = true
	}
	elseif(op == ";")
	{
		knownoperator = true
	}
	elseif(op == ">")
	{
		knownoperator = true
	}
	elseif(op == "<")
	{
		knownoperator = true
	}
	elseif(op == "&")
	{
		knownoperator = true
	}
	elseif(op == "&&")
	{
		knownoperator = true
	}

	if(knownoperator)
	{
		IRAddOperator(op)
		PopToken()
		matched = true
	}
}


ParseMessage : -> boolean matched = false
{
	if(PeekToken(1) != "=>")
	{
		return()
	}
	
	
	string targetname = PeekToken(0)
	PopTokens(2)
	
	string messagename = PeekToken(0)
	PopToken()
	
	if(PeekToken(0) != "(")
	{
		return()
	}


	IREnterMessageSend(PoolString(targetname), PoolString(messagename))
	
	
	while(PeekToken(0) != ")")
	{
		PopToken()
	}
	
	PopToken()
	
	IRExitMessageSend()
	
	matched = true
}


ParseAssignment : -> boolean matched = false
{
	integer lhslength = 1
	while(PeekToken(lhslength) == ".")
	{
		lhslength += 2
	}

	integer indexingtoken = lhslength + 1
	boolean isindexing = false

	if(PeekToken(lhslength) == "[")
	{
		string tok = PeekToken(lhslength)
		while((length(tok) > 0) && (tok != "]"))
		{
			++lhslength
			tok = PeekToken(lhslength)
		}
		++lhslength

		if(length(PeekToken(lhslength)) > 0)
		{
			isindexing = true
		}
	}

	string assignmenttoken = PeekToken(lhslength)
	boolean recognized = false
	if(assignmenttoken == "=")
	{
		recognized = true
	}
	elseif(assignmenttoken == "+=")
	{
		recognized = true
	}
	elseif(assignmenttoken == "-=")
	{
		recognized = true
	}

	if(!recognized)
	{
		return()
	}

	if(isindexing)
	{
		OnCodeGenEnterAssignmentArrayIndex(PoolString(assignmenttoken), PoolString(PeekToken(0)))
		PopTokens(2)
		if(!ParseExpression())
		{
			return()
		}
		PopTokens(2)
		OnCodeGenAssignmentArrayIndexEnd()
	}
	else
	{
		if(lhslength == 1)
		{
			OnCodeGenEnterAssignment(PoolString(assignmenttoken), PoolString(PeekToken(0)), 0, 0)
		}
		else
		{
			OnCodeGenEnterAssignmentCompound(PoolString(assignmenttoken), PoolString(PeekToken(0)), 0, 0)
			integer tokenindex = 2
			while(tokenindex < lhslength)
			{
				FindCurrentFunctionAndAppendCompoundMember(PoolString(PeekToken(tokenindex)))
				tokenindex += 2
			}
			OnCodeGenAssignmentCompoundEnd()
		}

		PopTokens(lhslength + 1)
	}

	boolean haschain = true
	while(haschain)
	{
		lhslength = 1
		while(PeekToken(lhslength) == ".")
		{
			lhslength += 2
		}

		if(PeekToken(lhslength) == "=")
		{
			if(assignmenttoken != "=")
			{
				print("Cannot chain assignments with side effects")
				return()
			}

			if(lhslength == 1)
			{
				OnCodeGenChainAssignment(PoolString("="), PoolString(PeekToken(0)), 0, 0)
			}
			else
			{
				OnCodeGenChainAssignmentCompound(PoolString("="), PoolString(PeekToken(0)), 0, 0)
				integer tokenindex = 2
				while(tokenindex < lhslength)
				{
					FindCurrentFunctionAndChainCompoundMember(PoolString(PeekToken(tokenindex)))
					tokenindex += 2
				}
			}

			PopTokens(lhslength + 1)
		}
		else
		{
			haschain = false
		}
	}

	if(ParseExpression())
	{
		matched = true
		OnCodeGenExitContext()
	}
	else
	{
		print("Right hand side of assignment is not a valid expression")
	}
}


ParseEntity : -> boolean matched = false
{
	string entityname = PeekToken(0)

	if(entityname == "if")
	{
		if(PeekToken(1) == "(")
		{
			PopTokens(2)

			OnCodeGenEnterChain()
			OnCodeGenEnterEntity(0x11, 0)

			ParseExpression()
			PopToken()

			matched = ParseEntityCode()

			while(PeekToken(0) == "elseif")
			{
				PopTokens(2)
				OnCodeGenEnterEntity(0x12, 0)
				ParseExpression()
				PopToken()
				matched = ParseEntityCode()
			}

			if(PeekToken(0) == "else")
			{
				PopToken()
				OnCodeGenEnterEntity(0x13, 0)
				matched = ParseEntityCode()
			}

			OnCodeGenExitContext()
		}
	}
	elseif(entityname == "while")
	{
		if(PeekToken(1) == "(")
		{
			PopTokens(2)

			OnCodeGenEnterChain()
			OnCodeGenEnterEntity(0x14, 0)

			ParseExpression()
			PopToken()

			matched = ParseEntityCode()

			OnCodeGenExitContext()
		}
	}
}

ParseCodeBlock :
{
	string token = PeekToken(0)
	while(token != "}")
	{
		if(token == "")
		{
			print("Error: missing a }")
			return()
		}

		if(ParseEntity())
		{
		}
		elseif(ParsePreopStatement(false))
		{
		}
		elseif(ParsePostopStatement())
		{
		}
		elseif(ParseStatement(false))
		{
		}
		elseif(ParseInitialization(false))
		{
		}
		elseif(ParseAssignment())
		{
		}
		elseif(ParseMessage())
		{
		}
		else
		{
			print("Parse failure: " ; PeekToken(0) ; " " ; PeekToken(1) ; " " ; PeekToken(2))
			return()
		}

		token = PeekToken(0)
	}

	PopToken()
}


ParseEntityCode : -> boolean matched = false
{
	if(PeekToken(0) == "{")
	{
		OnCodeGenEnterEntityCode()
		PopToken()
		ParseCodeBlock()
		OnCodeGenExitContext()
		OnCodeGenExitContext()
		matched = true
	}
	else
	{
		print("Expected code block")
	}
}


ParsePreopStatement : boolean substatement -> boolean matched = false
{
	boolean recognized = false
	string potential = PeekToken(0)

	if(potential == "++")
	{
		recognized = true
	}
	elseif(potential == "--")
	{
		recognized = true
	}

	if(recognized)
	{
		PopToken()

		string operand = PeekToken(0)
		PopToken()

		OnCodeGenPreparePreOpStatement(PoolString(potential), PoolString(operand))

		while(PeekToken(0) == ".")
		{
			PopToken()
			operand = PeekToken(0)
			PopToken()

			OnCodeGenPreparePreOpCompoundOperand(PoolString(operand))
		}

		OnCodeGenCompletePreOpStatement(substatement)

		matched = true
	}
}

ParsePostopStatement : -> boolean matched = false
{
	boolean recognized = false

	string operand = PeekToken(0)
	integer operandlength = 1
	while(PeekToken(operandlength) == ".")
	{
		operandlength += 2
	}

	string potential = PeekToken(operandlength)
	if(potential == "++")
	{
		recognized = true
	}
	elseif(potential == "--")
	{
		recognized = true
	}

	if(recognized)
	{
		OnCodeGenRegisterPostOpStatement(PoolString(potential), PoolString(operand))

		if(operandlength > 1)
		{
			integer tokenindex = 2
			while(tokenindex < operandlength)
			{
				operand = PeekToken(tokenindex)
				OnCodeGenAddPreOpCompoundOperand(PoolString(operand))
				tokenindex += 2
			}
		}

		PopTokens(operandlength + 1)

		matched = true
	}
}


HandleLiteralFunctionParam : string token -> boolean isliteral = false
{
	if(token == "0")
	{
		RegisterLiteralFunctionParam(0)
		isliteral = true
	}
	elseif(token == "0.0")
	{
		RegisterLiteralFunctionParam(0.0)
		isliteral = true
	}
	elseif(stringcontains(token, "."))
	{
		real realval = cast(real, token)
		RegisterLiteralFunctionParam(realval)
		isliteral = true
	}
	else
	{
		integer intval = cast(integer, token)
		if(intval != 0)
		{
			RegisterLiteralFunctionParam(intval)
			isliteral = true
			return()
		}

		// TODO - support pattern match literals of other types
	}
}



quick_append : list<ParsedToken> ref tailnode, ParsedToken ref token
{
	list<ParsedToken> newlist = token, nothing
	tailnode.next = newlist
	TokenStreamTail.tail = newlist
}

quick_append : nothing, ParsedToken ref token
{
	assertmsg(false, "quick_append failure")
}


