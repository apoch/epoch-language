//
// The Epoch Language Project
// Epoch Development Tools - Era Integrated Development Environment
//
// ERA.EPOCH
// IDE entry point and setup/teardown logic
//


// TODO - type aliases for cleanliness?



structure ParsedToken :
	string Token,
	string FileName,
	integer Row,
	integer Column


//
// Win32 Boilerplate - type definitions
//
// Also candidate for factoring into a separate module or
// shared "standard" library. These are all the types and
// such needed for interacting with the Win32 API.
//

structure WindowClass :
	integer Size,
	integer Style,
	(WindowProc : integer, integer, integer, integer -> integer),
	integer ClassExtra,
	integer WindowExtra,
	integer hInstance,
	integer hIcon,
	integer hCursor,
	integer hBackgroundBrush,
	string MenuName,
	string ClassName,
	integer hIconSmall

structure Point :
	integer x,
	integer y

structure Rect :
	integer left,
	integer top,
	integer right,
	integer bottom

structure MessageInfo :
	integer hwnd,
	integer message,
	integer wparam,
	integer lparam,
	integer time,
	Point point

structure PaintInfo :
	integer hdc,
	boolean erase,
	Rect paintarea,
	boolean restore,
	boolean incupdate,
	integer reserved0,
	integer reserved1,
	integer reserved2,
	integer reserved3,
	integer reserved4,
	integer reserved5,
	integer reserved6,
	integer reserved7

structure OpenFileNameStruct :
	integer structsize,
	integer hwndowner,
	integer hinstance,
	string filter,
	buffer customfilter,
	integer maxcustomfilter,
	integer filterindex,
	buffer file,
	integer maxfile,
	buffer filetitle,
	integer maxfiletitle,
	string initialdir,
	string title,
	integer flags,
	integer16 offset,
	integer16 extension,
	string defext,
	integer customdata,
	integer hook,
	string templatename

structure TreeViewItem :
	integer mask,
	integer handle,
	integer state,
	integer statemask,
	string text,
	integer textmax,
	integer image,
	integer selectedimage,
	integer children,
	integer lparam,
	integer integral,
	integer stateex,
	integer hwnd,
	integer expandedimage,
	integer reserved

structure TreeViewItemBuffer :
	integer mask,
	integer handle,
	integer state,
	integer statemask,
	buffer text,
	integer textmax,
	integer image,
	integer selectedimage,
	integer children,
	integer lparam,
	integer integral,
	integer stateex,
	integer hwnd,
	integer expandedimage,
	integer reserved

structure TreeViewInsert :
	integer parent,
	integer insertafter,
	TreeViewItem item

structure CommonControlInit :
	integer size,
	integer flags


structure NotifyMessageHeader :
	integer hwnd,
	integer childid,
	integer code


structure ScintillaTextRange :
	integer Min,
	integer Max,
	buffer Text


//
// Win32 Boilerplate - API declarations
//
// All aspects of the Windows API that we need to interact with
// are collected here for organizational sanity.
//

// TODO - organize externals

CloseHandle : integer handle -> boolean ret = false [external("Kernel32.dll", "CloseHandle", "stdcall")]
GetModuleHandle : integer null -> integer handle = 0 [external("Kernel32.dll", "GetModuleHandleW", "stdcall")]
RegisterClassEx : WindowClass wc -> integer16 atom = 0 [external("User32.dll", "RegisterClassExW", "stdcall")]
CreateWindowEx : integer exstyle, string classname, string windowname, integer style, integer x, integer y, integer width, integer height, integer hwndparent, integer hmenu, integer hinstance, integer param -> integer windowhandle = 0 [external("User32.dll", "CreateWindowExW", "stdcall")]
ShowWindow : integer hwnd, integer cmdshow -> boolean success = false [external("User32.dll", "ShowWindow", "stdcall")]
LoadCursor : integer hinstance, integer cursorid -> integer cursorhandle = 0 [external("User32.dll", "LoadCursorW", "stdcall")]
LoadMenu : integer hinstance, integer menuid -> integer menuhandle = 0 [external("User32.dll", "LoadMenuW", "stdcall")]
LoadIcon : integer hinstance, integer iconid -> integer iconhandle = 0 [external("User32.dll", "LoadIconW", "stdcall")]
GetMessage : MessageInfo ref msg, integer hwnd, integer filtermin, integer filtermax -> integer result = 0 [external("User32.dll", "GetMessageW", "stdcall")]
PeekMessage : MessageInfo ref msg, integer hwnd, integer filtermin, integer filtermax, integer remove -> integer result = 0 [external("User32.dll", "PeekMessageW", "stdcall")]
TranslateMessage : MessageInfo msg -> boolean success = false [external("User32.dll", "TranslateMessage", "stdcall")]
DispatchMessage : MessageInfo msg -> integer unused = 0 [external("User32.dll", "DispatchMessageW", "stdcall")]
IsDialogMessage : integer hwnd, MessageInfo ref msg -> boolean handled = false [external("User32.dll", "IsDialogMessageW", "stdcall")]
BeginPaint : integer hwnd, PaintInfo ref paintinfo -> integer hdc = 0 [external("User32.dll", "BeginPaint", "stdcall")]
EndPaint : integer hwnd, PaintInfo paintinfo -> boolean success = false [external("User32.dll", "EndPaint", "stdcall")]
PostQuitMessage : integer exitcode [external("User32.dll", "PostQuitMessage", "stdcall")]
DefWindowProc : integer hwnd, integer msg, integer wparam, integer lparam -> integer ret = 0 [external("User32.dll", "DefWindowProcW", "stdcall")]
GetClientRect : integer hwnd, Rect ref rect -> boolean success = false [external("User32.dll", "GetClientRect", "stdcall")]
MoveWindow : integer hwnd, integer x, integer y, integer width, integer height, boolean repaint -> boolean success = false [external("User32.dll", "MoveWindow", "stdcall")]
GetDlgItem : integer hwnd, integer childid -> integer windowhandle = 0 [external("User32.dll", "GetDlgItem", "stdcall")]
LoadLibrary : string dllname -> integer libraryhandle = 0 [external("Kernel32.dll", "LoadLibraryW", "stdcall")]
SetTimer : integer hwnd, integer eventid, integer time, integer func -> integer ret = 0 [external("User32.dll", "SetTimer", "stdcall")]

GetParent : integer hwnd -> integer parenthwnd = 0 [external("User32.dll", "GetParent", "stdcall")]

SendMessage : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, string lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, buffer ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, buffer wparam, buffer lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, TreeViewInsert ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, TreeViewItem ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, TreeViewItemBuffer ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, ScintillaTextRange ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]

WaitMessage : -> boolean success = false [external("User32.dll", "WaitMessage", "stdcall")]

MessageBox : integer hwnd, string message, string caption, integer style -> integer ret = 0 [external("User32.dll", "MessageBoxW", "stdcall")]
MessageBox : integer hwnd, buffer message, string caption, integer style -> integer ret = 0 [external("User32.dll", "MessageBoxW", "stdcall")]

DestroyWindow : integer handle -> boolean ret = false [external("User32.dll", "DestroyWindow", "stdcall")]

GetOpenFileName : OpenFileNameStruct ref ofn -> integer ret = 0 [external("comdlg32.dll", "GetOpenFileNameW", "stdcall")]
GetSaveFileName : OpenFileNameStruct ref ofn -> integer ret = 0 [external("comdlg32.dll", "GetSaveFileNameW", "stdcall")]

GetLastError : -> integer ret = 0 [external("Kernel32.dll", "GetLastError", "stdcall")]


GetWindowText : integer hwnd, buffer ref outbuffer, integer buffersize -> integer ret = 0 [external("User32.dll", "GetWindowTextW", "stdcall")]
GetWindowTextLength : integer hwnd -> integer ret = 0 [external("User32.dll", "GetWindowTextLengthW", "stdcall")]


SetFocus : integer targethwnd -> integer hwndret = 0 [external("User32.dll", "SetFocus", "stdcall")]

InvalidateRect : integer hwnd, Rect ref rect, boolean erase -> boolean ret = false [external("User32.dll", "InvalidateRect", "stdcall")]
DrawEdge : integer hdc, Rect ref rect, integer edge, integer flags -> boolean ret = false [external("User32.dll", "DrawEdge", "stdcall")]
DrawText : integer hdc, string text, integer charcount, Rect ref rect, integer format -> integer ret = 0 [external("User32.dll", "DrawTextW", "stdcall")]
SetBkMode : integer hdc, integer mode -> integer ret = 0 [external("Gdi32.dll", "SetBkMode", "stdcall")]
SelectObject : integer hdc, integer object -> integer oldobject = 0 [external("Gdi32.dll", "SelectObject", "stdcall")]
FillRect : integer hdc, Rect ref rect, integer brush -> integer ret = 0 [external("User32.dll", "FillRect", "stdcall")]

CreateSolidBrush : integer color -> integer brush = 0 [external("Gdi32.dll", "CreateSolidBrush", "stdcall")]

LoadAccelerators : integer hinstance, integer tableid -> integer tablehandle = 0 [external("User32.dll", "LoadAcceleratorsW", "stdcall")]
TranslateAccelerator : integer hwnd, integer accelerators, MessageInfo ref msg -> integer ret = 0 [external("User32.dll", "TranslateAcceleratorW", "stdcall")]


CreateFont : integer height, integer width, integer escapement, integer orientation,
             integer weight, integer italic, integer underline, integer strikeout, integer charset,
             integer outprecision, integer clipprecision, integer quality, integer pitchfamily, string facename
          ->
             integer fonthandle = 0
          [external("Gdi32.dll", "CreateFontW", "stdcall")]


SetWindowText : integer hwnd, string text -> boolean success = false [external("User32.dll", "SetWindowTextW", "stdcall")]

GetTimeFormatEx : integer localenameptr, integer flags, integer timeptr, integer formatstrptr, buffer ref outbuffer, integer buffersize -> integer ret = 0 [external("Kernel32.dll", "GetTimeFormatEx", "stdcall")]
GetTimeFormatEx : integer localenameptr, integer flags, integer timeptr, integer formatstrptr, integer bufferptr, integer buffersize -> integer ret = 0 [external("Kernel32.dll", "GetTimeFormatEx", "stdcall")]


EnableWindow : integer hwnd, boolean enabled -> boolean ret = false [external("User32.dll", "EnableWindow", "stdcall")]


SetCapture : integer hwnd -> integer prevhwnd = 0 [external("User32.dll", "SetCapture", "stdcall")]
ReleaseCapture : -> boolean success = false [external("User32.dll", "ReleaseCapture", "stdcall")]

InitCommonControlsEx : CommonControlInit ref init -> boolean ret = false [external("Comctl32.dll", "InitCommonControlsEx", "stdcall")]


SetWindowSubclass : integer hwnd,
                    (proc : integer, integer, integer, integer, integer, integer -> integer),
                    integer id, integer refdata
                 ->
                    boolean ret = false
	         [external("Comctl32.dll", "SetWindowSubclass", "stdcall")]
	         
DefSubclassProc : integer hwnd, integer message, integer wparam, integer lparam -> integer result = 0 [external("Comctl32.dll", "DefSubclassProc", "stdcall")]


IsWindow : integer hwnd -> boolean iswindow = false [external("User32.dll", "IsWindow", "stdcall")]
BringWindowToTop : integer hwnd -> boolean success = false [external("User32.dll", "BringWindowToTop", "stdcall")]

AdjustWindowRect : Rect ref r, integer style, boolean menu -> boolean success = false [external("User32.dll", "AdjustWindowRect", "stdcall")]
GetWindowRect : integer hwnd, Rect ref out -> boolean success = false [external("User32.dll", "GetWindowRect", "stdcall")]

AllocConsole : -> boolean success = false [external("Kernel32.dll", "AllocConsole", "stdcall")]


SetTextColor : integer hdc, integer color -> integer retcolor = 0 [external("Gdi32.dll", "SetTextColor", "stdcall")]
SetBkColor : integer hdc, integer color -> integer retcolor = 0 [external("Gdi32.dll", "SetBkColor", "stdcall")]


//
// Standard library routines
//
// Basic functions useful for interacting with standard data
// structures. Definitely should be factored into a separate
// module at some point, since these operations tend to show
// up in every non-trivial Epoch program.
//

prepend<type T> : list<T> ref thelist, T ref value
{
	list<T> newlist = value, thelist
	thelist = newlist
}


simpleprepend<type T> : simplelist<T> ref thelist, T value
{
	simplelist<T> newlist = value, thelist
	thelist = newlist
}


simple_append_recurse<type T> : simplelist<T> ref thelist, nothing, T value
{
	simplelist<T> newlist = value, nothing
	thelist.next = newlist
}

simple_append_recurse<type T> : simplelist<T> ref thelist, simplelist<T> ref tail, T value
{
	simple_append_recurse<T>(tail, tail.next, value)
}


simple_append<type T> : simplelist<T> ref thelist, T value
{
	simple_append_recurse<T>(thelist, thelist.next, value)
}


quick_append : list<ParsedToken> ref tailnode, ParsedToken ref token [nogc]
{
	list<ParsedToken> newlist = token, nothing
	tailnode.next = newlist
	TokenStreamTail.tail = newlist
}

quick_append : nothing, ParsedToken ref token [nogc]
{
	assert(false)
}



structure SymbolEntry :
	string Symbol,
	string FileName,
	integer Row,
	integer Column


//
// Global data
//
// Normally this would be an evil thing to do, and it still is somewhat
// evil, but there are two excuses for having a global data block.
//
// First, it's the best way to store type-safe data about the UI state
// and other miscellany. Since we only have one window active at a time,
// it's safe to do this.
//
// Second, this is a handy way to stash a bunch of commonly used constants
// and their values. We should probably consider a language feature to
// make constants actually constant.
//

global
{
	//
	// Win32 constants
	//
	
	integer SW_SHOW = 5
	integer SW_HIDE = 0

	integer WS_OVERLAPPEDWINDOW = 13565952

	integer IDC_ARROW = 32512

	integer WM_DESTROY = 2
	integer WM_SIZE = 5
	integer WM_PAINT = 15
	integer WM_CLOSE = 0x10
	integer WM_QUIT = 0x12
	integer WM_SETFONT = 0x30
	integer WM_COMMAND = 273
	integer WM_KEYDOWN = 0x100
	integer WM_CTLCOLORSTATIC = 0x138
	integer WM_CTLCOLOREDIT = 0x133
	integer WM_CTLCOLORBTN = 0x135

	integer MB_ICONEXCLAMATION = 0x30

	integer CW_USEDEFAULT = -2147483648


	//
	// UI identifier constants
	//
	
	integer WNDID_PROJECT_TREEVIEW = 0x001
	integer WNDID_STATUS_HISTORY = 0x002
	integer WNDID_TOOLBAR = 0x003

	integer WNDID_TAB_START = 0x1000
	
	integer TOOLID_FIND_EDIT = 0x001
	integer TOOLID_FIND_BUTTON = 0x002


	//
	// Scintilla-specific constants
	//

	integer SCN_MARGINCLICK = 2010

	integer SCI_LINEFROMPOSITION = 2166
	integer SCI_TOGGLEFOLD = 2231
	integer SCI_SETPROPERTY = 4004
	integer SCI_SETMARGINWIDTHN = 2242
	integer SCI_SETMARGINTYPEN = 2240
	integer SCI_SETMARGINMASKN = 2244
	integer SCI_MARKERDEFINE = 2040
	integer SCI_SETFOLDFLAGS = 2233
	integer SCI_SETMARGINSENSITIVEN = 2246
	integer SCI_GETLENGTH = 2183
	integer SCI_GETTEXT = 2182
	integer SCI_LINELENGTH = 2350
	integer SCI_SETTABWIDTH = 2036

	integer SC_MARGIN_SYMBOL = 0
	integer SC_MASK_FOLDERS = 0xfe000000
	integer SC_MARKNUM_FOLDER = 30
	integer SC_MARKNUM_FOLDEROPEN = 31
	integer SC_MARKNUM_FOLDEREND = 25
	integer SC_MARKNUM_FOLDERMIDTAIL = 27
	integer SC_MARKNUM_FOLDEROPENMID = 26
	integer SC_MARKNUM_FOLDERSUB = 29
	integer SC_MARKNUM_FOLDERTAIL = 28

	integer SC_MARK_PLUS = 8
	integer SC_MARK_MINUS = 7
	integer SC_MARK_EMPTY = 5


	//
	// Handles to widely used resources
	//

	integer FontUIDefault = 0
	integer FontMonospace = 0
	integer FontUIMarlett = 0
	
	integer BrushBackground = 0
	integer BrushActiveTab = 0
	integer BrushDarkBackground = 0


	//
	// UI globals - state tracking for tabbed editing
	//

	integer TAB_TYPE_SENTINEL = 0
	integer TAB_TYPE_EDITOR = 1
	integer TAB_TYPE_RESOURCES = 2
	integer TAB_TYPE_OPTIONS = 3
	
	OpenTab SentinelTab = TAB_TYPE_SENTINEL, 0, "", ""
	list<OpenTab> CurrentTabs = SentinelTab, nothing
	simplelist<integer> TabEdges = 0, nothing

	integer ActiveTabIndex = 0
	integer HighlightTabIndex = -1
	
	boolean RefreshWindowBackground = true
	
	//
	// UI globals - window handles
	//
	
	integer MainHWND = 0
	integer HistoryHWND = 0
	
	//
	// UI globals - additional resources
	//
	
	integer WindowsAccelerators = 0
	
	
	//
	// Additional constants for simplicity
	//
		
	string FileTypeFilters = unescape("Epoch source files (*.epoch)\0*.epoch\0All files (*.*)\0*.*\0")
	
	
	//
	// Wrapper for current project
	//
	
	simplelist<string> emptysourcefilelist = "", nothing
	simplelist<string> emptyresourcefilelist = "", nothing
	EpochProject CurrentProject = "", "Unnamed.exe", emptysourcefilelist, emptyresourcefilelist, false
	
	
	//
	// Project TreeView node types
	//
	
	integer PROJECT_TV_NODETYPE_STRUCTURE = 0
	integer PROJECT_TV_NODETYPE_SOURCECODE = 1
	integer PROJECT_TV_NODETYPE_RESOURCE = 2
	integer PROJECT_TV_NODETYPE_OPTIONS = 3
	
	integer ProjectTreeViewNodeSourceRoot = 0
	
	
	//
	// Constants used internally by the lexer
	//
	
	integer CharacterCarriageReturn = subchar(unescape("\r"), 0)
	integer CharacterLineFeed = subchar(unescape("\n"), 0)
	integer CharacterTab = subchar(unescape("\t"), 0)
	integer CharacterQuote = subchar(unescape("\'"), 0)
	integer CharacterSlash = subchar("/", 0)
	integer CharacterSpace = subchar(" ", 0)

	integer CharacterA = subchar("a", 0)
	integer CharacterB = subchar("b", 0)
	integer CharacterC = subchar("c", 0)
	integer CharacterD = subchar("d", 0)
	integer CharacterE = subchar("e", 0)
	integer CharacterF = subchar("f", 0)
	integer CharacterX = subchar("x", 0)
	integer CharacterZero = subchar("0", 0)
	integer CharacterOne = subchar("1", 0)
	integer CharacterTwo = subchar("2", 0)
	integer CharacterThree = subchar("3", 0)
	integer CharacterFour = subchar("4", 0)
	integer CharacterFive = subchar("5", 0)
	integer CharacterSix = subchar("6", 0)
	integer CharacterSeven = subchar("7", 0)
	integer CharacterEight = subchar("8", 0)
	integer CharacterNine = subchar("9", 0)

	integer CharacterOpenBrace = subchar("{", 0)
	integer CharacterCloseBrace = subchar("}", 0)
	integer CharacterColon = subchar(":", 0)
	integer CharacterOpenParen = subchar("(", 0)
	integer CharacterCloseParen = subchar(")", 0)
	integer CharacterEquals = subchar("=", 0)
	integer CharacterAmpersand = subchar("&", 0)
	integer CharacterComma = subchar(",", 0)
	integer CharacterPlus = subchar("+", 0)
	integer CharacterMinus = subchar("-", 0)
	integer CharacterLessThan = subchar("<", 0)
	integer CharacterGreaterThan = subchar(">", 0)
	integer CharacterDot = subchar(".", 0)
	integer CharacterSemicolon = subchar(";", 0)
	integer CharacterExclamation = subchar("!", 0)
	integer CharacterOpenBracket = subchar("[", 0)
	integer CharacterCloseBracket = subchar("]", 0)
	
	
	integer CHARACTER_CLASS_WHITE = 0
	integer CHARACTER_CLASS_IDENTIFIER = 1
	integer CHARACTER_CLASS_PUNCTUATION = 2
	integer CHARACTER_CLASS_COMMENT = 3
	integer CHARACTER_CLASS_PUNCTUATION_COMPOUND = 4
	integer CHARACTER_CLASS_STRING_LITERAL = 5
	integer CHARACTER_CLASS_LITERAL = 6

	
	//
	// Storage used for lexing/parsing
	//
	ParsedToken DummyParsedToken = "", "", 0, 0
	list<ParsedToken> TokenStream = DummyParsedToken, nothing
	tailhack TokenStreamTail = TokenStream

	StringPool GlobalStringPool =
		BinaryTreeRoot<string>(nothing),
		Trie(0, nothing, 0),
		0

	
	integer PooledStringHandleForNothing = 0
	integer GlobalNothingCounter = 0
	
	TemplateArgument scratchtemplatearg = 0, ""
	list<TemplateArgument> scratchtemplateargs = scratchtemplatearg, nothing
	TemplateArgumentList scratchtemplatearglist = scratchtemplateargs
	list<TemplateArgumentList> ScratchTemplateArgumentStack = scratchtemplatearglist, nothing
	
	integer GlobalStructureCounter = 0
	integer GlobalSumTypeCounter = 0
	integer GlobalAliasCounter = 0
	integer GlobalWeakAliasCounter = 0
	
	
	SymbolEntry DummySymbolEntry = "", "", 0, 0
	list<SymbolEntry> KnownSymbols = DummySymbolEntry, nothing


	// Terrible hack until the compiler instantiates templated parameters correctly
	simplelist<boolean> TerribadHack = false, nothing

}


//
// Entry point of the Era IDE program
//
// This is the first code called once globals are initialized.
//
// Here we basically take care of setting up the UI and any other
// state that needs to be prepped for doing whatever programmery
// business the user is up to.
//
entrypoint :
{
	// TODO - clean up UI setup logic
	if(!cmdlineisvalid())
	{
		MessageBox(0, "Invalid command line specified; please check for mismatched quotes or other formatting problems.", "ERA Development Environment", MB_ICONEXCLAMATION)
		return()
	}
	
	integer ICC_TREEVIEW_CLASSES = 0x2
	integer ICC_STANDARD_CLASSES = 0x4000

	CommonControlInit ccinit = sizeof(ccinit), ICC_TREEVIEW_CLASSES + ICC_STANDARD_CLASSES
	if(!InitCommonControlsEx(ccinit))
	{
		MessageBox(0, "Failed to init common controls", "ERA Development Environment", MB_ICONEXCLAMATION)
	}

	integer IDI_ICON = 101
	integer COLOR_BTNFACE = 15
	integer SW_SHOWMAXIMIZED = 3
	integer ES_READONLY = 0x800
	integer ES_MULTILINE = 0x004
	integer ECM_SETCUEBANNER = 0x1501
	integer TVM_SETBKCOLOR = 0x1100 + 29
	integer TVM_SETTEXTCOLOR = 0x1100 + 30

	integer hInstance = GetModuleHandle(0)
	
	BrushBackground = CreateSolidBrush(0x7f5a4e)
	BrushActiveTab = CreateSolidBrush(0xffccc6)
	BrushDarkBackground = CreateSolidBrush(0x202020)

	WindowClass wc = sizeof(wc), 0, MainWindowProcedure, 0, 0, hInstance, LoadIcon(hInstance, IDI_ICON), LoadCursor(0, IDC_ARROW), BrushBackground, "", "ERAClass", 0
	integer16 fail = 0
	if(RegisterClassEx(wc) == fail)
	{
		MessageBox(0, "Failed to register primary application window class!", "ERA Development Enviroment", MB_ICONEXCLAMATION)
		return()
	}

	integer hMainMenuBar = LoadMenu(hInstance, 1000)

	integer hwnd = CreateWindowEx(0, "ERAClass", "ERA - Epoch Development Environment", WS_OVERLAPPEDWINDOW + 0x02000000, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, 0, hMainMenuBar, hInstance, 0)

	if(hwnd == 0)
	{
		MessageBox(0, "Failed to create primary application window!", "ERA Development Environment", MB_ICONEXCLAMATION)
		return()
	}
	
	MainHWND = hwnd
	

	Rect client = 0, 0, 0, 0
	GetClientRect(hwnd, client)

	integer ScintillaModule = LoadLibrary("SciLexer.DLL")

	
	if(cmdlinegetcount() > 1)
	{
		string filearg = cmdlineget(1)
		if((length(filearg) > 5) && (substring(filearg, length(filearg) - 5) == ".eprj"))
		{
			ParseProjectFile(filearg, CurrentProject)
		}
		else
		{
			CreateEditorTab(hwnd, filearg)
		}
	}
	else
	{
		CreateEditorTab(hwnd, "")
	}
	
	
	FontUIDefault = CreateFont(16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, "Segoe UI")
	FontMonospace = CreateFont(15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, "Consolas")
	FontUIMarlett = CreateFont(15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, "Marlett")

	HistoryHWND = CreateWindowEx(0, "Edit", "", 0x50a00000 + ES_READONLY + ES_MULTILINE, 0, 0, 100, 100, hwnd, WNDID_STATUS_HISTORY, hInstance, 0)
	SendMessage(HistoryHWND, WM_SETFONT, FontMonospace, 0)
	AppendHistoryLine("Era IDE Started")
	
	integer ProjectHWND = CreateWindowEx(0, "SysTreeView32", "ProjectTree", 0x50801007, 0, 0, 100, 100, hwnd, WNDID_PROJECT_TREEVIEW, hInstance, 0)
	SendMessage(ProjectHWND, TVM_SETBKCOLOR, 0, 0x202020)
	SendMessage(ProjectHWND, TVM_SETTEXTCOLOR, 0, 0xb0b0b0)
	
	integer projectroot = TreeViewAddItem(ProjectHWND, 0, "Project", PROJECT_TV_NODETYPE_STRUCTURE)
	integer coderoot = TreeViewAddItem(ProjectHWND, projectroot, "Source Code Files", PROJECT_TV_NODETYPE_STRUCTURE)
	integer resourceroot = TreeViewAddItem(ProjectHWND, projectroot, "Resource Files", PROJECT_TV_NODETYPE_STRUCTURE)
	integer optionsroot = TreeViewAddItem(ProjectHWND, projectroot, "Options", PROJECT_TV_NODETYPE_OPTIONS)
	
	AddTreeViewFiles(ProjectHWND, coderoot, CurrentProject.SourceFiles, PROJECT_TV_NODETYPE_SOURCECODE)
	AddTreeViewFiles(ProjectHWND, resourceroot, CurrentProject.ResourceFiles, PROJECT_TV_NODETYPE_RESOURCE)

	TreeViewExpand(ProjectHWND, projectroot)
	TreeViewExpand(ProjectHWND, coderoot)
	TreeViewExpand(ProjectHWND, resourceroot)
	
	ProjectTreeViewNodeSourceRoot = coderoot


	WindowClass tbwc = sizeof(tbwc), 0, ToolbarWindowProcedure, 0, 0, hInstance, 0, LoadCursor(0, IDC_ARROW), BrushBackground, "", "EraToolbarClass", 0
	if(RegisterClassEx(tbwc) == fail)
	{
		return()
	}


	WindowClass optswc = sizeof(optswc), 0, OptionsWindowProcedure, 0, 0, hInstance, 0, LoadCursor(0, IDC_ARROW), BrushBackground, "", "EraOptionsClass", 0
	if(RegisterClassEx(optswc) == fail)
	{
		return()
	}


	integer ToolbarHWND = CreateWindowEx(0, "EraToolbarClass", "", 0x50000000, 0, 0, 10, 10, hwnd, WNDID_TOOLBAR, hInstance, 0)
	integer FindBoxHWND = CreateWindowEx(0, "Edit", "", 0x50800000, 0, 0, 10, 10, ToolbarHWND, TOOLID_FIND_EDIT, hInstance, 0)
	integer FindButtonHWND = CreateWindowEx(0, "Button", "Go", 0x50008001, 0, 0, 10, 10, ToolbarHWND, TOOLID_FIND_BUTTON, hInstance, 0)

	SendMessage(FindBoxHWND, WM_SETFONT, FontMonospace, 0)
	SendMessage(FindButtonHWND, WM_SETFONT, FontUIDefault, 0)
	
	SendMessage(FindBoxHWND, ECM_SETCUEBANNER, 0, "Search")
	SetWindowSubclass(FindBoxHWND, FindBoxSubclassProc, 0, 0)

	WindowsAccelerators = LoadAccelerators(hInstance, 9000)
	

	ShowWindow(hwnd, SW_SHOWMAXIMIZED)

	SetTimer(hwnd, 1, 1000, 0)

	Point pt = 0, 0
	MessageInfo msg = 0, 0, 0, 0, 0, pt

	while(GetMessage(msg, 0, 0, 0) != 0)
	{		
		if(TranslateAccelerator(hwnd, WindowsAccelerators, msg) == 0)
		{
			TranslateMessage(msg)
			DispatchMessage(msg)
		}
	}
}


//
// Helper routine for pumping messages while a modal dialog is up
//
ModalDialogPump : integer dialoghwnd -> boolean active = true
{	
	Point pt = 0, 0
	MessageInfo msg = 0, 0, 0, 0, 0, pt

	while(true)
	{
		integer result = GetMessage(msg, 0, 0, 0)
		if(result == -1)
		{
			return()
		}
		
		if(msg.message == WM_QUIT)
		{
			active = false
			SendMessage(0, WM_QUIT, 0, 0)
			return()
		}

		TranslateMessage(msg)
		DispatchMessage(msg)

		if(!IsWindow(dialoghwnd))
		{
			active = false
			return()
		}
	}
}


//
// Helper routine for pumping messages while an external process is running
//
NonModalMessagePump : integer dialoghwnd -> boolean active = true
{	
	Point pt = 0, 0
	MessageInfo msg = 0, 0, 0, 0, 0, pt

	while(true)
	{
		integer result = PeekMessage(msg, 0, 0, 0, 1)
		if(result == 0)
		{
			return()
		}
		
		if(msg.message == WM_QUIT)
		{
			active = false
			SendMessage(0, WM_QUIT, 0, 0)
			return()
		}

		if(TranslateAccelerator(dialoghwnd, WindowsAccelerators, msg) == 0)
		{
			TranslateMessage(msg)
			DispatchMessage(msg)
		}

		if(!IsWindow(dialoghwnd))
		{
			active = false
			return()
		}
	}
}



//
// Editor helper - automatic indentation
//
PerformAutoIndent : integer hwnd
{
	integer SCI_GETCURRENTPOS = 2008
	integer SCI_GETLINE = 2153
	integer SCI_REPLACESEL = 2170

	integer editpos = SendMessage(hwnd, SCI_GETCURRENTPOS, 0, 0)
	integer line = SendMessage(hwnd, SCI_LINEFROMPOSITION, editpos, 0)

	if(line > 0)
	{
		integer len = SendMessage(hwnd, SCI_LINELENGTH, line - 1, 0)
		buffer prevline = len + 2

		SendMessage(hwnd, SCI_GETLINE, line - 1, prevline)

		string prevlinestr = widenfrombuffer(prevline, len)
		integer pos = 0

		boolean indent = true
		while(indent)
		{
			string ch = substring(prevlinestr, pos, 1)
			if((ch != " ") && (ch != unescape("\t")))
			{
				indent = false
			}
			else
			{
				++pos
			}
		}
		
		string suffix = ""
		if(len > 3)
		{
			if(substring(prevlinestr, len - 3, 1) == "{")
			{
				suffix = unescape("\t")
			}
		}

		if(pos > 0)
		{
			string indentprefix = substring(prevlinestr, 0, pos)
			buffer prefix = narrowstring(indentprefix ; suffix)
			SendMessage(hwnd, SCI_REPLACESEL, 0, prefix)
		}
		else
		{
			buffer narrowsuffix = narrowstring(suffix)
			SendMessage(hwnd, SCI_REPLACESEL, 0, narrowsuffix)
		}
	}
}

//
// Editor helper - automatic unindentation
//
PerformAutoUnindent : integer hwnd
{
	integer SCI_GETCURRENTPOS = 2008
	integer SCI_GETLINE = 2153
	integer SCI_SETTARGETSTART = 2190
	integer SCI_SETTARGETEND = 2192
	integer SCI_REPLACETARGET = 2194

	integer editpos = SendMessage(hwnd, SCI_GETCURRENTPOS, 0, 0)
	integer line = SendMessage(hwnd, SCI_LINEFROMPOSITION, editpos, 0)
	
	integer len = SendMessage(hwnd, SCI_LINELENGTH, line, 0)
	buffer linebuffer = len + 2

	SendMessage(hwnd, SCI_GETLINE, line, linebuffer)

	string linestr = widenfrombuffer(linebuffer, len)
	
	if(substring(linestr, 0, 1) == unescape("\t"))
	{
		buffer narrowempty = narrowstring("")

		SendMessage(hwnd, SCI_SETTARGETSTART, editpos - 2, 0)
		SendMessage(hwnd, SCI_SETTARGETEND, editpos - 1, 0)
		SendMessage(hwnd, SCI_REPLACETARGET, 0, narrowempty)
	}
}


//
// Helper for removing the path from a fully qualified filename
//
TrimFilePath : string fullpath -> string filename = ""
{
	integer lastslashpos = 0
	integer pos = 0
	
	while(pos < length(fullpath))
	{
		string ch = substring(fullpath, pos, 1)
		
		if(ch == "\")
		{
			lastslashpos = pos + 1
		}
		elseif(ch == "/")
		{
			lastslashpos = pos + 1
		}
		
		++pos
	}
	
	filename = substring(fullpath, lastslashpos)
}

//
// Helper for removing the filename from a path
//
TrimFileName : string filename -> string path = ""
{
	integer lastslashpos = 0
	integer pos = 0
	
	while(pos < length(filename))
	{
		string ch = substring(filename, pos, 1)
		
		if(ch == "\")
		{
			lastslashpos = pos + 1
		}
		elseif(ch == "/")
		{
			lastslashpos = pos + 1
		}
		
		++pos
	}
	
	path = substring(filename, 0, lastslashpos)
}


//
// Find the shortest relative path description that places
// "filename" in the correct location relative to "path".
//
MakePathRelative : string filename, string path -> string relative = ""
{
	// TODO - implement this correctly
	
	relative = TrimFilePath(filename)
}


//
// Format the current timestamp according to the user's locale settings
//
GetCurrentTimeFormatted : -> string ret = ""
{
	integer reqlen = GetTimeFormatEx(0, 0, 0, 0, 0, 0) + 1
	buffer timestr = reqlen * 2
	
	GetTimeFormatEx(0, 0, 0, 0, timestr, reqlen - 1)
	
	ret = cast(string, timestr)
}


//
// Helper for adding an item to a treeview control
//	
TreeViewAddItem : integer tvhwnd, integer hparent, string text, integer typeflag -> integer newhandle = 0
{
	integer TVIF_TEXT = 0x01
	integer TVIF_PARAM = 0x04
	integer TVIM_INSERTITEM = 0x1100 + 50
	
	TreeViewItem item = TVIF_TEXT + TVIF_PARAM, 0, 0, 0, text, 0, 0, 0, 0, typeflag, 0, 0, 0, 0, 0
	TreeViewInsert insert = hparent, 0, item
	
	newhandle = SendMessage(tvhwnd, TVIM_INSERTITEM, 0, insert)
}


//
// Helper for expanding a treeview node
//
TreeViewExpand : integer tvhwnd, integer node
{
	integer TVM_EXPAND = 0x1100 + 2
	integer TVE_EXPAND = 0x2
	SendMessage(tvhwnd, TVM_EXPAND, TVE_EXPAND, node)
}


//
// Helper for grabbing the current HINSTANCE of the running IDE
//
GetHInstance : -> integer hinstance = GetModuleHandle(0)



//
// Helper for adding a batch of named entries to a treeview
//
AddTreeViewFiles : integer tvhwnd, integer node, simplelist<string> ref filenames, integer typeflags
{
	if(filenames.value != "")
	{
		TreeViewAddItem(tvhwnd, node, filenames.value, typeflags)
	}
	
	AddTreeViewFiles(tvhwnd, node, filenames.next, typeflags)
}

AddTreeViewFiles : integer tvhwnd, integer node, nothing, integer typeflags




//
// Helper for history window
//
AppendHistoryLine : string text
{
	integer EM_SETSEL = 0xb1
	integer EM_REPLACESEL = 0xc2
	integer EM_LINESCROLL = 0xb6

	string fullline = GetCurrentTimeFormatted() ; ": " ; text ; unescape("\r\n")
	
	integer textlen = GetWindowTextLength(HistoryHWND)
	SendMessage(HistoryHWND, EM_SETSEL, textlen, textlen)
	SendMessage(HistoryHWND, EM_REPLACESEL, 0, fullline)
	SendMessage(HistoryHWND, EM_LINESCROLL, 0, 1)
}

ClearHistory :
{
	SetWindowText(HistoryHWND, "")
}





