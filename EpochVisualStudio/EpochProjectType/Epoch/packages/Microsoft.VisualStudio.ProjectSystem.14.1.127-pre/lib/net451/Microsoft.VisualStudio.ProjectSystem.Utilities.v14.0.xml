<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ProjectSystem.Utilities.v14.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AppliesToAttribute">
            <summary>
            Adds AppliesTo metadata to a MEF export to indicate where this export should be applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AppliesToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AppliesToAttribute"/> class.
            </summary>
            <param name="appliesToExpression">An expression that indicates where this export should be applied. The empty string signifies the export is always applied.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.AppliesToAttribute.AppliesTo">
            <summary>
            Gets the expression that indicates where this export should be applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource.#ctor(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource"/> class.
            </summary>
            <param name="sourceTypeIdentifier">The type of data exposed by this table. Usually a value from <see cref="T:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources"/>.</param>
            <param name="displayName">A human readable description of what this table contains. May be <c>null</c>.</param>
            <param name="hierarchy">The owning hierarchy for this table.</param>
            <param name="projectIdGuid">The ProjectID Guid, pre-boxed as a reference type to keep GC pressure down.</param>
            <param name="identifier">A persistent identifier that is coupled with the owner of the data source. Multiple instances of a data source with matching identifiers is allowed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource.DisplayName">
            <summary>
            Localized name to identify the source in any UI displayed to the user. Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource.Identifier">
            <summary>
            An identifier for this data source that can be used by others to recognize the data source later, even across sessions.
            </summary>
            <remarks>
            <para>This identifier cannot change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource.SourceTypeIdentifier">
            <summary>
            Identifier that describes the type of entries provided by this source (e.g. <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.CommentTableDataSource"/>)
            </summary>
            <remarks>
            <para>Different sources can have the same identifier (e.g. there could be multiple sources of <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.ErrorTableDataSource"/>).</para>
            <para>This identifier cannot change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource.Hierarchy">
            <summary>
            Gets the owning hierarchy for this table.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource.ProjectIdGuid">
            <summary>
            Gets the ProjectID Guid, pre-boxed as a reference type to keep GC pressure down.
            </summary>
            <remarks>
            This is intentionally typed as <see cref="T:System.Object"/> to prevent re-boxing
            of the value-type <see cref="T:System.Guid"/> every time the value is queried
            by <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry">
            <summary>
            A basic implementation of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> interface,
            supplying the necessary behavior to represent an individual entry in
            the tabular data service (i.e. the error list).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.SupportedColumnNames">
            <summary>
            The columns supported by this data source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.tableDataSource">
            <summary>
            The table data source to use for some common values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry"/> class.
            </summary>
            <param name="tableDataSource">The table data source to use for some common values.</param>
            <param name="id">An optional object that uniquely identifies this entry.</param>
            <param name="values">
            An optional set of values to return from <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/>.
            If <c>null</c> or empty, a derived-type is expected to override the
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.TryGetValue(System.String,System.Object@)"/> method to return data.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.Identity">
            <summary>
            Gets an optional object that uniquely identifies this entry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.Values">
            <summary>
            Gets the values to return from <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.TryGetValue(System.String,System.Object@)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves the value of some column based on the content of the
            dictionary originally supplied to the constructor or other
            common values obtained from the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableDataSource"/>.
            </summary>
            <param name="keyName">The name of the column whose value is to be retrieved.</param>
            <param name="content">Receives the value of the column.</param>
            <returns><c>true</c> if the column being queried is found and has a value; <c>false</c> otherwise.</returns>
            <remarks>
            Derived types may override this method, but should call the base method
            if the overriding method cannot supply a value for a column.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.CanSetValue(System.String)">
            <summary>
            Checks whether a column can have its value changed.
            </summary>
            <param name="keyName">The name of the column.</param>
            <returns><c>true</c> if the value can be changed; <c>false</c> otherwise.</returns>
            <remarks>
            The default implementation of this method always returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.TableEntry.TrySetValue(System.String,System.Object)">
            <summary>
            Changes the value of a column to the specified value, if supported.
            </summary>
            <param name="keyName">The name of the column.</param>
            <param name="content">The value to set the column to.</param>
            <returns><c>true</c> if the value was changed; <c>false</c> otherwise.</returns>
            <remarks>
            The default implementation of this method always returns <c>false</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.GlobalPropertiesHelper">
            <summary>
            Helper class used for common operations on global properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.GlobalPropertiesHelper.GlobalProjectCollectionPropertiesToCopy">
            <summary>
            The names of properties to copy down from the GlobalProjectCollection.GlobalProperties
            for builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.GlobalPropertiesHelper.ConstructGlobalProperties(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Constructs a map of global properties this provider would include in a build.
            </summary>
            <param name="globalPropertiesFromGlobalProjectCollection">The dictionary of global properties from the GlobalProjectCollection.</param>
            <param name="isSolutionBuildManagerPresent">The flag telling whether solution build manager is present.</param>
            <returns>A non-null map of properties.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase">
            <summary>
            Common base class for build manager hosts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.#ctor(Microsoft.VisualStudio.ProjectSystem.IThreadHandling)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.IsCancelable">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.ProjectCollection">
            <summary>
            Gets the CPS project collection to which this build manager host applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.ThreadHandling">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.JoinableTaskCollection">
            <summary>
            Gets the collection of outstanding JoinableTasks created by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.JoinableTaskFactory">
            <summary>
            Gets the joinable task factory that should be used for any
            switches to the main thread or for creating JoinableTasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.IsApplicableAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.Build(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.AlignBuildRequestNodeAffinities(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest},Microsoft.Build.Execution.BuildParameters)">
            <summary>
            Sets the required node affinities from all the individual build requests on the BuildParameters
            so that P2P jumps are all made to the appropriate nodes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Build.BuildManagerHostBase.ExecuteBuildAndNotifyRequestsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Notifies build requests that the build is about to begin, invokes an asynchronous delegate that executes the build,
            and notifies build requests of build completion.
            </summary>
            <param name="buildRequests">The build requests.</param>
            <param name="buildExecutionAsync">
            The async build execution delegate.  This <i>may</i> not be invoked
            if notifying build requests of the start of the build throws an exception.
            </param>
            <returns>A task whose completion signals that work is complete.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser">
            <summary>
            A project and service capability expression parser and evaluator.
            </summary>
            <devremarks>
            This is a struct rather than a class to avoid allocating memory unnecessarily.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.CapabilityExpressionParameterName">
            <summary>
            The parameter name to report as in error in thrown argument exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.symbolDefinedCheck">
            <summary>
            The function to call to check whether a specific symbol has been defined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.symbolDefinedCheckArgument">
            <summary>
            The value to pass to <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.symbolDefinedCheck"/> as the second argument.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.tokenizer">
            <summary>
            The tokenizer that reads the capability expression.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.#ctor(System.String,System.Func{System.String,System.Object,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser"/> struct.
            </summary>
            <param name="expression">The capability expression.</param>
            <param name="symbolDefinedCheck">The function to call to check whether a specific symbol has been defined.</param>
            <param name="symbolDefinedCheckArgument">The value to pass to <paramref name="symbolDefinedCheck"/> as the second argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Evaluate(System.String,System.Func{System.String,System.Object,System.Boolean},System.Object)">
            <summary>
            Checks whether a given capability expression matches against a given set of project or service capabilities.
            </summary>
            <param name="expression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="symbolDefinedCheck">The function to call to check whether a specific symbol has been defined.</param>
            <param name="symbolDefinedCheckArgument">The value to pass to <paramref name="symbolDefinedCheck"/> as the second argument.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.IsSymbolCharacter(System.Char)">
            <summary>
            Checks whether a given character is an allowed member of a capability term.
            </summary>
            <param name="ch">The character to test.</param>
            <returns>true if the character would be an allowed member of a capability term; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.OrTerm">
            <summary>
            Processes | operators.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.AndTerm">
            <summary>
            Processes &amp; operators.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Term">
            <summary>
            Processes capability terms.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Top">
            <summary>
            Processes the entire expression.
            </summary>
            <returns>The result of evaluating the expression.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer">
            <summary>
            The expression tokenizer.
            </summary>
            <devremarks>
            This is a struct rather than a class to avoid allocating memory unnecessarily.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.i">
            <summary>
            The current position within the expression.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.peeked">
            <summary>
            The most recently previewed token.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.input">
            <summary>
            The entire expression being tokenized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer"/> struct.
            </summary>
            <param name="input">The expression to parse.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.Input">
            <summary>
            Gets the entire expression being tokenized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.Position">
            <summary>
            Gets the position of the next token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.Next">
            <summary>
            Gets the next token in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.Peek">
            <summary>
            Peeks at the next token in the stream without skipping it on
            the next invocation of <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CapabilityExpressionParser.Tokenizer.Next"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.DisposeAction">
            <summary>
            An IDisposable that executes a delegate on disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.DisposeAction.disposeAction">
            <summary>
            The delegate to invoke upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.DisposeAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.DisposeAction"/> class.
            </summary>
            <param name="disposeAction">The delegate to invoke upon disposal.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.DisposeAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1">
            <summary>
            A common base class for project value data sources.
            </summary>
            <typeparam name="T">The type of value produced by this data source.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.disposableBag">
            <summary>
            A bag of values to be disposed of with this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1"/> class.
            </summary>
            <param name="joinableTaskContextNode">The JoinableTaskContext for task factories and collections.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.ProjectFaultHandlerService">
            <summary>
            Gets the project fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.JoinableCollection">
            <summary>
            Gets the collection of all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.JoinableFactory">
            <summary>
            Gets the factory to use for all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.Microsoft#VisualStudio#ProjectSystem#Designers#IJoinableProjectValueDataSource#Join">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.JoinUpstreamDataSources(Microsoft.VisualStudio.ProjectSystem.Designers.IJoinableProjectValueDataSource[])">
            <summary>
            Joins a set of data sources, arranging to disjoin them when this instance is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectValueDataSourceBase`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1">
            <summary>
            A base class for project value data sources that are derivatives of others.
            </summary>
            <typeparam name="T">The type of value produced by this data source.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.firstLink">
            <summary>
            The link to dispose of to terminate the dataflow.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.publicBroadcastBlock">
            <summary>
            The public broadcast block exposed by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.SourceBlock"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1"/> class.
            </summary>
            <param name="joinableTaskContextNode">The JoinableTaskContext for task factories and collections.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.SourceBlock">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ChainedProjectValueDataSourceBase`1.LinkExternalInput(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{`0}})">
            <summary>
            Links an external data source to this one.
            </summary>
            <param name="targetBlock">The block to which the upstream data source should be linked when ready for broadcast.</param>
            <returns>A value to dispose of to break the first link in the dataflow.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1">
            <summary>
            A thread-safe, enqueue-only queue that automatically discards older items.
            Used to help in bug investigations to find out what has happened recently.
            </summary>
            <typeparam name="T">The type of elements stored in the queue.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.queue">
            <summary>
            The underlying queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.capacity">
            <summary>
            The maximum length of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1"/> class.
            </summary>
            <param name="capacity">The maximum capacity of the queue, beyond which the oldest elements are dropped.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the log is enabled.
            If not enabled, enqueued items will be dropped.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.GetEnumerator">
            <summary>
            Enumerates the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.RollingLog`1.Enqueue(`0)">
            <summary>
            Adds an item to the head of the queue.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilterByLabel(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshot,System.String)">
            <summary>
            Filters an import tree snapshot to include only those imports that have a specified value for Label.
            </summary>
            <param name="snapshot">The import tree to filter.</param>
            <param name="label">The label that must be found on an Import or ImportGroup tag in order to include that import or those imports.</param>
            <returns>The filtered snapshot.</returns>
            <remarks>
            An import is selected by the filter if the Import tag or its parent ImportGroup tag has a Label attribute
            whose value matches <paramref name="label"/>, ignoring case.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.Flatten(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshot)">
            <summary>
            Applies some action on all imports of a snapshot.
            </summary>
            <param name="snapshot">The snapshot to recursively visit.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.RecursivelyProcessImports(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot,System.Action{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot})">
            <summary>
            Applies some action on all imports of a snapshot.
            </summary>
            <param name="importSnapshot">The root import to visit.</param>
            <param name="action">The action to perform on each visited import.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.Filter(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot,System.Func{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot,System.Boolean})">
            <summary>
            Filters an import sub-tree.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot">
            <summary>
            The filtered implementation of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot},System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot.Value">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot.DataSourceVersions">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot">
            <summary>
            The filtered implementation of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.ProjectPath">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.Label">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.GroupLabel">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.Imports">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSharedFoldersExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSharedFoldersExtensions.TryGetSharedFolderForPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot,System.String,System.String@,System.String@)">
            <summary>
            Translates a path into its shared folder and relative path, if applicable.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="path">The absolute or project-relative path to the file or folder being checked.</param>
            <param name="sharedFolderPath">Receives the absolute path to the shared folder, including trailing slash.</param>
            <param name="pathRelativeToSharedFolder">Receives the shared folder relative path to the original <paramref name="path"/>.</param>
            <returns><c>true</c> if a shared folder applies to <paramref name="path"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSharedFoldersExtensions.IsPathWithinAnySharedFolder(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot,System.String)">
            <summary>
            Checks if a path lies within a shared folder.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="path">The absolute or project-relative path to the file or folder being checked.</param>
            <returns><c>true</c> if a shared folder contains <paramref name="path"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSharedFoldersExtensions.IsProjectItemDefinedInASharedImport(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot,Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem)">
            <summary>
            Checks if a project item is defined in an imported shared project file.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="projectItem">The <c>IProjectItem</c> item being checked.</param>
            <returns><c>true</c> if the project item is defined in a shared import; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSharedFoldersExtensions.GetImportedProjectForSharedItemPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot,System.String)">
            <summary>
            Gets the path of the project that contains the shared item represented by the path.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="sharedItemPath">Path to the shared item.</param>
            <returns>Path to project file that contains the shared item represented by the path, null if there is no such project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException">
            <summary>
            An exception thrown when a project tree mutation fails.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.#ctor(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.ProjectPath">
            <summary>
            Gets the project whose tree is corrupted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.PriorTree">
            <summary>
            Gets the prior tree before it was mutated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.FreshTree">
            <summary>
            Gets the freshly generated tree that was used as the "correct" tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.MutatedTree">
            <summary>
            Gets the mutated tree that is believed to be incorrect.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.FaultedProvider">
            <summary>
            Gets the tree provider that faulted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCorruptionException.ToString">
            <summary>
            Renders the faulty and correct trees as a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint">
            <summary>
            A helper class for creating file rename related project change hints.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.RenamedFolderAsString">
            <summary>
            Represents a change that renames a directory related to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.RenamedFileAsString">
            <summary>
            Represents a change that renames a file related to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.RenamedFolder">
            <summary>
            Represents a change that renames a directory related to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.RenamedFile">
            <summary>
            Represents a change that renames a file related to the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="beforeAndAfterFiles">The full paths to the relevant files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="changeAlreadyOccurred">A value indicating whether this is a "catch-up" hint, and TrackProjectDocument events should be suppressed.</param>
            <param name="beforeAndAfterFiles">The full paths to the relevant files.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityRenameHint.RenamedFiles">
            <summary>
            Gets the full paths of the affected files, where the key is the old path and the value is the new path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources">
            <summary>
            Project data source constants and utility methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ActiveProjectConfiguration">
            <summary>
            Gets the Guid used to represent the data source that increments each time the active project configuration changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ConfiguredProjectVersion">
            <summary>
            The value of <see cref="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectVersion"/> at the time the value was produced.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.AdditionalRuleDefinitionsVersion">
            <summary>
            The Guid used to represent the data source that increments each time the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService"/> changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SharedImportSnapshotsVersion">
            <summary>
            The Guid used to represent the data source that increments each time any shared import file is modified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GlobalProjectCollectionGlobalProperties">
            <summary>
            The Guid used to represent the data source that increments each time a global property is changed on the GlobalProjectCollection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SolutionGlobalProperties">
            <summary>
            The Guid used to represent the data source that increments each time a global property changes that came from the solution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ExtensionRuleDefinitionsVersion">
            <summary>
            The Guid used to represent data from the ExtensionRuleDefinitionsService.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.IsSatisfiedBy(System.Collections.Immutable.IImmutableDictionary{System.Guid,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionRequirement},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions)">
            <summary>
            Gets a value indicating whether all data sources that went into the construction of a given tree snapshot
            are current or newer than a given map of required data source versions.
            </summary>
            <param name="versionRequirements">The map of data sources and required versions.</param>
            <param name="value">The snapshot to check data sources on.</param>
            <returns><c>true</c> if all data sources meet requirements; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ToRequirements(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions)">
            <summary>
            Translates a map of project value versions into a map of requirements for those values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GetSpecificVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Guid,System.IComparable,System.Boolean,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a project tree that satisfies specific data source version requirements.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="dataSourceKey">The specific data source whose specific version is sought.</param>
            <param name="dataSourceVersion">The specific version that is required.</param>
            <param name="allowMissingData">A value indicating whether the data source entirely missing is considered satisfactory.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GetSpecificVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Collections.Immutable.IImmutableDictionary{System.Guid,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionRequirement},System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a project tree that satisfies specific data source version requirements.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="versionRequirements">The version requirements of the resulting tree.</param>
            <param name="linkCreator">The function that forms the link between the source and target blocks. May be null to create a default link.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown (via the returned task) if <paramref name="cancellationToken"/> is canceled or <paramref name="valueSource"/> completes prior to supplying a qualifying value.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GetLatestVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GetLatestVersionAsync``1(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource{``0},Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GetLatestVersionAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate},Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="ruleNames">The names of the rules to retrieve from the snapshot.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SyncLinkTo(System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions},System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Jointly links several source blocks to a target block, taking care to ensure
            that any message posted to the target block carries a set of messages from the
            source blocks that are all based on the same version of backing data.
            </summary>
            <param name="sourceBlocks">The blocks to be joined.</param>
            <param name="target">The block to receive the joined messages.</param>
            <param name="linkOptions">The options to apply to the link to the target block.</param>
            <param name="cancellationToken">A cancellation token to cancel the link (without throwing InvalidOperationExceptions due to a project unload).</param>
            <returns>An object that may be disposed to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SyncLinkTo``4(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``1}},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``2}},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``3}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{System.Tuple{``0,``1,``2,``3}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <typeparam name="T3">The type of the value that comes from block <paramref name="source3"/>.</typeparam>
            <typeparam name="T4">The type of the value that comes from block <paramref name="source4"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="source3">A source block.</param>
            <param name="source4">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SyncLinkTo``3(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``1}},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``2}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{System.Tuple{``0,``1,``2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <typeparam name="T3">The type of the value that comes from block <paramref name="source3"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="source3">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SyncLinkTo``2(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``1}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{System.Tuple{``0,``1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SyncLinkOptions``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean)">
            <summary>
            Wraps a source block and some link options into a structure for convenient passing as
            an argument to one of the SyncLinkTo methods.
            </summary>
            <typeparam name="T">The type of data published by the source block.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="linkOptions">The link options (optional).  The default is for PropagateCompletion = true</param>
            <param name="initialDataAsNewForProjectSubscriptionUpdate">
            If <c>true</c>, causes the first IProjectSubscriptionUpdate message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first IProjectSubscriptionUpdate message at its default value of describing the project and its true prior state.
            </param>
            <returns>The block and link structure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.JoinUpstreamDataSources(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.Designers.IJoinableProjectValueDataSource[])">
            <summary>
            Links a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/> to a series of other <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/>s.
            </summary>
            <param name="factory">The factory whose tasks are automatically added to the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/> that should join the others in <paramref name="sources"/>.</param>
            <param name="faultHandlerService">The service to send any internal failures to.</param>
            <param name="sources">The data sources whose <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/>s are to be joined.</param>
            <returns>A value that may be disposed of to cancel the Join.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.GetSpecificVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a project tree that satisfies specific data source version requirements.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="matchTest">The function that determines whether a given value meets requirements.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.PostProcessProjectSubscriptionUpdate(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions[],System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions}},System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions})">
            <summary>
            Post process the received IProjectSubscriptionUpdate(s) based on what we ever submitted last time.
            - This method will filter out unwanted rules.
              We may receive more than we want. e.g. we specified 4 rules, but the received data contains 10 rules.
            - Normalize the first data.
              If "InitialDataAsNewForProjectSubscriptionUpdate" is true, this method will create a new "diff", by putting everything in added items.
              If "InitialDataAsNewForProjectSubscriptionUpdate" is false, this method will ensure an empty "diff" and an empty "before".
            - Smooth disruption diff.
              The "diff" of the received data may not reflect the actual "diff" comparing to the last submitted data, as some intermediate versioned data may be skipped.
              This method will regenerate the "diff" by comparing the received data to last submitted data.
            </summary>
            <param name="values">original versioned values, and will update the versioned IProjectSubscriptionUpdate value in place.</param>
            <param name="sourceBlocks">source blocks which produce the versioned values.</param>
            <param name="lastSubmittedValues">last submitted values, used to generate the smooth diff.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.CheckValidVersionProgression(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Boolean)">
            <summary>
            Verifies that important versioning rules always hold true.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException">Thrown if any errors are found.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.AreAllDataSourcesAtLeastAsNew(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Checks whether one data source map is at least as new as another.
            </summary>
            <param name="oldDataSourceVersions">The expected older data source.</param>
            <param name="dataSourceVersions">The expected newer data source.</param>
            <returns><c>true</c> if all entries in <paramref name="dataSourceVersions"/> have version numbers that are at least as new as those found in <paramref name="oldDataSourceVersions"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.CreateDataSourceVersionForwardOnlyFilteringBlock``1">
            <summary>
            Creates a dataflow propagator block that filters out messages that do not conform to the expected data source version incrementing flow.
            </summary>
            <typeparam name="T">The type of project versioned value this block propagates.</typeparam>
            <returns>A new propagator block.</returns>
            <remarks>
            This block generally is simply a pass-through block. But if an observed value has data source versions that are older
            than a previously observed value, that value is quietly dropped. The expectation is that another value with a more recent
            data source version will appear shortly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.AddVersionVerifierBlock``1(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}},System.Boolean)">
            <summary>
            Links to the specified broadcast block and reports certain inconsistencies in the progression of data source versions.
            </summary>
            <typeparam name="T">The type of versioned data being produced.</typeparam>
            <param name="sourceBlock">The broadcast block. It is important that this be a broadcast block to avoid this verifier block stealing messages from other recipients.</param>
            <param name="unconfiguredProjectLevel">
            <c>true</c> if the values produced by the block are expected to contain <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ActiveProjectConfiguration"/>
            any time it contains <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ConfiguredProjectVersion"/>; <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.CreateVersionVerifierPropagatorBlock``1(System.Boolean)">
            <summary>
            Creates a propagator block that reports certain inconsistencies in the progression of data source versions.
            </summary>
            <typeparam name="T">The type of versioned data being produced.</typeparam>
            <param name="unconfiguredProjectLevel">
            <c>true</c> if the values produced by the block are expected to contain <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ActiveProjectConfiguration"/>
            any time it contains <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ConfiguredProjectVersion"/>; <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.TryFindOlderVersion(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions[],System.Int32@)">
            <summary>
            Searches for inconsistencies in versions of a shared data sources between multiple values.
            </summary>
            <param name="values">The values whose versions are to be checked for consistency.</param>
            <param name="minimumIndex">When the method returns <c>true</c>, this parameter receives the index to the older of two compared values.</param>
            <returns><c>true</c> if an inconsistency was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.EnumerateProjectConfigurationFirst(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Enumerates the elements in a map, such that if an element with key <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.ActiveProjectConfiguration"/>
            is present, it will be guaranteed to enumerate first.
            </summary>
            <param name="map">The map to enumerate.</param>
            <returns>An partly ordered enumerable.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink`1">
            <summary>
            A simple wrapper around a source block and link options.
            </summary>
            <typeparam name="T">The type of values produced by the source block.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink`1.SourceBlock">
            <summary>
            Gets or sets the source block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink`1.LinkOptions">
            <summary>
            Gets or sets the link options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.SourceBlockAndLink`1.InitialDataAsNewForProjectSubscriptionUpdate">
            <summary>
            If <c>true</c>, causes the first IProjectSubscriptionUpdate message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first IProjectSubscriptionUpdate message at its default value of describing the project and its true prior state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.VersionAndObservedIndex">
            <summary>
            A tuple that describes a data source version and the index into a value array where it was observed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.VersionAndObservedIndex.#ctor(System.IComparable,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.VersionAndObservedIndex"/> struct.
            </summary>
            <param name="version">The version of the data source.</param>
            <param name="firstObservedIndex">The index of the first block observed to have this version.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.VersionAndObservedIndex.Version">
            <summary>
            Gets the version of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.VersionAndObservedIndex.FirstObservedIndex">
            <summary>
            Gets the index of the first block observed to have this version.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException">
            <summary>
            An exception that describes an invalid progress of project data source version metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.#ctor(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.OldDataSourceVersions">
            <summary>
            Gets the prior data source versions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.NewDataSourceVersions">
            <summary>
            Gets the proposed new data source versions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.ToString">
            <summary>
            Returns a description of the error causing this exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectDataSources.DataSourceRegressionException.DumpToString(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Dumps the version table to a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSubscriptionUpdate">
            <summary>
            Default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSubscriptionUpdate.#ctor(System.Collections.Immutable.IImmutableDictionary{System.String,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription},Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSubscriptionUpdate"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSubscriptionUpdate.ProjectChanges">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSubscriptionUpdate.CurrentState">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectSubscriptionUpdate.ProjectConfiguration">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeDataSources">
            <summary>
            Common data sources for project trees, and checking version information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeDataSources.BaseTreeGeneration">
            <summary>
            The base tree's generation number.  Useful when waiting on non-project altering changes such as toggling
            Show All Files view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeDataSources.ReferencesFolderProjectSnapshotVersion">
            <summary>
            The References folder.  Useful when waiting for project changes to appear in the tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeDataSources.DirectoryTreeGeneration">
            <summary>
            The "show all files" project directory tree provider.  Useful when waiting for a particular file system event
            to appear in the tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeDataSources.ProjectSnapshotBasedDataSources">
            <summary>
            Gets the set of all data sources that are dependent upon the project snapshot version, that are defined by this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeDataSources.GetGenerationRequirement(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot})">
            <summary>
            Obtains a description of the version of the specified tree snapshot for use in checking whether that version
            is present somewhere downstream.
            </summary>
            <param name="treeGeneration">The tree snapshot obtained from the tree provider that is required on the UI thread.</param>
            <returns>A map containing the base tree data source key and the generation number obtained from the snapshot.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase">
            <summary>
            Bare functionality thought to be common to all project tree providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.initialActiveConfiguredProjectExports">
            <summary>
            The source for a task whose result is the configuredProjectExports field as it is origiinally initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.configuredProjectExportsRequired">
            <summary>
            A value indicating whether tree mutating functions require non-null configured project exports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.disposableBag">
            <summary>
            A bag of values to dispose of when this instance is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.treeUpdateSubmissionBlock">
            <summary>
            A block that receives functions that perform tree updates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.treeBlockPublic">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Tree"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.treeGenerationNumber">
            <summary>
            The number of trees produced by this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.configuredProjectExports">
            <summary>
            CPS services from the active configured project.  May be null initially, but once initialized will never be null.
            </summary>
            <remarks>
            This is private to reduce the chance that code that executes over time will query this property multiple times
            which would open it to a potential race condition with the UI thread changing the active configured project
            during execution.
            Instead, callers should merely snag the ActiveConfiguredProject&lt;T&gt;.Value property's value
            as a local variable and use that in order to ensure a consistent operation.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.activeConfiguredProjectLink">
            <summary>
            The link to dispose of to terminate updates of the active configured project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.joinableTaskCollection">
            <summary>
            Gets the collection that all async tasks spawned by this instance belong to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.joinableTaskFactory">
            <summary>
            Gets the factory to use for all async tasks spawned by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.#ctor(Microsoft.VisualStudio.ProjectSystem.IThreadHandling,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase"/> class.
            </summary>
            <param name="threadHandling">The thread handling service.</param>
            <param name="unconfiguredProject">The unconfigured project that this instance is associated with.</param>
            <param name="configuredProjectExportsRequired">
            A value indicating whether tree mutating functions require non-null configured project exports.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate">
            <summary>
            A definition for the method signature required for updating the project tree.
            </summary>
            <param name="projectTree">The current version of the project tree (the one prior to the beginning mutation).</param>
            <param name="configuredProjectExports">
            Exports available from the currently active configured project.  Never <c>null</c> unless the constructor
            was called with configuredProjectExportsRequired=false.
            </param>
            <param name="cancellationToken">A token whose cancellation indicates lost interest in this update.</param>
            <returns>A task whose result is the tree update.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Tree">
            <summary>
            Gets the current <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#Designers#IProjectValueDataSource{Microsoft#VisualStudio#ProjectSystem#Designers#IProjectTreeSnapshot}#DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#Designers#IProjectValueDataSource{Microsoft#VisualStudio#ProjectSystem#Designers#IProjectTreeSnapshot}#DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#Designers#IProjectValueDataSource{Microsoft#VisualStudio#ProjectSystem#Designers#IProjectTreeSnapshot}#SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeGeneration">
            <summary>
            Gets the generation number for the most recently submitted tree change request.
            </summary>
            <remarks>
            This generation may exceed the currently published tree's generation, when a tree change
            has been requested but has not yet been processed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ProjectFaultHandlerService">
            <summary>
            Gets the fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ImportingProjectErrorReporting">
            <summary>
            Gets the Watson error reporting service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ProjectErrorReporting">
            <summary>
            Gets the Watson error reporting service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.UnconfiguredProjectAsynchronousTasksService">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.UnconfiguredProject">
            <summary>
            Gets the unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ProjectSubscriptionService">
            <summary>
            Gets the subscription service for source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ProjectTreeModifiers">
            <summary>
            Gets the collection of project tree modifier imports from the UnconfiguredProject scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeFactory">
            <summary>
            Gets the tree factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ActiveConfiguredProjectProvider">
            <summary>
            Gets the active configured project provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ThreadHandling">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.JoinableTaskFactory">
            <summary>
            Gets the factory to use for JoinableTasks in this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ActiveConfiguredProject">
            <summary>
            Gets the active ConfiguredProject, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.InitialActiveConfiguredProjectAvailable">
            <summary>
            Gets a task that is complete when the first active configuration is known.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.DefaultCancellationToken">
            <summary>
            Gets the cancellation token to use for tree updates when one is not given when the tree update request is submitted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.OriginalTreeGenerated">
            <summary>
            Gets a value indicating whether the initial tree has been published.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project for which a tree is currently being constructed or mutated.
            </summary>
            <remarks>
            This property should only be called from within a project tree mutating method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.CurrentConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project that is currently active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.FindByPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.GetPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.RenameAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.CanCopy(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.CanRemove(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.RemoveAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.GetAddNewItemDirectory(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#Designers#IJoinableProjectValueDataSource#Join">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.JoinUpstreamDataSources(Microsoft.VisualStudio.ProjectSystem.Designers.IJoinableProjectValueDataSource[])">
            <summary>
            Joins this instance to a collection of data sources so that data sources that may require
            the main thread can acquire it if someone joins this instance.
            </summary>
            <param name="sources">The data sources for this instance.</param>
            <remarks>
            This method may be called multiple times.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Initialize">
            <summary>
            Initializes this tree provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateOnlyAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur, but only if a previous tree exists.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Int64@,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Guid,System.IComparable,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSource">The source that was updated, leading to the regeneration of the tree.</param>
            <param name="updatedSourceVersion">The new version of the updated data source.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Int64@,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur and joins the task.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="skipIfNoPriorTree"><c>true</c> if this update should only be executed if a previous tree will be handed to the updating method.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.PrepublishMutationAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Provides derived classes with an opportunity to further mutate a tree before any publish step.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.NewTree(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="filePath">The file path for the node.  Expected to be non-null for nodes representing file system objects not in a project.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.NewTree(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="children">The children items</param>
            <param name="filePath">The file path for the node.  Expected to be non-null for nodes representing file system objects not in a project.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="browseObjectProperties">The properties to expose for this node.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="children">The children items</param>
            <param name="browseObjectProperties">The properties to expose for this node.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ApplyExtensionModifications(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports)">
            <summary>
            Applies modifications to the tree that extensions specify.
            </summary>
            <param name="tree">The tree to modify.</param>
            <param name="previousTree">The root of the previous tree before the latest mutation.</param>
            <param name="configuredProjectExports">The values for the active configured project.</param>
            <returns>The result of the tree's modifications.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.VerifyThrowTreeHistoryPreserved(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeModifier)">
            <summary>
            Verifies that a tree modifier did not destroy history, which would cause problems later.
            </summary>
            <param name="originalTree">The unmodified tree.</param>
            <param name="modifiedTree">The modified tree.</param>
            <param name="offender">The modifier instance that is guilty if the trees are not related.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.VerifyValidTree(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Performs some validation on the tree to provide some early detection of bugs.
            </summary>
            <param name="tree">The tree to validate.</param>
            <param name="oldTree">The prior tree that is being replaced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ActiveConfiguredProjectProviderChanged(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject})">
            <summary>
            Responds to changes in which configured project is activated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.UpdateTreeForActiveConfigurationChange(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot,Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Updates the project tree based on a change in the active project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.RenewBrowseObjectPropertiesPerConfiguration(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog,Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports)">
            <summary>
            Updates an individual project tree node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.BrowseObjectProperties"/> property, if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.GetActiveConfiguredProjectExports(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Gets the exports from the active configured project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.GetActiveConfiguredProjectExports``1(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Gets the exports from the active configured project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.SubmitTreeUpdateHelperAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Int64@,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="skipIfNoPriorTree"><c>true</c> if this update should only be executed if a previous tree will be handed to the updating method.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission">
            <summary>
            The details of an asynchronous request for a tree update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Int64,Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable},System.Threading.CancellationToken,System.Threading.Tasks.TaskCompletionSource{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.UpdateFunction">
            <summary>
            Gets the function that receives the current tree and returns the updated tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.GenerationNumber">
            <summary>
            Gets the generation number for this tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.ConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project that was active at the time this update request was submitted.
            If null, at runtime the consumer should use the value of
            initialActiveConfiguredProjectExports.Result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.UpdatedDataSources">
            <summary>
            Gets the map of any updated data sources and their versions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.CancellationToken">
            <summary>
            Gets the cancellation token for this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateSubmission.PublishCompletedTaskSource">
            <summary>
            Gets a task source that should be completed after the tree has been published.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateResult">
            <summary>
            The result of a tree update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateResult.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.Boolean,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateResult.Tree">
            <summary>
            Gets the new tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateResult.LazyFill">
            <summary>
            Gets a value indicating whether newly added nodes to the tree should *not* cause expansion and selection to automatically occur.
            </summary>
            <remarks>
            TODO Dev14: remove this property, which TreeServce no longer uses.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.TreeUpdateResult.UpdatedSources">
            <summary>
            Gets the map of any updated data sources and their versions, that are beyond anything
            submitted in the original tree update submission.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports">
            <summary>
            Describes services collected from the active configured project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.syncObject">
            <summary>
            A lock object to protect data integrity of this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.ruleNameToItemType">
            <summary>
            A cache of rule names to item types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.PropertyPagesDataModelProvider">
            <summary>
            Gets the property pages data model provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.ConfiguredProjectAsynchronousTasksService">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.ConfiguredProject">
            <summary>
            Gets the configured project to which this tree provider applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.RuleFactory">
            <summary>
            Gets the rule factory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.ProjectTreeModifiers">
            <summary>
            Gets the collection of project tree modifier imports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.GetRuleForItem(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot)">
            <summary>
            Gets an IRule to attach to a project item so that browse object properties will be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeProviderBase.ConfiguredProjectExports.GetItemTypeFromRuleName(System.String,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot,System.Boolean)">
            <summary>
            Gets the item type for a given rule.
            </summary>
            <param name="ruleName">The name of the rule to get an item type for.</param>
            <param name="catalogs">The catalog snapshot to use to find the item type.</param>
            <param name="allowNull">Whether or not to allow a null result for a missing or malformed rule.</param>
            <returns>The matching item type.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot">
            <summary>
            A default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot.Tree">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot.TreeProvider">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot.PopulatingConfiguredProject">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeSnapshot.LazyFill">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>
            </summary>
            <remarks>
            TODO Dev14: remove this property, which TreeServce no longer uses.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionedValue`1">
            <summary>
            An immutable implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1"/>.
            </summary>
            <typeparam name="T">The type of value being represented.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionedValue`1.#ctor(`0,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionedValue`1"/> class.
            </summary>
            <param name="value">The project versioned value.</param>
            <param name="dataSourceVersions">The versions of the data sources that went into the production of this value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionedValue`1.Value">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionedValue`1.DataSourceVersions">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardBuildDataflowLinkOptions">
            <summary>
            Describes targets to subscribe to when linking to a SourceBlock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardBuildDataflowLinkOptions.targets">
            <summary>
            The targets that are included in the design time build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardBuildDataflowLinkOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardBuildDataflowLinkOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardBuildDataflowLinkOptions.Targets">
            <summary>
            Gets or sets the set of targets that should be included in the design-time build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardBuildDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardRuleDataflowLinkOptions">
            <summary>
            Dataflow block link options that include rule names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardRuleDataflowLinkOptions.ruleNames">
            <summary>
            These are the rule names associated with these link options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardRuleDataflowLinkOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardRuleDataflowLinkOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardRuleDataflowLinkOptions.RuleNames">
            <summary>
            Gets or sets the rule names associated with these link options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.StandardRuleDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement">
            <summary>
            Describes a version requirement for a particular data source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.#ctor(System.IComparable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement"/> class.
            </summary>
            <param name="version">The version required of the data source.</param>
            <param name="allowMissingData">A value indicating whether no data at all from a data source is considered out of date data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.Version">
            <summary>
            Gets the version required of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.AllowMissingData">
            <summary>
            Gets a value indicating whether no data at all from a data source is considered out of date data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.op_Equality(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement,Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement)">
            <summary>
            Returns true if two versions are identical.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.op_Inequality(Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement,Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement)">
            <summary>
            Returns true if two versions are not equal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.ToString">
            <summary>
            Writes this instance as a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.Equals(System.Object)">
            <summary>
            Returns true if two TreeDataSourceVersionRequirement's are equal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectVersionRequirement.GetHashCode">
            <summary>
            Returns the versions' hashcode.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeDescription">
            <summary>
            A simple implementation of the immutable <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeDescription.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeDescription"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeDescription.Before">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeDescription.Difference">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeDescription.After">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint">
            <summary>
            A helper class for creating file-related project change hints.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.AddedFileAsString">
            <summary>
            Represents a change that adds a file to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.EditedFileAsString">
            <summary>
            Represents a change that edits a file inside the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectOnlyAsString">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectAndStorageAsString">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.AddedFolderAsString">
            <summary>
            Represents a change that adds a folder to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectOnlyAsString">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectAndStorageAsString">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.AddedFile">
            <summary>
            Represents a change that adds a file to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.EditedFile">
            <summary>
            Represents a change that edits a file inside the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectOnly">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectAndStorage">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.AddedFolder">
            <summary>
            Represents a change that adds a folder to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectOnly">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectAndStorage">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="files">The full paths to the relevant files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="changeAlreadyOccurred">A value indicating whether this is a "catch-up" hint, and TrackProjectDocument events should be suppressed.</param>
            <param name="files">The full paths to the relevant files.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeFileSystemEntityHint.Files">
            <summary>
            Gets the full paths of the affected files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase">
            <summary>
            A convenient base class for building project change hint types.
            </summary>
            <remarks>
            Derived types should be immutable and thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase.#ctor(System.Guid,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase"/> class.
            </summary>
            <param name="kind">The kind of hint being created.</param>
            <param name="project">The unconfigured project that the hint relates to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase.#ctor(System.Guid,System.Boolean,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase"/> class.
            </summary>
            <param name="kind">The kind of hint being created.</param>
            <param name="changeAlreadyOccurred">A value indicating whether this is a "catch-up" hint, and TrackProjectDocument events should be suppressed.</param>
            <param name="project">The unconfigured project that the hint relates to.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase.Kind">
            <summary>
            Gets a unique identifier for the kind of hint this instance represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase.ChangeAlreadyOccurred">
            <summary>
            Gets a value indicating whether the change being hinted has already occurred.
            </summary>
            <remarks>
            A <c>true</c> value here suggests that the hint-author is helping to "catch up" to changes made
            by a third party. Therefore if this is <c>true</c>, IVsTrackProjectDocument events should not be raised
            when processing hints whose value for this property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintBase.UnconfiguredProject">
            <summary>
            Gets the project that was changed that this hint describes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintKindAttribute">
            <summary>
            Causes the decorated part to activate and receive notifications regarding project change hints of a given kind.
            </summary>
            <devremarks>
            Dev15 TODO: Make this attribute internal, as we'd prefer most folks to use the
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintService.Subscribe(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver,System.Collections.Generic.IEnumerable{System.Guid})"/> method instead so that we don't
            activate parts before they need notifications.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintKindAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintKindAttribute"/> class.
            </summary>
            <param name="hintKindGuid">The string representation of the GUID that identifies the kind of change the listener is interested in.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectChangeHintKindAttribute.ProjectChangeHintKind">
            <summary>
            Gets the kind of change the listener is interested in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/> producers and manipulators.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.IsRoot(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Checks whether the given node is a root node in its tree.
            </summary>
            <param name="node">The node to test.</param>
            <returns><c>true</c> if the node is the root node; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.GetProjectPropertiesContext(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> instance that describes the location of the MSBuild item that backs a given project tree node.
            </summary>
            <param name="node">The node to get the MSBuild item for.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.GetSelfAndDescendentsBreadthFirst(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Walks a project tree starting at a given node, using a breadth-first search pattern.
            </summary>
            <param name="root">The node at which to begin the search.</param>
            <returns>A sequence of the given node, and all its descendents.  The given node always comes first in the sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.GetSelfAndDescendentsDepthFirst(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Walks a project tree starting at a given node, using a depth-first search pattern.
            </summary>
            <param name="root">The node at which to begin the search.</param>
            <returns>A sequence of the given node, and all its descendents.  The given node does NOT come first in the sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.UpdateSelfAndAllDescendents(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.Func{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Walks a project tree starting at a given node and updates every node using the provided function.
            </summary>
            <param name="tree">The node at which to begin updating.</param>
            <param name="updateAction">The function that returns the new node. If no replacement should be made, either the tree that was passed in or null may be returned.</param>
            <returns>The new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.WithFollowingChildren(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Returns the union of a given set of project tree nodes and their immediate children nodes
            that include the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.FollowsParent"/> capability (recursively).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.GetAncestry(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets all the ancestor nodes for a given node.
            </summary>
            <param name="leaf">The tree node to get the ancestry for.</param>
            <returns>A sequence of steps starting at the given node's parent, and ending with the root node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.DescendsFrom(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets a value indicating whether a project tree node is a descendent of some other given node.
            </summary>
            <param name="leaf">Some leaf node.</param>
            <param name="candidateAncestor">A node that may be in the line between <paramref name="leaf"/> and its root.</param>
            <returns><c>true</c> if the <paramref name="candidateAncestor"/> is an ancestor of <paramref name="leaf"/>; or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.SplitRepositionedToDeleteAdd(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff})">
            <summary>
            Takes a list of project tree change descriptions and transforms single repositioning changes to remove/add change pairs.
            </summary>
            <param name="deltas">The changes to parse.</param>
            <returns>All the changes given in <paramref name="deltas"/>, with the few matching diff objects changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.SplitChangeToDeleteAdd(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff},System.Boolean)">
            <summary>
            Takes a list of project tree change descriptions and transforms single changes to remove/add change pairs.
            </summary>
            <param name="deltas">The changes to parse.</param>
            <param name="onlySplitRenames"><c>true</c> to only split changes to remove/adds if the node was renamed.</param>
            <returns>All the changes given in <paramref name="deltas"/>, with the few matching diff objects changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.SortRootToLeaf(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Sorts a set of project tree changes so that those changes which impact closer to the root of the tree
            appear earlier in the sequence than those that describe changes to distant leaves.
            </summary>
            <param name="deltas">A sequence of changes.</param>
            <param name="referenceTree">The "new" tree, at the end of the deltas sequence.</param>
            <returns>A sorted sequence of changes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.FilterOutChangesBelowVisibilityChanges(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Filters out any tree changes that describe nodes that fall beneath another node whose visibility is also changing.
            This must be called on a sorted sequence (the result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.SortRootToLeaf(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)"/>).
            </summary>
            <param name="deltas">The sequence of changes to filter.</param>
            <param name="oldTree">The prior tree.</param>
            <param name="newTree">The "new" tree, at the end of the deltas sequence.</param>
            <returns>A sequence of changes with some deltas removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.IsVisible(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Checks whether this tree and all its ancestors are visible.
            </summary>
            <param name="tree">The tree to confirm visbility on.</param>
            <returns><c>true</c> if this tree and all its ancestors are visible; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.GetPreviousVisibleSibling(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets the previous visible sibling for a given node, assuming all ancestors are visible.
            </summary>
            <param name="node">The node whose sibling is sought.</param>
            <returns>The prior sibling, or <c>null</c> if this node has no prior siblings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.WithFollowingChildren(System.Collections.Immutable.ImmutableHashSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Returns the union of a given set of project tree nodes the specified node's immediate children nodes
            if they include the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.FollowsParent"/> capability (recursively).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff">
            <summary>
            A simple implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff"/> for use by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.SplitRepositionedToDeleteAdd(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff})"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff"/> class.
            </summary>
            <param name="change">The value for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.Change"/> property.</param>
            <param name="nodeIdentity">The value for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.NodeIdentity"/> property.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.Change">
            <summary>
            Gets the kind of change made to the alterered node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.NodeIdentity">
            <summary>
            Gets the leaf node impacted by this change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.NodeChange">
            <summary>
            Gets the kinds of changes made to node if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.ProjectTreeDiff.Change"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind.Replaced"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.TreeChangeSort">
            <summary>
            A project tree change comparer that puts changes closer to the root of the tree closer to the front of the sequence.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.TreeChangeSort.referenceTree">
            <summary>
            The project tree used to calculate node positions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.TreeChangeSort.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.TreeChangeSort"/> class.
            </summary>
            <param name="referenceTree">The project tree used to calculate node positions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeExtensions.TreeChangeSort.Compare(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff)">
            <summary>
            Compares two project tree change descriptions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities">
            <summary>
            String constants that may appear in <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.EmptyCapabilities">
            <summary>
            An empty set of project tree capabilities with the case-insensitive comparer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.ProjectRoot">
            <summary>
            Indicates that this node is the root project node.
            </summary>
            <remarks>
            This is useful for <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeModifier"/> extensions so they know which node is actually the root one,
            since all nodes look like root nodes at the time they are being modified.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.ReferencesFolder">
            <summary>
            Indicates that this node is the well-known "References" folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.AppDesignerFolder">
            <summary>
            Indicates that this node is the special project Properties folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.Reference">
            <summary>
            Indicates that this item represents a reference (e.g. Assembly, COM, or Project reference).
            </summary>
            <remarks>
            This capability should only appear on <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> instances.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.ResolvedReference">
            <summary>
            Indicates that this item is a reference that has been successfully resolved.
            </summary>
            <remarks>
            This capability should only appear on <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> instances.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.BrokenReference">
            <summary>
            Indicates that this item is a reference that failed to resolve.
            </summary>
            <remarks>
            This capability should only appear on <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> instances.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.SharedProjectImportReference">
            <summary>
            Indicates that this item represents a shared project import shown along with references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.SourceFile">
            <summary>
            Indicates that this item represents a source file (e.g. *.cs, *.resx, *.bmp) that is included in the build.
            </summary>
            <remarks>
            This capability should only appear on <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> instances.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.Folder">
            <summary>
            Indicates that this item represents a folder on disk, and may contain sub-items that can be manipulated by the user.
            </summary>
            <remarks>
            This capability may appear on any <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/> instance.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.SharedFolder">
            <summary>
            Indicates that this item represents a folder on disk that is mounted inside this project as a shared folder.
            </summary>
            <remarks>
            This capability may appear on any <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/> instance.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.SharedItemsImportFile">
            <summary>
            Indicates that this item represents the Shared.items file that is imported into this project
            in order to add a shared folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.SaveSharedFolderWithSharedItemsImportFile">
            <summary>
            Indicates that this item that represents a Shared.items file that is imported into this project
            will save the dirty contents of the shared folder along with saving the Shared.items file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.DisableAddItemFolder">
            <summary>
            Indicates that this item represents a folder on disk that cannot be a drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.DisableAddItemRecursiveFolder">
            <summary>
            Indicates that this item represents a folder on disk that cannot be a drop target.
            Sub-folders of the folder also cannot be a drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.FileOnDisk">
            <summary>
            Indicates that this item represents a file on disk (not a folder, and not a virtual node), and the file is not missing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.FileSystemEntity">
            <summary>
            Indicates that this item represents a file or folder on disk (not a virtual node).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.BubbleUp">
            <summary>
            Indicates that this item should appear near the top of its containing list with other similarly tagged nodes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.NestedProject">
            <summary>
            Indicates that this item represents a nested project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.IncludeInProjectCandidate">
            <summary>
            Indicates that this item does not exist in the project, but does exist on disk and might be included in the project later.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.VisibleOnlyInShowAllFiles">
            <summary>
            Indicates that this item's visibility is paired with the Show All Files toggle switch.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.AlwaysInvisible">
            <summary>
            Indicates that this item should never be visible (even in Show All Files).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.HiddenProjectItem">
            <summary>
            Indicates a project item which is marked as hidden.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.HiddenIncludeInProjectCandidate">
            <summary>
            Indicates that this item does not exist in the project, but does exist on disk and might be included in the project later,
            but that the file entity on disk is marked as hidden in the file system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.NonMemberItem">
            <summary>
            Indicates that this item may not exist in the project but implies nothing about includability into a project.
            </summary>
            <remarks>
            Node providers can use this capability to claim responsibility for resolving a node to a path
            if path resolution fails because the node is not a project item.  SDK references are an example.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.AlwaysCopyable">
            <summary>
            Indicates that this item should always be copyable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.FollowsParent">
            <summary>
            Indicates that this item should be implicitly copied, moved, or dragged whenever its immediate parent is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Designers.ProjectTreeCapabilities.VirtualFolder">
            <summary>
            Indicates that this item is a virtual folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableValue`1">
            <summary>
            A disposable wrapper with some value.
            </summary>
            <typeparam name="T">The type of value to make available.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableValue`1.disposableValue">
            <summary>
            Extra data to dispose of with the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableValue`1.#ctor(`0,System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableValue`1"/> class.
            </summary>
            <param name="value">The value to expose to the caller.</param>
            <param name="disposableValue">An additional value to dispose of when this instance is disposed of.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableValue`1.Dispose">
            <summary>
            Disposes of the value and any related data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportPropertyXamlRuleDefinitionAttribute">
            <summary>
            Creates export metadata that describes where to find a XAML resource that deserializes
            into a <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> object.
            The actual value exported is never used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportPropertyXamlRuleDefinitionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportPropertyXamlRuleDefinitionAttribute"/> class.
            </summary>
            <param name="xamlResourceAssemblyName">The full name of the assembly that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>.</param>
            <param name="xamlResourceStreamName">
            The name of the assembly manifest stream that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            in its XAML-serialized form.
            </param>
            <param name="context">
            A semicolon-delimited list of property page catalogs that should include the Rule.
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts"/> for names of common catalogs.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportPropertyXamlRuleDefinitionAttribute.XamlResourceAssemblyName">
            <summary>
            Gets the full name of the assembly that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportPropertyXamlRuleDefinitionAttribute.XamlResourceStreamName">
            <summary>
            Gets the name of the assembly manifest stream that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            in its XAML-serialized form.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportPropertyXamlRuleDefinitionAttribute.Context">
            <summary>
            Gets a semicolon-delimited list of property page catalogs that should include the Rule.
            </summary>
            <value>See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts"/> for names of common catalogs.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportVsProfferedProjectServiceAttribute">
            <summary>
            Exports a service to be proffered by the service provider returned from
            IVsProject.GetItemContext when VSConstants.VSITEMID_Root is passed in.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportVsProfferedProjectServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportVsProfferedProjectServiceAttribute"/> class.
            </summary>
            <param name="serviceGuid">The identifier by which the service is proferred.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportVsProfferedProjectServiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportVsProfferedProjectServiceAttribute"/> class.
            </summary>
            <param name="serviceType">The type whose <see cref="P:System.Type.GUID"/> property is the identifier for the service.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportVsProfferedProjectServiceAttribute.ServiceGuid">
            <summary>
            Gets the identifier by which the service is proffered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.IAppliesToMetadataView">
            <summary>
            A contract on export metadata to discover where an export should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.IAppliesToMetadataView.AppliesTo">
            <summary>
            Gets the expression that indicates where this export should be applied.
            </summary>
            <remarks>
            This property does not have the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> applied to it,
            which has the effect of automatically filtering out exports that are missing this export metadata.
            All exports should include this metadata so that they are applied to the appropriate projects.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.IDebugLaunchProviderMetadataView">
            <summary>
            Metadata that project system debuggers should include.
            </summary>
            <remarks>
            See also the ExportDebuggerAttribute in the utilities assembly.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.IDebugLaunchProviderMetadataView.DebuggerName">
            <summary>
            Gets the name of the debugger that should match with the debugger name as found
            in the XAML file that describes the debugger's properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.ExportDebuggerAttribute">
            <summary>
            Marks a class as a MEF export and indicates what type of debugger is launched.
            </summary>
            <remarks>
            See also <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.IDebugLaunchProviderMetadataView"/>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.ExportDebuggerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.ExportDebuggerAttribute"/> class.
            </summary>
            <param name="debuggerName">The name of the debugger that a provider is prepared to serve.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.ExportDebuggerAttribute.DebuggerName">
            <summary>
            The name of the debugger that a provider is prepared to serve.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase">
            <summary>
            A convenient base class for CPS debugger providers.
            </summary>
            <remarks>
            Derived classes may override the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/> method
            in order to add extra behavior when actually launching the debugger.
            Throwing <see cref="T:System.NotImplementedException"/> from <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.QueryDebugTargetsCountAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>
            and <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/> is acceptable if <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>
            is also overridden to give the proprietary behavior that is incompatible with the debugger structs.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.DeploymentPackage">
            <summary>
            The GUID of the deployment package.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.ServiceProvider">
            <summary>
            Gets the Visual Studio global IServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.ThreadHandling">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.ConfiguredProject">
            <summary>
            Gets the Configured Project to which this debugger applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.VsHierarchies">
            <summary>
            Gets the IVsHierarchies implementation.
            </summary>
            <value>The project node.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.VsHierarchy">
            <summary>
            Gets the project IVsHierarchy that is launching the process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.QueryDebugTargetsCountAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugQueryTarget"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugQueryTarget"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.CanLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            Gets whether the debugger can launch in the current configuration.
            </summary>
            <param name="launchOptions">
            The launch options that would be passed to a subsequent call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>.
            </param>
            <remarks>
            This method may be called at any time and the implementation should be fast enough to
            perform well if called every time the UI is updated (potentially several times per second).
            Implementers SHOULD NOT rely on this method being called directly before a call to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>.  No state should be saved within this method to be used
            by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            Launches the project's target executable (or some other configured process)
            and optionally attaches a debugger to it.
            </summary>
            <param name="launchOptions">
            A set of default launch options that can be used to initialize each <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings"/> instance.
            These options may be customized by the particular debug launch implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if the debugger cannot start.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetDebuggerStruct(Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugLaunchSettings)">
            <summary>
            Copy information over from the contract struct to the native one.
            </summary>
            <returns>The native struct.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetDebuggerStruct4(Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugLaunchSettings)">
            <summary>
            Copy information over from the contract struct to the native one.
            </summary>
            <returns>The native struct.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.FreeDebuggerStruct(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2)">
            <summary>
            Frees memory allocated by <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetDebuggerStruct(Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugLaunchSettings)"/> to initialize members within a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.FreeDebuggerStruct(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4)">
            <summary>
            Frees memory allocated by <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetDebuggerStruct(Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugLaunchSettings)"/> to initialize members within a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.CopyStructArrayToIntPtr``1(``0[],System.IntPtr,System.Int32@)">
            <summary>
            Copies an array of structures to a native memory address.
            </summary>
            <typeparam name="T">The type of structure to copy.</typeparam>
            <param name="list">The list of structures to copy.</param>
            <param name="nativeArrayPointer">The address to copy the structures to.  The allocated memory at this address must be at least <c>.SizeOf(typeof(T)) * list.Length</c></param>
            <param name="initializedStructures">A 0-initialized local variable that will receive the number of
            elements actually copied and initialized.  This should be the variable passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.DestroyStructArray``1(System.IntPtr,System.Int32)"/>.</param>
            <remarks>
            We use a <c>ref</c> parameter instead of <c>out</c> or a return value because no matter how an exception
            might be thrown from this method, we must indicate to the caller what must be destroyed in order to avoid a memory leak.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.DestroyStructArray``1(System.IntPtr,System.Int32)">
            <summary>
            Frees memory blocks allocated as part of a prior call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.CopyStructArrayToIntPtr``1(``0[],System.IntPtr,System.Int32@)"/>.
            </summary>
            <typeparam name="T">The type passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.CopyStructArrayToIntPtr``1(``0[],System.IntPtr,System.Int32@)"/> earlier.</typeparam>
            <param name="structArray">The pointer to the first element in the native structure array that was allocated before.</param>
            <param name="arrayLength">The number of elements in the structure array.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.VS.Debuggers.IDebugLaunchSettings[])">
            <summary>
            Launches a Visual Studio debugger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetLaunchResult(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetProcessInfo)">
            <summary>
            Converts a VS launch result into a managed-friendly one.
            </summary>
            <param name="processInfo">The process launch info provided from the VS debugger.</param>
            <returns>The managed-friendly luanch result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetSerializedEnvironmentString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.GetGuidBytes(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Collects an array of GUIDs into an array of bytes.
            </summary>
            <remarks>
            The order of the GUIDs are preserved, and each GUID is copied exactly one after the other in the byte array.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchResult">
            <summary>
            Describes a debugger-launched process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchResult.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchResult"/> class.
            </summary>
            <param name="creationTime">The creation time of the process.</param>
            <param name="processId">The process ID.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchResult.CreationTime">
            <summary>
            Gets the launch time of the process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchProviderBase.LaunchResult.ProcessId">
            <summary>
            Gets the launched process ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerProperties">
            <summary>
            Property manipulation routines commonly needed by debugger providers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerProperties.PropertySerializer">
            <summary>
            A serializer capable of reading types from the property system commonly relevant to debuggers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerProperties.CreateReader(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader"/> class that is prepared
            to read properties from a given dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerProperties.AddSymbolPath(Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings,System.String)">
            <summary>
            Adds the PDBSEARCHPATH parameter to the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Options"/> property.
            </summary>
            <param name="info">The <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings"/> whose Options property should be appended to.</param>
            <param name="symbolsPath">A custom symbols path to pass to the debugger.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines">
            <summary>
            A set of common functions for both internal and external debuggers.
            </summary>
            <remarks>
            This class should contain only references to types that are externally visible,
            so that this file can be easily compiled into external assemblies.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.ManagedLegacyEngine">
            <summary>
            The Legacy Debugger Engine this would be added to AdditionalDebuggerEngines in DebugLaunchSettings
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.SqlEngine">
            <summary>
            The SQL debug engine that may be added to other debuggers optionally.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.NativeOnlyEngine">
            <summary>
            The native-only debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.ManagedOnlyEngine">
            <summary>
            The managed-only debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.MixedNativeAndManagedEngine">
            <summary>
            The managed and native debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.ScriptEngine">
            <summary>
            The script-only debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.GPUDebugEngine">
            <summary>
            Guid for REF GPU Debug Engine in Concord (default)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.ManagedCoreEngine">
            <summary>
            The Core Clr debug engine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerEngines.GetDebugEngineAsync(Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType,System.Lazy{Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService},System.String)">
            <summary>
            Attempts to find the appropriate debug engine GUID for a given <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType">
            <summary>
            The various types of debuggers (managed, native, etc.).
            </summary>
            <remarks>
            Designed to look like Microsoft.VisualStudio.VCProjectEngine.TypeOfDebugger.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.NativeOnly">
            <summary>
            A native-only debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.ManagedOnly">
            <summary>
            A managed-only debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.Mixed">
            <summary>
            A managed + native debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.Auto">
            <summary>
            The debugger may be native, managed, or both depending on the debuggee.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.Script">
            <summary>
            A script debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.GPUOnly">
            <summary>
            A GPU only debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.NativeWithScript">
            <summary>
            A native + script debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.ManagedCore">
            <summary>
            Managed core debugger
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebuggerType.NativeWithManagedCore">
            <summary>
            Native + Managed Core debugger
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings">
            <summary>
            A structure that a CPS debugger provider must fill out to fire up a debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.additionalDebugEngines">
            <summary>
            Backing for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.AdditionalDebugEngines"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.environment">
            <summary>
            Backing for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Environment"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.#ctor(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.LaunchOperation">
            <summary>
            specifies how this process should be launched or attached
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.dlo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.LaunchOptions">
            <summary>
            launch flags that were passed to IVsDebuggableProjectCfg::Launch
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.LaunchFlags.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.AppPackageLaunchInfo">
            <summary>
            Gets information required to start/launch Windows Store apps.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.LaunchDebugEngineGuid">
            <summary>
            guid of debug engine used for launch, (DLO_CreateProcess)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidLaunchDebugEngine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.AdditionalDebugEngines">
            <summary>
            Collection of debug engine guids.  Should not include the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.LaunchDebugEngineGuid"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.PortSupplierGuid">
            <summary>
            port supplier guid
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidPortSupplier.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.PortName">
            <summary>
            name of port from above supplier (NULL is fine)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrPortName.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.RemoteMachine">
            <summary>
            NULL for local machine, or remote machine name
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrRemoteMachine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.CurrentDirectory">
            <summary>
            current directory (DLO_CreateProcess)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrCurDir.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Executable">
            <summary>
            The name of the executable
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrExe
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Arguments">
            <summary>
            specifies how this process should be launched or attached
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrArg
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Environment">
            <summary>
            Get the dictionary for environment variables to set in the debuggee.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrEnv.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Options">
            <summary>
            custom options, specific to each guidLaunchDebugEngine.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrOptions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.StandardInputHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdInput.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.StandardOutputHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdOutput.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.StandardErrorHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdError.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.SendToOutputWindow">
            <summary>
            if TRUE, stdout and stderr will be routed to the output window
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.fSendToOutputWindow.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.ProcessId">
            <summary>
            process id (DLO_AlreadyRunning)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.dwProcessId.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Unknown">
            <summary>
            interface pointer - usage depends on DEBUG_LAUNCH_OPERATION
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.pUnknown.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.Project">
            <summary>
            The project that is launching the debuggee process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DebuggerProviders.DebugLaunchSettings.ProcessLanguageGuid">
            <summary>
            Language of the hosting process. Used to preload EE's
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidProcessLanguage.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.IMultipleNamedExportMetadataView">
            <summary>
            An interface that describes metadata on named exports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.IMultipleNamedExportMetadataView.Name">
            <summary>
            Gets the "Name" metadata for this export.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3">
            <summary>
            An ordered import collection that optionally filters based on project capabilities and performs
            a transform on the list any time the set of filtered exports changes.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
            <typeparam name="TMetadata">The metadata interface for the export.</typeparam>
            <typeparam name="TProcessed">The type of the data, post processing.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3.processor">
            <summary>
            The processor to run when the filtered set of exports changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3.processedValue">
            <summary>
            A cache of the most recently processed value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3.#ctor(System.Func{System.Collections.Generic.IReadOnlyList{System.Lazy{`0,`1}},`2},Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
            <param name="processor">The processor to run to transform the list of exports.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3.ProcessedValue">
            <summary>
            Gets the processed value for the current set of filtered exports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3.OnRecomputingSnapshot(System.Collections.Immutable.ImmutableList{System.Lazy{`0,`1}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProcessedOrderPrecedenceImportCollection`3.OnCommitSnapshot(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportDynamicEnumValuesProviderAttribute">
            <summary>
            Exports a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesProvider"/> extension to CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportDynamicEnumValuesProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportDynamicEnumValuesProviderAttribute"/> class.
            </summary>
            <param name="category">The category that describes the type of enum values the provider will generate.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportDynamicEnumValuesProviderAttribute.Category">
            <summary>
            Gets the category that describes the type of enum values the provider will generate.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute">
            <summary>
            Exports <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProvider"/> with the supported metadata.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute.PageTemplatesSeparator">
            <summary>
            The separator characters usable in the constructor's pageTemplates parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute"/> class.
            </summary>
            <param name="pageTemplates">A semicolon-delimited list of the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate"/> values that this factory provider can produce factories for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute.SupportsItemSpecificView">
            <summary>
            Gets or sets a value indicating whether this provider is interested in hearing about property page displays
            for file specific views (i.e., at least one project item is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute.SupportsProjectSpecificView">
            <summary>
            Gets or sets a value indicating whether this provider is interested in hearing about property page displays
            for the project level view (i.e., a project is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute.SupportsPropertySheetSpecificView">
            <summary>
            Gets or sets a value indicating whether this provider is interested in hearing about property page displays
            for the property sheet level view (i.e., a property sheet is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.ExportPropertyPageUIFactoryProviderAttribute.PageTemplates">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate"/> values that this factory provider can produce factories for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts">
            <summary>
            Well known property page (rule) contexts as they may appear in .targets files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts.File">
            <summary>
            Rules that apply at a per-item level, or at the project level to apply defaults to project items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts.Project">
            <summary>
            Rules that apply only at the project level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts.PropertySheet">
            <summary>
            Rules that apply only to property sheets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts.ProjectSubscriptionService">
            <summary>
            Rules that are invisible except for purposes of programmatic subscribing to project data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageContexts.BrowseObject">
            <summary>
            Rules that describe properties that appear in the Properties tool window
            while an item is selected in Solution Explorer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl">
            <summary>
            PropertyPageControl
            </summary>
            <remarks>This class is NOT MT safe</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.parent">
            <summary>
            Parent factory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.hostWindow">
            <summary>
            The Property Page Window containing this control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIWindow,Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.HelpInfo">
            <summary>
            Defined by all property page controls.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.HostWindow">
            <summary>
            SettingsPage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.ParentFactory">
            <summary>
            Project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.ContextObjects">
            <summary>
            Gets the set of project objects that are selected for this property page viewing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.System#IServiceProvider#GetService(System.Type)">
            <summary>
            see IServiceProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.Activate(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.Apply">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.Deactivate">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.GetPageInfo(Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.Help(System.String)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.IsPageDirty">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.Microsoft#VisualStudio#OLE#Interop#IPropertyPage#Move(Microsoft.VisualStudio.OLE.Interop.RECT[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.SetObjects(System.UInt32,System.Object[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.SetPageSite(Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.Show(System.UInt32)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.SetObjectsInternal(System.UInt32,System.Object[])">
            <summary>
            SetObjects helper
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.GetDialogFont">
            <summary>
            GetDialogFont helper
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageControl.CreatePropertyGrid">
            <summary>
            CreatePropertyGrid helper
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase">
            <summary>
            Implements base class behavior of IPropertyPageUIFactory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.pageId">
            <summary>
            Page Id
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.pageName">
            <summary>
            Page name (unlocalized)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.displayPageName">
            <summary>
            Page name (localized)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.pageOrder">
            <summary>
            page order in PP viewer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.groupName">
            <summary>
            Parent folder name (unlocalized)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.displayGroupName">
            <summary>
            Parent folder name - this is the localized tool name i.e. "C/C++"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.groupOrder">
            <summary>
            rule order in PP viewer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.#ctor(System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase"/> class
            without grouping
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.#ctor(System.Guid,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase"/> class
            with grouping
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.PageId">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.PageOrder">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.GroupOrder">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.Name">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.GroupName">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.DisplayName">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.DisplayGroupName">
            <summary>
             see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.ServiceProvider">
            <summary>
            The VS provided service provider (ie what the package obtains via SetSite)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.ProjectService">
            <summary>
            Gets or sets the project service.
            </summary>
            <value>The project service.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.ShellServices">
            <summary>
            Hosting shell services
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.ThreadHandling">
            <summary>
            Gets or sets the thread handling service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.PropertyPageUIFactoryBase.CreateControl(Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIWindow)">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo">
            <summary>
            Represents the help information on a property page property in various formats.
            </summary>
            <remarks>
            Some or all of these help properties could be null/empty.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.F1Keyword">
            <summary>
            The F1 keyword.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.HelpUrl">
            <summary>
            The help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.HelpFile">
            <summary>
            The help keyword. Goes with <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.HelpContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.HelpContext">
            <summary>
            The help context. Goes with <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyPages.HelpInfo.HelpFile"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions">
            <summary>
            Extension methods usable by image monikers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.SyncObject">
            <summary>
            Lock that protects access to <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.InteropToProjectMap"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.InteropToProjectMap">
            <summary>
            An interning collection of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.ToInteropType(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Converts a ProjectImageMoniker to an interop ImageMoniker.
            </summary>
            <param name="moniker">The moniker to convert</param>
            <returns>An interop image moniker</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.ToProjectSystemType(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Converts an interop ImageMoniker to a ProjectImageMoniker.
            </summary>
            <param name="interopMoniker">The moniker to convert</param>
            <returns>A project image moniker</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.InteropMonikerEqualityComparer">
            <summary>
            Class used for performant comparisons of interop ImageMonikers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.InteropMonikerEqualityComparer.Equals(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImageMonikerExtensions.InteropMonikerEqualityComparer.GetHashCode(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase">
            <summary>
            A base class for global property providers that produce a map of properties that never changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.targetBlock">
            <summary>
            The block to post to for broadcasts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.publicBlock">
            <summary>
            The backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.SourceBlock"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContextNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.SourceBlock">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.GetGlobalPropertiesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StaticGlobalPropertiesProviderBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector">
            <summary>
            A helper for checking for and recovering from stomped SynchronizationContexts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector.initialSyncContext">
            <summary>
            The SynchronizationContext captured when the struct was initialized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector"/> struct.
            </summary>
            <param name="initialSyncContext">The SynchronizationContext to watch for deviations from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector.Start">
            <summary>
            Initializes the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector"/> struct by snapping the current SynchronizationContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector.EnsureIntegrity">
            <summary>
            Checks that the SynchronizationContext is still at its snapped value.
            If it is not, an assertion failure is raised and the problem is corrected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SyncContextProtector.Dispose">
            <summary>
            Checks the SynchronizationContext one last time.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync">
            <summary>
            A base class that offers asynchronous thread-safe initialization and disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.initializeTrigger">
            <summary>
            The task that represents the initialization operation.
            </summary>
            <remarks>
            This lazy should *only* be triggered (initially anyway) by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.InitializeAsync(System.Threading.CancellationToken)"/> method,
            since it orchestrates some surrounding scheduling as well.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.initializationCompletionEvent">
            <summary>
            An event that must be signaled after the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.initializeTrigger"/> lazy value factory has completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.disposeTrigger">
            <summary>
            The task that represents the disposing operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.disposingToken">
            <summary>
            A token that is canceled when disposing starts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContextNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.IsDisposing">
            <summary>
            Gets a value indicating whether this instance is being disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is being initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized (and has not yet been disposed).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.JoinableCollection">
            <summary>
            Gets the collection of all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.JoinableFactory">
            <summary>
            Gets the factory to use for all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.InitializationCompletion">
            <summary>
            Gets the task that completes when initialization has completed.
            It does *not* guarantee that initialization has even begun, and does not Join the initialization effort.
            </summary>
            <remarks>
            This is for a very specific case of someone within the initializer wanting to fork
            off execution of something that might call <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.InitializeAsync(System.Threading.CancellationToken)"/>.
            To avoid an exception from <see cref="M:Microsoft.VisualStudio.Threading.AsyncLazy`1.GetValueAsync(System.Threading.CancellationToken)"/> due to
            alleged recursion into the value factory, we need to wait for the value factory to complete
            before proceeding.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.DisposeAsync">
            <summary>
            Disposes of this instance asynchronously unless disabled by derived type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes this instance if it has not yet been.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates that the caller no longer is interested in the result.
            Note that this will not cancel the initialization (since other callers may exist).
            But this token will result in an expediant cancellation of the returned Task,
            and a dis-joining of any <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/> that may have occurred as a result of this call.
            </param>
            <remarks>
            This method throws an exception if it is called from within the Initialize() method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.InitializeCoreAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="cancellationToken">A token whose cancellation indicates that disposal of this instance has been requested.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposedAsync.DisposeCoreAsync(System.Boolean)">
            <summary>
            Disposes of managed and unmanaged resources owned by this instance.
            </summary>
            <param name="initialized">A value indicating whether this instance had been previously initialized.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.IOrderPrecedenceMetadataView">
            <summary>
            Provides a view at an export's metadata that declares its own preferred precedence order among a collection of similar exports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.IOrderPrecedenceMetadataView.OrderPrecedence">
            <summary>
            Gets the precedence order, where higher numbers generally are interpreted to mean more preferred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities">
            <summary>
            A collection of useful functions operating on MSBuild projects, items, etc.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.ValueSeparatorChar">
            <summary>
            The char used to separate distinct elements in an MSBuild value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.ValueSeparatorCharArray">
            <summary>
            The semicolon as the only member of a char array.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.DefiningProjectFullPath">
            <summary>
            The built-in metadata for items whose value is the full path to the project file that actually defines the item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.ValueSeparatorCharString">
            <summary>
            The char used to separate distinct elements in an MSBuild value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.SharedImportLabel">
            <summary>
            The label to use for recognizing the ImportElement of the Shared.items file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.DimensionNameInConditionRegex">
            <summary>
            matches $(name) pattern
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.builtInMetadataNames">
            <summary>
            A cache of the names of built-in metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.BuiltInItemMetadataNames">
            <summary>
            Gets an enumeration of all MSBuild built-in item metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.GetProjectItems(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds all items in an evaluated project with a given item type and unevaluated include.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="unevaluatedInclude"> The unevaluated value of the item. </param>
            <returns> All matching items, if there is atleast one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.IsBuiltInItemMetadataName(System.String)">
            <summary>
            Checks whether a given metadata name is one of MSBuild's built-in item metadata names.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.GetProjectItemsByUnevaluatedInclude(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds all items in an evaluated project with a given item type and unevaluated include.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="unevaluatedInclude"> The unevaluated value of the item. </param>
            <returns> All matching items, if there is atleast one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.GetProjectItemsByEvaluatedInclude(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds all items in an evaluated project with a given item type and evaluated include.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="evaluatedInclude"> The evaluated value of the item. </param>
            <returns> All matching items, if there is atleast one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.GetFirstProjectItemByEvaluatedInclude(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds the first item in an evaluated project with a given item type and evaluated include (if any).
            </summary>
            <param name="project">The project.</param>
            <param name="itemType"> The item type. </param>
            <param name="evaluatedInclude"> The evaluated value of the item. </param>
            <returns> The first matching item, if there is at least one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.DimensionalValuePairsToCondition(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Converts configuration dimensional value vector to a msbuild condition
            Use the standard format of
            '$(DimensionName1)|$(DimensionName2)|...|$(DimensionNameN)'=='DimensionValue1|...|DimensionValueN'
            </summary>
            <param name="dimensionalValues">vector of configuration dimensional properties</param>
            <returns>msbuild condition representation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.ConditionToDimensionValues(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)">
            <summary>
            Oposite to DimensionalValuePairsToCondition. Tries to parse an MSBuild condition to a dimensional vector
            only matches standard pattern:
            '$(DimensionName1)|$(DimensionName2)|...|$(DimensionNameN)'=='DimensionValue1|...|DimensionValueN'
            </summary>
            <param name="condition">msbuild condition string</param>
            <param name="dimensionalValues">configuration dimensions vector (output)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.AreDimensionalVectorsEqual(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Check if two dimensional vectores are equal. i.e both keys nd values are the same
            </summary>
            <param name="left">dimensional property vector </param>
            <param name="right">dimensional property vector </param>
            <returns>true if the vectors are equal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.AreConditionsEqual(System.String,System.String)">
            <summary>
            Check if two MSBuild conditions are the same. i.e all keys and values are same irrespective of the order. Returns false
            if either one of them is not in the format of an MSBuild condition.
            </summary>
            <param name="left"> Figuratively speaking, the left MSBuild condition in the comparision </param>
            <param name="right">Figuratively speaking, the right MSBuild condition in the comparision </param>
            <returns>true if the conditions are equal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.ComposeExistsCondition(System.String)">
            <summary>
            Composes an MSBuild exists condition for a given path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.HasEffectiveCondition(Microsoft.Build.Construction.ProjectElement,System.String)">
            <summary>
            Checks if the effective condition of an element matches the given condition.
            </summary>
            <remarks> The effective condition of an element is simply the AND of its condition with
            all its ancestor's conditions. An accurate check for the effective condition involves
            building an expression tree, minimizing it and then comparing, which we don't support.
            We just assume that the matching condition is present wholly on either the element or ATLEAST one ancestor.
            For a non-empty condition, this checks to see that the element or ATLEAST
            one of its ancestors has a matching condition. In other words the element and all its ancestors
            have no condition or exactly this condition. For an empty condition, this checks to see that the element
            and ALL of its ancestors has empty condition. </remarks>
            <param name="element"> The project element. Cannot be null. </param>
            <param name="condition"> An MSBuild condition. </param>
            <returns> true, if the element has the given condition effectively. Else, false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.SetMetadata(Microsoft.Build.Construction.ProjectItemElement,System.String,System.String)">
            <summary>
            Sets a piece of metadata on an MSBuild Item.
            </summary>
            <param name="itemXml">The item whose metadata is to be manipulated.</param>
            <param name="name">The name of the metadata to set.</param>
            <param name="value">The value of the metadata.  Use <see cref="F:System.String.Empty"/> to explicitly clear it.  Must not be null.</param>
            <remarks>
            If the metadata already exists on the item, the last definition of it is replaced.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.DeleteMetadata(Microsoft.Build.Construction.ProjectItemElement,System.String)">
            <summary>
            Deletes all instances of the named metadata, if it exists.
            </summary>
            <param name="itemXml">The item whose metadata is to be manipulated.</param>
            <param name="name">The name of the metadata to delete.</param>
            <returns><c>true</c> if the metadata was defined and deleted; <c>false</c> if the metadata was not defined.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.GetMetadataValue(Microsoft.Build.Construction.ProjectItemElement,System.String)">
            <summary>
            Gets the value of a named piece of metadata.
            </summary>
            <param name="itemXml">The item whose metadata is to be retrieved.</param>
            <param name="name">The name of the metadata whose value is to be retrieved.</param>
            <returns>The value of the named metadata; or <c>String.Empty</c> if the metadata is not defined.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.GetImmutableSnapshot(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Gets an snapshot of an ITaskItem.
            </summary>
            <param name="item">The item to clone.</param>
            <returns>The item and its metadata.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.UnquoteString(System.String@)">
            <summary>
            Unquote string. It simply removes the starting and ending "'", and checks they are present before.
            </summary>
            <param name="s">string tu unquote </param>
            <returns>true if string is successfuly unquoted</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MSBuildUtilities.InitializeBuiltInMetadataNames">
            <summary>
            Discovers the set of MSBuild built-in metadata names.
            </summary>
            <returns>A collection of the built-in metadata names.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonSharedProjectFileCategoryName">
            <summary>
            Common Category Name strings for use with the ISharedProjectFileRegistrationService.
            </summary>
            <remarks>
            Note: This is not claiming to be the complete list of all possible Category Names.
                  Category names are extensible.
            IN VISUAL STUDIO: Category Names are any string defined by a project system used for classifying
            the role of imported project files. Category names do not need to be predifined at install time;
            they can be genrated at runtime. Projects that use dynamic category names (e.g. based on the names of
            project configurations (e.g. "Debug|x86"), are expected to call RegisterDynamicSharedProjectFileCategoriesAsync.
            This method allows the system to cleanup of stale persisted file use category data. If the project uses
            such names that are user defined and can be added/removed, then it should call RegisterDynamicSharedProjectFileCategoriesAsync
            after it has finished calling RegisterSharedProjectFilesAsync for all of its categories.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonSharedProjectFileCategoryName.SharedItemsImports">
            <summary>
            Category Name to be used when registering Mercury Shared.items files with the ISharedProjectFileRegistrationServcie.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException">
            <summary>
            Exception class for problems renaming a file/folder to an existing one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder">
            <summary>
            Methods for dealing with ordering of top-level elements in VC manifest and property sheets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.VCManifestOrderTemplate">
            <summary>
            The project ordering for a VC++ project manifest file captured as a skeletal MSBuild file.
            Note that a particular element in the project order template does not include a condition in
            its definition. In other words, we could have two project elements that match a top-level
            elements in the template below and yet have different conditions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.VCPropertySheetOrderTemplate">
            <summary>
            The project ordering for a VC++ property sheet file captured as a skeletal MSBuild file.
            DEV11DESIGNDISCUSSION (pavana) : Come up with a simple and elegant way for specifying ordering templates. One
            way we could solve this problem is to have a class called IProjectDefinitionOrder which contains child IProjectDefinition and each such definition
            has a method called matches. This way, we don't have to worry about doing the matching ourselves. Another idea is to just have the IProjectDefinitionOrder
            with two members - a Count member and a MatchesWithDefinition(int i).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.projectOrderTemplateElementsCache">
            <summary>
            A cache of results computed from the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetProjectOrderTemplateElementsAsync(Microsoft.Build.Evaluation.ProjectCollection,Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.TemplateType,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)"/> method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.TemplateType">
            <summary>
            The type of template to use for determining element order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.TemplateType.Manifest">
            <summary>
            Manifest element order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.TemplateType.PropertySheet">
            <summary>
            Property sheet element order.
            </summary>
            <remarks>
            Note that the .user file is also considered a property sheet for project ordering purpose.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementAsync(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectRootElement,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.TemplateType,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)">
            <summary>
            When we need to add a top-level element to an MSBuild construction model (which is the same thing as saying an MSBuild file), this method
            returns an existing top-level element after which the given top-level element needs to be added according to project element order
            specification. If the project file is badly out of format, then the returned location would be the last top-level element that matches the type.
            </summary>
            <remarks> UNDONE (pavana): This method currently provides template services that should probably be abstracted out into its own
            component. That was not done because our current locking infrastructure does not allow us to return an MSBuild object from
            any of the component APIs (Idea: how about returning an index of a top-level element?). When this is figured out, we need to have a component interface that deals with position-according-to-template
            kind of questions for various project elements. Then we need to have a VC component which will encapsulate VC project template
            information inside it and answer question accordingly. Alternatively, if we can come up with a generic way to represent
            a project template (ideas: An MSBuild file containing just a skeleton with all labeled top level elements that can be placed
            as a file outside (not ideal since users can muck with it and bring the system down), or passed as a string reader or hardcoded
            inside the component; some other generic data structure representaton of the partial/total ordering of the top level elements),
            then we can have single base component that can be reused with minor customization for multiple project systems. </remarks>
            <param name="unconnectedElement"> An unconnected element that is sought to be added as a top-level element. </param>
            <param name="projectXml"> The project root element. </param>
            <param name="projectCollection">The ProjectCollection to use.</param>
            <param name="templateType">
            The element ordering template to use. The project elements in the manifest file are structured and ordered differently than property sheets.
            E.g. the manifest has a "ProjectConfigurations" item group as the first element whereas the property sheet does not even have such an element.
            </param>
            <param name="projectLockService">The project lock service.</param>
            <returns> A top-level element that immediately precedes the location where the given top-level element needs to be added. Null can also be returned
            when the add location is top of the MSBuild file. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetProjectOrderTemplateElementsAsync(Microsoft.Build.Evaluation.ProjectCollection,Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.TemplateType,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)">
            <summary>
            Acquires the default project element order for a given template type.
            </summary>
            <param name="projectCollection">The project collection to use for loading the project template.</param>
            <param name="templateType">The type fo template.</param>
            <param name="projectLockService">The project lock service.</param>
            <returns>A sequence of ProjectElements.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetLastTopLevelElementOfType(System.Type,Microsoft.Build.Construction.ProjectRootElement)">
            <summary>
            Retruns the last top-level element in the project xml with a given type or null if there are none.
            </summary>
            <param name="elementType"> The type we are searching for. </param>
            <param name="projectXml"> The project root element. </param>
            <returns> Last matching type element or null if there are none. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetTemplateSectionBeginAndEndMarkers(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectRootElement,Microsoft.Build.Construction.ProjectElement@,Microsoft.Build.Construction.ProjectElement@)">
            <summary>
            Gets the start and ending element of a consecutive set of top-level elements that match the passed-in template element.
            If there are multiple islands of such sections in the file, we return the markers for the last such section.
            </summary>
            <param name="projectOrderTemplateElement"> An element of a project order template. </param>
            <param name="projectXml"> The project root element. </param>
            <param name="startMarker"> The first element of the template section found. Could be null if no element of the section exists. </param>
            <param name="endMarker"> The last element of the template section found. Will be null if the start marker is null. Else, the only other
            case it can be null is when the last element in the projectXml lies in the template section we are searching for. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.MatchesWithProjectOrderTemplateElement(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)">
            <summary>
            Checks whether an element matches with an element representing a project-order-template's section.
            Matching here means that the type of the elements must match and:
            1) For import statements, the unevaluated value of the "Project" must match (although evaluated value would
            have been good, it is difficult to get).
            2) For non-import statements, the "Label" matches. Note that all non-import statements that can appear as
            top level elements in VC files have te ability to have a "Label" attribute.
            </summary>
            <param name="element"> The element to compare against the template section element. </param>
            <param name="projectOrderTemplateSectionElement"> The template section element. </param>
            <returns> True, if there is a match. False, otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetLabelOfProjectElement(Microsoft.Build.Construction.ProjectElement)">
            <summary>
            Get the label of an MSBuild project element.
            </summary>
            <param name="projectElement"> The project element. </param>
            <returns> The label. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementResult">
            <summary>
            A composite result from an asynchronous method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementResult.Result">
            <summary>
            Gets the element found by the method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementResult.AddTheTopLevelElementAtTemplateLocation">
            <summary>
            Gets a delegate that can create the element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory">
            <summary>
            A joinable task factory that coordinates with the CPS project lock service to avoid deadlocks from when
            the main thread wants a project lock, and a threadpool thread holding a project lock wants to switch
            to the main thread at the same time.
            </summary>
            <remarks>
            The strategy is to break the deadlock by allowing the background thread that already has the project lock
            to re-enter the main thread and get its work done so that it will eventually release the project lock,
            allowing the main thread to acquire the lock and continue.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectLockService,Microsoft.VisualStudio.Threading.JoinableTaskContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectLockService,Microsoft.VisualStudio.Threading.JoinableTaskCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory.OnTransitioningToMainThread(Microsoft.VisualStudio.Threading.JoinableTask)">
            <summary>
            Raised when a joinable task has requested a transition to the main thread.
            </summary>
            <param name="joinableTask">The task requesting the transition to the main thread.</param>
            <remarks>
            This event may be raised on any thread, including the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectLockAwareJoinableTaskFactory.OnTransitionedToMainThread(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)">
            <summary>
            Raised whenever a joinable task has completed a transition to the main thread.
            </summary>
            <param name="joinableTask">The task whose request to transition to the main thread has completed.</param>
            <param name="canceled">A value indicating whether the transition was cancelled before it was fulfilled.</param>
            <remarks>
            This event is usually raised on the main thread, but can be on another thread when <paramref name="canceled"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess">
            <summary>
            Provides rule-based property access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.namedCatalogs">
            <summary>
            A cache of named catalogs for this configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.ConfiguredProject">
            <summary>
            Gets the configured project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.File">
            <summary>
            Gets the file context for the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.ItemType">
            <summary>
            Gets the item type context for the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.ItemName">
            <summary>
            Gets the item name context for the properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StronglyTypedPropertyAccess.GetNamedCatalogsAsync">
            <summary>
            Gets the map of named catalogs to use for properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1">
            <summary>
            A readonly collection that takes an ICollection for its constructor's parameter instead of an IList.
            </summary>
            <typeparam name="T">The type of item stored in the collection.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.wrappedCollection">
            <summary>
            The collection this read-only view wraps.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.Count">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.IsReadOnly">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.Add(`0)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.Clear">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.Contains(`0)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.Remove(`0)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlyRealCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings">
            <summary>
            A class that manages persistent storage for build settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.VCSubPath">
            <summary>
            The registry sub-path for VC-specific settings, which also impacts other CPS projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.CpsSubPath">
            <summary>
            The registry sub-path for general CPS settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.GeneralSubPath">
            <summary>
            The registry sub-path for VS general settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.OutputWindowLogVerbosity">
            <summary>
            Gets or sets the verbosity of the log that is emitted to the Visual Studio Output window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.LogFileVerbosity">
            <summary>
            Gets or sets the verbosity of the log file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.IsDesignTimeOutputPaneEnabled">
            <summary>
            Gets or sets a value indicating whether we should log builds
            to the design-time build output window pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.LogFileEnabled">
            <summary>
            Gets or sets a value indicating whether MSBuild writes to a log file.
            </summary>
            <value>Default is true.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.LogTimingsEnabled">
            <summary>
            Gets or sets a value indicating whether MSBuild lists information about the build timings in the build log.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.LogEnvironmentVariablesEnabled">
            <summary>
            Gets or sets a value indicating whether MSBuild lists the initial value of all MSBuild properties
            into the build log.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.BuildCustomizationsSearchPath">
            <summary>
            Gets or sets the search path for build rules.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.ShowAllFilesDefault">
            <summary>
            Gets or sets the default Solution Explorer Mode setting.
            </summary>
            <remarks>
            In the registry, 1 = Show All Files, and 0 = show only files in project.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.AutoRefreshEnabled">
            <summary>
            Gets or sets a value indicating whether CPS' Solution Explorer Auto Refresh functionality is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.MaximumConcurrentFileCompiles">
            <summary>
            Gets or sets the maximum number of cores that can be used for compiling C++ files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.SetSetting``1(System.String,System.String,``0)">
            <summary>
            Stores a value in the registry.
            </summary>
            <typeparam name="T">The type value value being set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.SetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Stores a value in the registry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.DeleteSetting(System.String,System.String)">
            <summary>
            Deletes a value from the registry if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Looks up some registry value.
            </summary>
            <typeparam name="T">The type value value being read.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentSettings.GetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Looks up some registry value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings">
            <summary>
            A class that manages persistent storage for some VC build settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings.registryRoot">
            <summary>
            The path to the registry key where these settngs will be stored.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings"/> class.
            </summary>
            <param name="shell">The VS shell where the registry root can be retrieved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings"/> class.
            </summary>
            <param name="registryRoot">The registry key path where values should be persisted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings.SetSetting``1(System.String,System.String,``0)">
            <summary>
            Stores a value in the registry.
            </summary>
            <typeparam name="T">The type value value being set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings.DeleteSetting(System.String,System.String)">
            <summary>
            Deletes a value from the registry if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentRegistrySettings.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Looks up some registry value.
            </summary>
            <typeparam name="T">The type value value being read.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings">
            <summary>
            A class that manages persistent storage for some VC build settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings.fakeRegistryHive">
            <summary>
            The dictionary used for faking get/set operations from the registry hive.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings"/> class
            when no VS service or registry root path are available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings.SetSetting``1(System.String,System.String,``0)">
            <summary>
            Stores a value in the registry.
            </summary>
            <typeparam name="T">The type value value being set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings.DeleteSetting(System.String,System.String)">
            <summary>
            Deletes a value from the registry if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PersistentDictionarySettings.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Looks up some registry value.
            </summary>
            <typeparam name="T">The type value value being read.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource">
            <summary>
            An aggregate cancellation token that is cancelled only when all other tokens are cancelled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.CancelHandlerDelegate">
            <summary>
            A singleton delegate to reuse to avoid excessive memory allocations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.tokenSource">
            <summary>
            The source of the aggregate cancellation token.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.notifyRegistrations">
            <summary>
            The set of cancellation handler registrations to dispose of when we've lost interest.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.tokenCount">
            <summary>
            The number of remaining tokens to cancel before cancelling the aggregate token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource"/> class.
            </summary>
            <param name="tokenCount">The number of cancellations that must be received to cancel the union token.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.Token">
            <summary>
            Gets the aggregate cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.Dispose">
            <summary>
            Disposes of managed resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.CreateUnionCancellationToken(System.Collections.Generic.IReadOnlyCollection{System.Threading.CancellationToken})">
            <summary>
            Returns a cancellation token that is canceled when and if the entire set of cancellation tokens specified are canceled.
            </summary>
            <param name="tokens">The set of cancellation tokens.</param>
            <returns>The joint cancellation token.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.Dispose(System.Boolean)">
            <summary>
            Disposes of managed resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.CancelHandler(System.Object)">
            <summary>
            The method invoked when any cancellation token is cancelled.
            </summary>
            <param name="value">The instance of this class that should have its count decremented.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AggregateCancellationTokenSource.Decrement">
            <summary>
            Responds to a single token's cancellation, and
            cancels the union token if this was the last cancellation required.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions">
            <summary>
            Extension methods for TPL Dataflow blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.String[])">
            <summary>
            Links a block to receive design-time build information regarding a specified set of targets.
            </summary>
            <param name="snapshotBlock">The block on the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshotService"/> service to subscribe to.</param>
            <param name="target">The target block to receive messages.</param>
            <param name="linkOptions">Options to pass into the LinkTo method.</param>
            <param name="buildTargets">The MSBuild targets that should be included in the design-time build.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Links a block to receive design-time build information regarding a specified set of targets.
            </summary>
            <param name="snapshotBlock">The block on the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshotService"/> service to subscribe to.</param>
            <param name="target">The target block to receive messages.</param>
            <param name="linkOptions">Options to pass into the LinkTo method.</param>
            <param name="buildTargets">The MSBuild targets that should be included in the design-time build.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Links a block to receive a cross-sectional slice of project data, including detailed descriptions of what changed between snapshots, as described by specified rules.
            </summary>
            <param name="differencingSnapshotBlock">The broadcasting block that produces the messages.</param>
            <param name="target">The block to receive the broadcasts.</param>
            <param name="linkOptions">Link options to include in the request.</param>
            <param name="initialDataAsNew">
            If <c>true</c>, causes the first message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first message at its default value of describing the project and its true prior state.
            </param>
            <param name="suppressVersionOnlyUpdates">A value indicating whether to prevent messages from propagating to the target block if no project changes are include dother than an incremented version number.</param>
            <param name="ruleNames">The names of the rules that describe the project data the caller is interested in.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Links a block to receive a cross-sectional slice of project data, including detailed descriptions of what changed between snapshots, as described by specified rules.
            </summary>
            <param name="differencingSnapshotBlock">The broadcasting block that produces the messages.</param>
            <param name="target">The block to receive the broadcasts.</param>
            <param name="linkOptions">Link options to include in the request.</param>
            <param name="initialDataAsNew">
            If <c>true</c>, causes the first message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first message at its default value of describing the project and its true prior state.
            </param>
            <param name="suppressVersionOnlyUpdates">A value indicating whether to prevent messages from propagating to the target block if no project changes are include dother than an incremented version number.</param>
            <param name="ruleNames">The names of the rules that describe the project data the caller is interested in.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{System.Collections.Immutable.IImmutableSet{System.String}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean,System.Boolean)">
            <summary>
            Links a block to receive cross-sectional slices of project data,
            including detailed descriptions of what changed between snapshots,
            as described by rules specified by another source block.
            </summary>
            <param name="differencingSnapshotBlock">The broadcasting block that produces the messages.</param>
            <param name="target">The block to receive the broadcasts.</param>
            <param name="ruleNamesBlock">A source block that supplies the names of the rules that describe the project data the caller is interested in.</param>
            <param name="linkOptions">Link options to include in the request.</param>
            <param name="initialDataAsNew">
            If <c>true</c>, causes the first message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first message at its default value of describing the project and its true prior state.
            </param>
            <param name="suppressVersionOnlyUpdates">A value indicating whether to prevent messages from propagating to the target block if no project changes are include dother than an incremented version number.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.AsBlock(System.Action{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a Dataflow block that can process project subscription updates.
            </summary>
            <param name="action">The delegate to invoke for each project subscription update.</param>
            <param name="blockOptions">Any applicable block options.  May be null.</param>
            <returns>The initialized block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.AsAsyncBlock(System.Func{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate},System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a Dataflow block that can process project subscription updates.
            </summary>
            <param name="action">The delegate to invoke for each project subscription update.</param>
            <param name="blockOptions">Any applicable block options.  May be null.</param>
            <returns>The initialized block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CreateProjectTransformBroadcastBlock``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions,System.Func{``1,``1})">
            <summary>
            Creates a transform-broadcast block pair that operates on some project-derived value.
            </summary>
            <typeparam name="TSource">The type of value produced by the source block.</typeparam>
            <typeparam name="TTarget">The type of value produced by the specified function.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="production">The function to execute to produce the next value for the block.</param>
            <param name="transformBlockOptions">Options to pass into the transformation block.</param>
            <param name="cloningFunction">An optional delegate to use for cloning the value so that each consumer gets its own copy.</param>
            <returns>A broadcast block that produces a value each time the project is updated.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafePublicize``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0})">
            <summary>
            Wraps a TPL dataflow block such that it is safe to hand out references to consumers
            in a way that disallows them faulting and completing the block.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <param name="block">The block to wrap.</param>
            <returns>The safe wrapper.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CaptureAndApplyExecutionContext``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
            </summary>
            <typeparam name="TInput">The type of input parameter that is taken by the delegate.</typeparam>
            <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
            <returns>The wrapper delegate.</returns>
            <remarks>
            This is useful because Dataflow doesn't capture or apply ExecutionContext for its delegates,
            so the delegate runs in whatever ExecutionContext happened to call ITargetBlock.Post, which is
            never the behavior we actually want. We've been bitten several times by bugs due to this.
            Ironically, in Dataflow's early days it *did* have the desired behavior but they removed it
            when they pulled it out of the Framework so it could be 'security transparent'.
            By passing block delegates through this wrapper, we can reattain the old behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CaptureAndApplyExecutionContext``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
            </summary>
            <typeparam name="TInput">The type of input parameter that is taken by the delegate.</typeparam>
            <typeparam name="TOutput">The type of value returned by the async delegate, excluding its wrapper Task.</typeparam>
            <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
            <returns>The wrapper delegate.</returns>
            <remarks>
            This is useful because Dataflow doesn't capture or apply ExecutionContext for its delegates,
            so the delegate runs in whatever ExecutionContext happened to call ITargetBlock.Post, which is
            never the behavior we actually want. We've been bitten several times by bugs due to this.
            Ironically, in Dataflow's early days it *did* have the desired behavior but they removed it
            when they pulled it out of the Framework so it could be 'security transparent'.
            By passing block delegates through this wrapper, we can reattain the old behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CaptureAndApplyExecutionContext``1(System.Func{``0})">
            <summary>
            Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
            </summary>
            <typeparam name="TOutput">The type of value returned by the async delegate, excluding its wrapper Task.</typeparam>
            <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
            <returns>The wrapper delegate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.PostWithoutPropagatingContext``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)">
            <summary>
            Posts a message to a dataflow block without allowing project locks leak to this block or the blocks downstream.
            </summary>
            <typeparam name="T">The message to be posted.</typeparam>
            <param name="target">The block to receive the message.</param>
            <param name="message">The message to send to the block.</param>
            <param name="projectLockService">The project lock service.</param>
            <returns>A value indicating whether the block accepted the message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.AsBlock``1(System.Action{``0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a Dataflow target block that can process messages.
            </summary>
            <typeparam name="T">The type of message this block receives.</typeparam>
            <param name="action">The delegate to invoke for each incoming message.</param>
            <param name="blockOptions">Any applicable block options.  May be null.</param>
            <returns>The initialized block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Links a dataflow block to some delegate.
            </summary>
            <typeparam name="T">The type of message published by the block.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkToPropagateFaults``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Links one block to another such that faults propagate but successful completions do not.
            </summary>
            <typeparam name="T">The type of value propagated between the blocks.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="targetBlock">The target block.</param>
            <returns>A value whose cancellation should terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafePublicize``2(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
            <summary>
            Wraps a TPL dataflow block such that it is safe to hand out references to consumers
            in a way that disallows them faulting and completing the block.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <typeparam name="TForward">The type of message produced by the block to forward links to.</typeparam>
            <param name="block">The block to wrap.</param>
            <param name="forwardLinksTo">
            A block that should receive replicated link requests (to null blocks)
            for every link request to <paramref name="block"/>.
            This is useful when there is special info passed to the source block by way of the
            DataflowLinkOptions instance that should impact the internal block.
            </param>
            <returns>The safe wrapper.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SmoothDisruptionDiff(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate})">
            <summary>
            Manufactures an artificial diff if we're currently straddling some disruptive change such as a switching of the active configured project.
            </summary>
            <returns>The new IProjectSubscriptionUpdate instance with the smooth diff.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CreateDisruptionDiffSmoothingTransformBlock">
            <summary>
            Creates a transform block that passes the message coming in from the configured project through to the listener,
            manufacturing an artificial diff if we're currently straddling some disruptive change such as a switching of the active configured project.
            </summary>
            <returns>
            A propagation block, that also implements IReceivableSourceBlock.
            </returns>
            <remarks>
            A disruption is signaled by posting a null message to this block.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkToChanges``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{System.Tuple{``0,``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Links a receiver to a source block such that it receives notifications initially, and when changes are broadcast.
            </summary>
            <typeparam name="T">The type of value produced by the source block.</typeparam>
            <param name="source">The source block.</param>
            <param name="receiver">The delegate to invoke with the old and new values.  The initial old value will be <c>default(T)</c></param>
            <param name="equalityComparer">An optional equality comparer to use when determining whether an interesting change has occurred.</param>
            <returns>A link to dispose of to terminate notifications.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CompleteIfNotNull``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
            <summary>
            Completes a block if it is not null.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CreateSelfFilteringTransformBlock``2(System.Func{``0,System.Collections.Generic.KeyValuePair{``1,System.Boolean}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a transformation block around a function where the function may elect to not produce any output for a given input.
            </summary>
            <typeparam name="TIn">The type of the input message.</typeparam>
            <typeparam name="TOut">The type of the output message.</typeparam>
            <param name="transform">The transformative function.  It should return the result, and a boolean indicating whether to produce that output from the block.</param>
            <param name="blockOptions">The options for the block.</param>
            <returns>The transforming, filtering block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CreateSelfFilteringTransformBlock``2(System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.KeyValuePair{``1,System.Boolean}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a transformation block around a function where the function may elect to not produce any output for a given input.
            </summary>
            <typeparam name="TIn">The type of the input message.</typeparam>
            <typeparam name="TOut">The type of the output message.</typeparam>
            <param name="transform">The transformative function.  It should return the result, and a boolean indicating whether to produce that output from the block.</param>
            <param name="blockOptions">The options for the block.</param>
            <returns>The transforming, filtering block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.Transform``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Func{``0,``1})">
            <summary>
            Creates a source block that produces a transformed value for each value from original source block.
            </summary>
            <typeparam name="TIn">The type of value produced by <paramref name="source"/>.</typeparam>
            <typeparam name="TOut">The type of value produced by <paramref name="transform"/>.</typeparam>
            <param name="source">The source block whose values are to be transformed.</param>
            <param name="transform">The function to execute on each value from <paramref name="source"/>.</param>
            <returns>The transformed source block and a disposable value that terminates the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.Clone(System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            Clones a TPL dataflow link options instance, allowing for ICloneable
            derived-types.
            </summary>
            <param name="linkOptions">The instance to clone.</param>
            <returns>The cloned instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkToLossyBuffer``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.Tasks.Dataflow.BufferBlock{``0}@,System.Threading.CancellationToken)">
            <summary>
            Creates a link from the specified source block to a new buffer block with semantics such that the buffer will present the last
            message produced by the source while discarding all subsequent messages until the buffer's message has been received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="source">The message-originating block.</param>
            <param name="linkOptions">The options to be used on each link.</param>
            <param name="bufferBlock">The buffer block which contains the propagated message.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An object which may be disposed to terminate the links.</returns>
            <remarks>
            The purpose of this method is to allow blocks to be linked such that if the consumer of messages cannot keep up,
            intermediate messages will be quietly dropped.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CreateLinkedRemoveVersionTransform``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0}})">
            <summary>
            Creates a block that repeats a source block's value but without the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1"/> wrapper.
            </summary>
            <typeparam name="T">The type of the inner value.</typeparam>
            <param name="sourceBlock">The block that produces version-wrapped values.</param>
            <returns>A block that produces non-version-wrapped values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.CollectTaskFaults(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a set of all the exceptions from the specified tasks if they are faulted.
            </summary>
            <param name="tasks">An array of tasks, which may or may not have faulted.</param>
            <returns>A set of exceptions from whichever tasks have faulted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.TryFindMinimum``1(``0[],System.Collections.Generic.IComparer{``0},System.Int32@)">
            <summary>
            Looks for some minimum version among an array of values that satisfy transitivity rules.
            </summary>
            <typeparam name="T">The type of value in the array.</typeparam>
            <param name="values">The array of values.</param>
            <param name="comparer">The comparer to use between values.</param>
            <param name="minimumIndex">Receives the index of (one of) the minimum value(s).</param>
            <returns>A value indicating whether a minimum exists.  False if all values are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.ApplyLinkOptionsIfNotNullTo(System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            If a link options template is not null, applies its settings to another instance of link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2">
            <summary>
            An ISourceBlock{T} that blocks calls to Complete and Fault.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <typeparam name="TForward">The type of message produced by the block to forward links to.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.inner">
            <summary>
            The wrapped source block.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.forwardLinksTo">
            <summary>
            The source block to forward links to.  May be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.#ctor(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.Completion">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.Complete">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.Fault(System.Exception)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.TryReceive(System.Predicate{`0},`0@)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.SafeSourceBlockWrapper`2.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkCollection">
            <summary>
            Tracks a subscription to the broadcast block.  The result of the LinkTo method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkCollection.underlyingLinks">
            <summary>
            The underlying TPL Dataflow link.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkCollection.#ctor(System.Collections.Immutable.IImmutableSet{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkCollection"/> class.
            </summary>
            <param name="underlyingLinks">The underlying TPL links created to propagate the data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkCollection.Dispose">
            <summary>
            Destroys this link and decrements target reference counts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DataflowExtensions.LinkCollection.UpdateLinks(System.Collections.Immutable.IImmutableSet{System.IDisposable})">
            <summary>
            Updates the set of links to dispose of.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag">
            <summary>
            A class that tracks a set of disposable objects and a cancellation token for purposes
            of managing the lifetime of a version-sync'd block join.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.cts">
            <summary>
            The source of the cancellation token exposed to the join.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.autoDisposeRegistration">
            <summary>
            The registration that automatically disposes this object when and if the cancellation token is ever canceled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.cancellationToken">
            <summary>
            A token based on the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.cts"/>, so that it's accessible even after disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.disposables">
            <summary>
            The set of disposable blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.IsDisposed">
            <summary>
            A value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.CancellationToken">
            <summary>
            Gets the cancellation token that signals the user has terminated the link.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.Dispose">
            <summary>
            Disposes of all contained links and signals the cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.AddDisposable(System.IDisposable)">
            <summary>
            Adds a value to be disposed of when this collection is disposed of or canceled.
            </summary>
            <param name="disposable">The value to be disposed of later. May be <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.AddDisposables(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Adds values to be disposed of when this collection is disposed of or canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DisposableBag.RemoveDisposable(System.IDisposable)">
            <summary>
            Removes a disposable value from the collection.
            </summary>
            <param name="disposable">The value to remove. May be <c>null</c>.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty">
            <summary>
            Contains shared instances of empty collections with commonly used comparers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.OrdinalStringSet">
            <summary>
            An immutable set of strings that are compared by Ordinal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.OrdinalIgnoreCaseStringSet">
            <summary>
            An immutable set of strings that are compared by Ordinal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.FileSet">
            <summary>
            An immutable  set of case insensitive strings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.FileToFileMap">
            <summary>
            An immutable  map of case insensitive keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.RuleToContextMap">
            <summary>
            An immutable  map of case insensitive keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.PropertiesMap">
            <summary>
            An immutable map that can store properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.ItemsMap">
            <summary>
            An immutable map that can store items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.TargetsList">
            <summary>
            An immutable list for storing names of MSBuild targets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.RuleSet">
            <summary>
            An immutable set for storing names of MSBuild targets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.TargetsSet">
            <summary>
            An immutable set for storing names of MSBuild targets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.CapabilitiesSet">
            <summary>
            An immutable set for storing project and service capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.RuleSnapshotMap">
            <summary>
            An empty map of rule names to their snapshots.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Empty.RuleChangeMap">
            <summary>
            An empty map of rule names to their change descriptions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and validation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.ReportDeprecatedMethod(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is deprecated.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
            <returns>Nothing actually as it always throws, but this allows callers to more easily handle the undetected return path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.ReportDeprecatedMethodNoThrow(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is deprecated, but does not throw.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.ReportNotYetImplementedMethod(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is no longer implemented.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
            <returns>Nothing actually as it always throws, but this allows callers to more easily handle the undetected return path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.ReportNotYetImplementedMethodNoThrow(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is no longer implemented, but does not throw.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
            <remarks>Have a seperate method rather than calling so as not to corrupt the stack trace w/ util methods.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.VerifyReportWarning(System.Boolean,System.String,System.Object[])">
            <summary>
            Reports the warning condition with the message provided, formatted with the provided args, if the condition is false.
            </summary>
            <param name="condition">Assertion condition on whether to report or not, false indicating to report.</param>
            <param name="unformattedMessage">The warning message to be reported.</param>
            <param name="args">Formatted args for the message.</param>
            <returns>The condition parameter.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.VerifyThrow(System.Boolean,System.String)">
            <summary>
            Delegates to <see cref="M:Microsoft.Assumes.True(System.Boolean,System.String)"/>.  Here for FileMatcher.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.VerifyThrow(System.Boolean,System.String,System.Object[])">
            <summary>
            Delegates to <see cref="M:Microsoft.Assumes.True(System.Boolean,System.String,System.Object[])"/>.  Here for FileMatcher.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.IsCriticalException(System.Exception)">
            <summary>
            Returns true for critical exceptions, which are better be rethrown
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.RethrowIfCritical(System.Exception)">
            <summary>
            Rethrows an exception if it is critical.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ErrorUtilities.AddStackTrace(System.Collections.Generic.IList{System.Diagnostics.StackFrame})">
            <summary>
            Given a stack trace, create a debug message for the stack trace.
            </summary>
            <param name="frames">Frames that make up the stack trace, in order.</param>
            <returns>The formatted debug string</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames">
            <summary>
            Contract names to use for CPS exports/imports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Prefix">
            <summary>
            The substring to prepend to all CPS-defined contract names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.PropertyXamlRuleDefinition">
            <summary>
            The contract by which an export describing where a XAML-encoded
            <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> can be found.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Scopes">
            <summary>
            The three scopes of CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Scopes.ProjectService">
            <summary>
            The top-level project system related MEF container.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Scopes.UnconfiguredProject">
            <summary>
            The project file level MEF container.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Scopes.ConfiguredProject">
            <summary>
            The project configuration level MEF container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders">
            <summary>
            Contracts used by tree providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders.PhysicalViewRootGraft">
            <summary>
            Extensions that add special folders to the physical tree provider's root node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders.PhysicalViewTree">
            <summary>
            The normal tree that shows the physical file/folder layout of the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders.PhysicalProjectTreeService">
            <summary>
            The contract name on an IProjectTreeService export for the physical (file system) view of a project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders.FaultedTree">
            <summary>
            The faulted tree provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders.LoadingViewTree">
            <summary>
            The "(loading...)" tree provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectTreeProviders.FileSystemDirectoryTree">
            <summary>
            The tree of the exact contents of the project directory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectItemProviders">
            <summary>
            Contract names for project item providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectItemProviders.Folders">
            <summary>
            The project item provider that manages Folder items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectItemProviders.SourceFiles">
            <summary>
            The project item provider that manages source files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectItemProviders.FxCopDictionaries">
            <summary>
            The project item provider that manages CodeAnalysisDictionary items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes">
            <summary>
            Contract names for exports within the "Microsoft.VisualStudio.Shell.Interop" namespace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsProjectCfgDebugTargetSelection">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsProjectCfgDebugTypeSelection">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsDependencyProvider">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
            <remarks>
            The prefix is removed here because these contracts are patched onto VS services using UnconfiguredProjectQIProvider,
            which doesn't support custom contract names.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsDesignTimeAssemblyResolution">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
            <remarks>
            The prefix is removed here because these contracts are patched onto VS services using UnconfiguredProjectQIProvider,
            which doesn't support custom contract names.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsProjectStartupServices">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsProjectCfg">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsProject">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsHierarchy">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsUIHierarchy">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsRetargetProjectAsync">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.IVsJavaScriptJmcProjectControl">
            <summary>
            The contract exported for extensions that implement this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsTypes.SLocalRegistry">
            <summary>
            The SLocalRegistry service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsServiceProviders">
            <summary>
            Contract names exported for proferring services through CPS to external parties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.VsServiceProviders.ProjectContextService">
            <summary>
            The contract name a service may be exported to with ServiceGuid metadata so that it
            becomes available for acquisition via a call to IVsProject.GetItemContext(VSConstants.VSITEMID_Root, out sp)
            followed by a call to sp.GetService(your-service-guid).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Threading">
            <summary>
            Contract names for synchronization, task schedulers, and threading.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Threading.TaskScheduler">
            <summary>
            Contract name applied for all exports of the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Threading.TaskScheduler"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Threading.OnIdleTaskScheduler">
            <summary>
            Contract name for the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Threading.TaskScheduler"/> that executes tasks on the UI thread while VS is idle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Threading.AfterProjectWriteLockReleasedCallbacks">
            <summary>
            The contract name for exported delegates to invoke after project write locks are released.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Build">
            <summary>
            Contract names for build behaviors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Build.FullBuildGlobalPropertiesProviders">
            <summary>
            The contract name exported into the MEF catalog for providers of full build properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Build.DesignTimeBuildGlobalPropertiesProviders">
            <summary>
            The contract name exported into the MEF catalog for providers of design-time build properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Build.HostErrorListLogger">
            <summary>
            The contract name of an export that is responsible for populating the error list with build errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Build.AggregateGlobalPropertiesProviders">
            <summary>
            The contract name of an export that is responsible for aggregating exports of the
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectGlobalPropertiesProvider"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.HostObjects">
            <summary>
            Contract names for host objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.HostObjects.ConfiguredProject">
            <summary>
            The contract name for the ConfiguredProject-scoped host object export.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.HostObjects.UnconfiguredProject">
            <summary>
            The contract name for the UnconfiguredProject-scoped host object export.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions">
            <summary>
            Contract names for exported functions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.CanRenameProject">
            <summary>
            A function that participates in determining whether a project can be renamed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.SourceItemsRemoving">
            <summary>
            A function that receives notifications when source items are about to be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.SourceItemsAdding">
            <summary>
            A function that receives notifications when source items are about to be added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.SourceItemsRenaming">
            <summary>
            A function that receives notifications when source items are about to be renamed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.SourceItemsRemoved">
            <summary>
            A function that receives notifications when source items are removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.SourceItemsAdded">
            <summary>
            A function that receives notifications when source items are added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.SourceItemsRenamed">
            <summary>
            A function that receives notifications when source items are renamed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Functions.UIUpdateWaiter">
            <summary>
            Delegates to synchronously invoke just after the property page UI applies a change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation">
            <summary>
            Contract names applied to exports of VS automation interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation.DteProject">
            <summary>
            Contract name for the CPS export of EnvDTE.Project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation.DteGlobals">
            <summary>
            Contract name for the CPS export of EnvDTE.Globals
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation.VsLangProjProject">
            <summary>
            Contract name for the CPS export of VSLangProj.VSProject
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation.VsLangProjEvents">
            <summary>
            Contract name for the CPS export of VSLangProj.VSProjectEvents
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation.VsLangProjBuildManager">
            <summary>
            Contract name for the CPS export of VSLangProj.BuildManager
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.Automation.VsLangProjReferences">
            <summary>
            Contract name for the CPS export of VSLangProj.References
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectPropertyProviders">
            <summary>
            Contract names for IProjectPropertiesProvider implementations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectPropertyProviders.Intrinsic">
            <summary>
            Contract name for the property provider that reads MSBuild intrinsic properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectPropertyProviders.ProjectFile">
            <summary>
            Contract name for the property provider that reads/writes properties from the project file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectPropertyProviders.UserFile">
            <summary>
            Contract name for the property provider that reads/writes properties from the user file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectPropertyProviders.UserFileWithXamlDefaults">
            <summary>
            Contract name for the property provider that reads/writes properties from the user file
            and when properties are not defined in context falls back to defaults as specified
            in the XAML file rather than from elsewhere in the project (e.g. such as .props files).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ProjectPropertyProviders.AssemblyReference">
            <summary>
            Contract name for the property provider that reads/writes special properties from the project file for assembly references.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ClrTypes">
            <summary>
            Custom contract names for exported types that are found in the BCL.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ClrTypes.ICustomQueryInterfaceOnProjectNode">
            <summary>
            Contract name for CustomQI extensions that add interfaces to the ProjectNode class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.ClrTypes.SynchronizationContext">
            <summary>
            Contract name for exported sync contexts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.BuildManagerHosts">
            <summary>
            Build manager hosts available in CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.BuildManagerHosts.BuildManagerAccessorDesignTime">
            <summary>
            The build manager host that coordinates design-time builds with the build manager accessor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.BuildManagerHosts.SolutionBuildManagerParticipant">
            <summary>
            The build manager host that coordinates with the VS solution build manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.BuildManagerHosts.Independent">
            <summary>
            The build manager host used by multi-threaded CPS tenants for design-time builds.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.DocumentManager">
            <summary>
            The document managers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.DocumentManager.File">
            <summary>
            The document manager used for opening ordinary files in the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.DocumentManager.AppDesigner">
            <summary>
            The document manager used for opening app designer pages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.MSBuild">
            <summary>
            Contracts used by CPS exports of MSBuild objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.MSBuild.ProjectCollection">
            <summary>
            The contract name for MEF imports of the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.MSBuild.ProjectCollection"/> that CPS uses.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportContractNames.MSBuild.GlobalProjectCollectionGlobalProperties">
            <summary>
            The contract name on the IProjectGlobalPropertiesProvider export that publishes all the global properties on the GlobalProjectCollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.INamedExportMetadataView">
            <summary>
            An interface that describes metadata on named exports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.INamedExportMetadataView.Name">
            <summary>
            Gets the "Name" metadata for this export.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.LazyExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Lazy`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.LazyExtensions.EvaluateNow``1(System.Lazy{``0})">
            <summary>
            Forces immediate evaluation of a lazily-initialized value.
            </summary>
            <typeparam name="T">The type of value to initialize</typeparam>
            <param name="lazyValue">The lazy value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.LazyExtensions.DisposeIfCreated``1(System.Lazy{``0})">
            <summary>
            Disposes some lazily-initialized object if it was initialized and if its value is disposable.
            </summary>
            <typeparam name="T">The type of lazily-initialized object.</typeparam>
            <param name="lazyInitializedField">The lazy initialized field.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.LazyExtensions.DisposeIfCreated``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
            <summary>
            Disposes some lazily-initialized object if it was initialized and if its value is disposable.
            </summary>
            <typeparam name="T">The type of lazily-initialized object.</typeparam>
            <param name="lazyInitializedField">The lazy initialized field.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions">
            <summary>
            Extension methods for MEF types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.GetExportedValueOrDefault``1(Microsoft.VisualStudio.Composition.ExportProvider)">
            <summary>
            Get a single component and allow default.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <returns>The exported component</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.GetService``1(Microsoft.VisualStudio.Composition.ExportProvider,System.Boolean)">
            <summary>
            Gets a single MEF exported value from a container.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <param name="allowDefault">A value indicating whether returning a <c>default(T)</c> instance is preferable to throwing an exception if the service is not available.</param>
            <returns>The exported value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.GetServiceLazy``1(Microsoft.VisualStudio.Composition.ExportProvider,System.Boolean)">
            <summary>
            Gets a single MEF exported value from a container.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <param name="allowDefault">A value indicating whether returning a <c>default(T)</c> instance is preferable to throwing an exception if the service is not available.</param>
            <returns>The exported value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.WhereAppliesTo``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Filters a sequence of exports to just those exports whose AppliesTo expressions are satisfied
            by the specified set of project capabilities.
            </summary>
            <typeparam name="T">The type of exported values.</typeparam>
            <typeparam name="TMetadata">The type of metadata exported with the value.</typeparam>
            <param name="exports">The sequence of exports to be filtered.</param>
            <param name="projectCapabilities">The set of project capabilities to use in the filtering.</param>
            <returns>The sequence of exports, filtered to only include those that should apply to the project whose capabilities were specified.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.WhereAppliesTo``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Filters a sequence of exports to just those exports whose AppliesTo expressions are satisfied
            by the specified set of project capabilities.
            </summary>
            <typeparam name="T">The type of exported values.</typeparam>
            <typeparam name="TMetadata">The type of metadata exported with the value.</typeparam>
            <param name="exports">The sequence of exports to be filtered.</param>
            <param name="projectCapabilityHitTester">The provider for hit testing of specific capabilities.</param>
            <returns>The sequence of exports, filtered to only include those that should apply to the project whose capabilities were specified.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.AppliesTo``2(System.Lazy{``0,``1},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Gets a value indicating whether the specified import is applicable to the current project.
            </summary>
            <typeparam name="T">The type of exported value.</typeparam>
            <typeparam name="TMetadata">The type of metadata exported with the value.</typeparam>
            <param name="lazyImport">The import to be tested. May be <c>null</c>, in which case <c>false</c> is returned</param>
            <param name="projectCapabilityHitTester">The project whose capabilities will be used to test the applicability of <paramref name="lazyImport"/>.</param>
            <returns><c>true</c> if the export should be applied; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.AppliesTo(Microsoft.VisualStudio.ProjectSystem.Utilities.IAppliesToMetadataView,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Gets a value indicating whether an export with the specified metadata is applicable to the current project.
            </summary>
            <param name="exportMetadata">The metadata on the export to be tested. May be <c>null</c>, in which case <c>false</c> is returned</param>
            <param name="projectCapabilityHitTester">The project whose capabilities will be used to test the applicability of the export with the specified metadata.</param>
            <returns><c>true</c> if the export should be applied; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindByMetadata``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindExportByMetadata``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindByMetadata``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Predicate{``1})">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
            <typeparam name="TMetadata">The type of the export metadata.</typeparam>
            <param name="exports">The exports.</param>
            <param name="metadataCheck">The metadata constraint.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindExportByMetadata``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Predicate{``1})">
            <summary>
            Gets the first export from a list of exports that matches some metadata constraint,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
            <typeparam name="TMetadata">The type of the export metadata.</typeparam>
            <param name="exports">The exports.</param>
            <param name="metadataCheck">The metadata constraint.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindNamedExport``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.Utilities.INamedExportMetadataView}},System.String)">
            <summary>
            Finds the exported value with the given export metadata name, or the default value if no match was found.
            </summary>
            <typeparam name="T">The type of export to search.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindByMetadata``1(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.ExportFactory{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FindExportFactoryByMetadata``1(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.ExportFactory{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.ExtensionValuesWithMetadata``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
            <summary>
            Enumerates a sequence of extensions, omitting any extensions that throw MEF exceptions.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
            <typeparam name="TMetadata">The type of metadata on each export.</typeparam>
            <param name="extensions">The collection of extensions.</param>
            <returns>The safely constructed sequence of extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.ExtensionValues``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}},System.Boolean)">
            <summary>
            Enumerates a sequence of extensions, omitting any extensions that throw MEF exceptions.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
            <param name="extensions">The collection of extensions.</param>
            <param name="onlyCreatedValues">
            <c>true</c> to only enumerate extensions from Lazy's that have previously been created.
            This is useful in Dispose methods to avoid MEF ObjectDisposedExceptions from accidentally
            creating values during a container disposal.
            </param>
            <returns>The safely constructed sequence of extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.ExtensionValues``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Boolean)">
            <summary>
            Enumerates a sequence of extensions, omitting any extensions that throw MEF exceptions.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
            <typeparam name="TMetadata">The metadata on each extension.</typeparam>
            <param name="extensions">The collection of extensions.</param>
            <param name="onlyCreatedValues">
            <c>true</c> to only enumerate extensions from Lazy's that have previously been created.
            This is useful in Dispose methods to avoid MEF ObjectDisposedExceptions from accidentally
            creating values during a container disposal.
            </param>
            <returns>The safely constructed sequence of extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FiltersWith``1(System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.Utilities.IAppliesToMetadataView},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Check whether the imported component matches the declared project capabilities, otherwise returns <c>null</c>.
            </summary>
            <typeparam name="T">The type of the lazily-initialized value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.FilteredValue``1(System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.Utilities.IAppliesToMetadataView},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Check whether the imported component matching the project capability, otherwise returns <c>null</c>.
            </summary>
            <typeparam name="T">The type of the lazily-initialized value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.MefExtensions.TryGetValue``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value with a given key from a dictionary if the key is defined and the value is of the required type.
            </summary>
            <typeparam name="TValue">The type of the value desired.</typeparam>
            <param name="metadata">The dictionary to search.</param>
            <param name="key">The key to search for.</param>
            <param name="value">Receives the value, if the key is found and if the value is of the right type. Otherwise <c>default(TValue)</c>.</param>
            <returns><c>true</c> if the key was found and the value was of the expected type; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed">
            <summary>
            A base class that offers thread-safe initialization and disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.syncObject">
            <summary>
            The synchronization object used by this instance, including within derived-type code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.synchronousDisposal">
            <summary>
            A flag indicating whether this instance must be synchronously disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.lifecycle">
            <summary>
            This instance's point in the lifecycle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.wasInitialized">
            <summary>
            Indicates we successfully initialized at some point in the past.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed"/> class,
            leaving MEF imports to be satisfied via reflection.
            </summary>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.LifetimeState">
            <summary>
            The various stages of an object's lifecycle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.LifetimeState.Uninitialized">
            <summary>
            The instance has not yet been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.LifetimeState.Initializing">
            <summary>
            The instance is being initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.LifetimeState.Initialized">
            <summary>
            The instance has been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.LifetimeState.Disposing">
            <summary>
            The instance is being disposed of.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.LifetimeState.Disposed">
            <summary>
            The instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is being initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized (and has not yet been disposed).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.IsDisposing">
            <summary>
            Gets a value indicating whether this instance is being disposed of.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.SyncObject">
            <summary>
            Gets the synchronization object for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.DisposeAsync">
            <summary>
            Disposes of this instance asynchronously unless disabled by derived type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.EnsureInitialized(System.Boolean)">
            <summary>
            Initializes this instance if it has not yet been.
            </summary>
            <param name="allowInitializing">A value indicating whether to allow a partially initialized instance if this is the thread performing that initialization.</param>
            <remarks>
            This method throws an exception if it is called from within the Initialize() method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OnceInitializedOnceDisposed.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and unmanaged resources owned by this instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2">
            <summary>
            A collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/> to ensure imports are sorted according
            to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
            <typeparam name="TMetadata">The metadata interface for the export.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.list">
            <summary>
            The list that contains the contents of this collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.comparer">
            <summary>
            The comparer to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.Count">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.IsReadOnly">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.Add(System.ComponentModel.Composition.ExportFactory{`0,`1})">
            <summary>
            Adds an item to the collection in the sorted position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.Contains(System.ComponentModel.Composition.ExportFactory{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.CopyTo(System.ComponentModel.Composition.ExportFactory{`0,`1}[],System.Int32)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.Remove(System.ComponentModel.Composition.ExportFactory{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`1">
            <summary>
            A project capability filtering collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/>
            to ensure imports are sorted according to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1">
            <summary>
            A broadcast block that produces values on demand and publishes them when significant changes between values are observed.
            </summary>
            <typeparam name="T">The type of value produced by this block.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.productionBlock">
            <summary>
            The block that executes the value calculation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.publicBlock">
            <summary>
            The source block of the message broadcasts that we can expose.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.completionTaskSource">
            <summary>
            The block's completion task source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.#ctor(System.Func{`0},System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1"/> class.
            </summary>
            <param name="production">The function that calculates the value.</param>
            <param name="equalityComparer">A comparer to use between two calculated values to ascertain whether they are sufficiently different to publish a new value.</param>
            <param name="initialRefresh">A value indicating whether to immediately queue a production.</param>
            <param name="scheduler">An optional scheduler to use for executing the dataflow block.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1"/> class.
            </summary>
            <param name="productionAsync">The async function that calculates the value.</param>
            <param name="equalityComparer">A comparer to use between two calculated values to ascertain whether they are sufficiently different to publish a new value.</param>
            <param name="initialRefresh">A value indicating whether to immediately queue a production.</param>
            <param name="scheduler">An optional scheduler to use for executing the dataflow block.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.Completion">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.Complete">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.Fault(System.Exception)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProductionBroadcastBlock`1.Refresh">
            <summary>
            Triggers a refresh of the broadcast value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and validation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowRulePropertyMissing(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an exception indicating that a property in an IRule is missing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowRuleMissing(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an exception indicating that an IRule is missing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.VerifyThrowProjectException(System.Boolean,System.String)">
            <summary>
            Throws an ProjectException with the specified message string if some condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The text message to display.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.VerifyThrowProjectException(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string if some condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first string formatting argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.VerifyThrowProjectException(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an ProjectException with the specified message string if some condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="unformattedMessage">The text message to display.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectException(System.String)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="message">The text message to display.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectException(System.String,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectException(System.String,System.Object,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <param name="arg1">The second formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectException(System.Exception,System.String)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="innerException">Can be null.</param>
            <param name="message">The text message to display.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectException(System.Exception,System.String,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="innerException">Can be null.</param>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectException(System.Exception,System.String,System.Object,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="innerException">Can be null.</param>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <param name="arg1">The second formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectErrorUtilities.ThrowProjectExceptionHelper(System.Exception,System.String,System.Object[])">
             <summary>
             Throws a ProjectException.
            
             PERF WARNING: calling a method that takes a variable number of arguments
             is expensive, because memory is allocated for the array of arguments -- do
             not call this method repeatedly in performance-critical scenarios
             </summary>
             <param name="innerException">Can be null.</param>
             <param name="unformattedMessage">The text message to display.</param>
             <param name="args">The formatting arguments to consume when formatting the message string.</param>
             <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ResourceUtilities">
            <summary>
            This class contains utility methods for dealing with resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ResourceUtilities.FormatString(System.String,System.Object[])">
             <summary>
             Formats the given string using the variable arguments passed in.
            
             PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
             the array of arguments -- do not call this method repeatedly in performance-critical scenarios
             </summary>
             <remarks>This method is thread-safe.</remarks>
             <param name="unformatted">The string to format.</param>
             <param name="args">Optional arguments for formatting the given string.</param>
             <returns>The formatted string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ResourceUtilities.GetHelpKeyword(System.String)">
            <summary>
            Retrieves the CPS F1-help keyword for the given resource string. Help keywords are used to index help topics in
            host IDEs.
            </summary>
            <param name="resourceName">Resource string to get the CPS F1-keyword for.</param>
            <returns>The CPS F1-help keyword string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer">
            <summary>
            IEqualityComparer for Rule objects using the name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer.ruleComparer">
            <summary>
            Static comparer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer.Default">
            <summary>
            RuleComparer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer.Equals(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Compare two rules by their name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.RuleNameComparer.GetHashCode(Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Implement the GetHashCode method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.IReadOnlySet`1">
            <summary>
            readonly view of a set
            </summary>
            <typeparam name="T">set's element type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.IReadOnlySet`1.Contains(`0)">
            <summary>
            check whether given data exist in the set
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1">
            <summary>
            an IReadOnlySet implementation that wraps a set
            </summary>
            <typeparam name="T">element type of readonly set</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1.set">
            <summary>
            underlying set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1.Count">
            <summary>
            Gets the size of the set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1.Contains(`0)">
            <summary>
            check whether given data exist in the set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1.GetEnumerator">
            <summary>
            return enumerator over the set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            return non-generic version of the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardFaultChangedEventArgs">
            <summary>
            Default event arguments for fault changed events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardFaultChangedEventArgs.isFaulted">
            <summary>
            True when the args are faulted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardFaultChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardFaultChangedEventArgs"/> class.
            </summary>
            <param name="isFaulted">True if the fault has changed to a faulted state</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardFaultChangedEventArgs.IsFaulted">
            <summary>
            Returns the isFaulted value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SupportsFileExtensionAttribute">
            <summary>
            Marks a class as a MEF export and indicates what file extensions this applies to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SupportsFileExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SupportsFileExtensionAttribute"/> class.
            </summary>
            <param name="supportedExtension">The file extension to which this applies, including the leading period.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SupportsFileExtensionAttribute.SupportedExtension">
            <summary>
            Gets the set of file extensions to which this applies, including the leading period.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions">
            <summary>
            Extension methods that add options to the C# "await" keyword.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.StateInvokerDelegate">
            <summary>
            A singleton delegate that invokes its state object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.GetResultAssumeCompleted``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Gets the result of a task that should *always* have already completed, or else
            we'll throw an internal error exception.
            </summary>
            <typeparam name="T">The type of value returned by the task.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.ExecuteAsync(Microsoft.Build.Execution.BuildSubmission)">
            <summary>
            Begins an asynchronous build via MSBuild.
            </summary>
            <param name="submission">The submission to begin execution.</param>
            <returns>The task that will return build results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.RegisterNoThrowOnDispose(System.Threading.CancellationToken,System.Action)">
            <summary>
            Registers a callback to be invoked when and if a token is canceled,
            protecting against <see cref="T:System.ObjectDisposedException"/> in the event that the
            <see cref="T:System.Threading.CancellationTokenSource"/> has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.RegisterNoThrowOnDispose(System.Threading.CancellationToken,System.Action{System.Object},System.Object)">
            <summary>
            Registers a callback to be invoked when and if a token is canceled,
            protecting against <see cref="T:System.ObjectDisposedException"/> in the event that the
            <see cref="T:System.Threading.CancellationTokenSource"/> has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.ResumeWith(System.Threading.Tasks.Task,System.Threading.Tasks.TaskScheduler,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Prepares to await on a task, where its continuation may execute with specific options and/or on a specific scheduler.
            </summary>
            <param name="predecessorTask">The awaitable task.</param>
            <param name="scheduler">The scheduler to execute the continuation on.  If null, the task scheduler for the current sync context is used if available, otherwise the default one.</param>
            <param name="options">The options to apply to the continuation.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.ResumeWith``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskScheduler,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Prepares to await on a task, where its continuation may execute with specific options and/or on a specific scheduler.
            </summary>
            <typeparam name="TResult">The value returned by the awaitable task.</typeparam>
            <param name="predecessorTask">The awaitable task.</param>
            <param name="scheduler">The scheduler to execute the continuation on.  If null, the task scheduler for the current sync context is used if available, otherwise the default one.</param>
            <param name="options">The options to apply to the continuation.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.GetContinuationScheduler(System.Boolean)">
            <summary>
            Gets the scheduler to use for an await continuation.  Must be called directly from the OnCompleted method
            -- NOT from within a delegate that executes in another context.
            </summary>
            <param name="considerCurrentScheduler">Whether to use the current TaskScheduler instead of the default one, if no sync context is available.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.SetBuildComplete(Microsoft.Build.Execution.BuildSubmission)">
            <summary>
            Marks the task created for a BuildSubmission as completed.
            </summary>
            <param name="submission">The build submission that has completed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskSchedulerResumeWithAwaitable">
            <summary>
            An awaitable object that schedules tasks on a specific task scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskSchedulerResumeWithAwaitable.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskSchedulerResumeWithAwaitable.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskSchedulerResumeWithAwaitable"/> struct.
            </summary>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskSchedulerResumeWithAwaitable.GetAwaiter">
            <summary>
            Gets an awaitable object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.#ctor(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable"/> struct.
            </summary>
            <param name="predecessor">The task that is being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.GetAwaiter">
            <summary>
            Gets an awaitable object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.#ctor(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions"/> struct.
            </summary>
            <param name="predecessor">The task that is being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.IsCompleted">
            <summary>
            Gets a value indicating whether the awaitable task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.OnCompleted(System.Action)">
            <summary>
            Schedules some action to execute after the awaitable task has completed.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.GetResult">
            <summary>
            Gets the result of the awaited task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
            <typeparam name="TResult">The type of value returned by the awaited task.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.#ctor(System.Threading.Tasks.Task{`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1"/> struct.
            </summary>
            <param name="predecessor">The task being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.GetAwaiter">
            <summary>
            Gets an awaitable object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.#ctor(System.Threading.Tasks.Task{`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions"/> struct.
            </summary>
            <param name="predecessor">The task that is being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.IsCompleted">
            <summary>
            Gets a value indicating whether the awaitable task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.OnCompleted(System.Action)">
            <summary>
            Schedules some action to execute after the awaitable task has completed.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.GetResult">
            <summary>
            Gets the result of the awaited task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities">
            <summary>
            Provides helper methods for building projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.DesignTimeBuildProperty">
            <summary>
            The name of the MSBuild property to set to "true" via a global property
            to indicate a design-time build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.ContinueOnErrorProperty">
            <summary>
            The name of the MSBuild property that controls how certain MSBuild task invocations
            respond to errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.ResolveAssemblyReferencesSilentProperty">
            <summary>
            The name of the MSBuild property that gets ResolveAssemblyReference to emit warnings for missing references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.DesignTimeSilentResolutionProperty">
            <summary>
            The name of the "DesignTimeSilentResolution" MSBuild property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.BuildingInsideVisualStudioProperty">
            <summary>
            The name of the MSBuild property that indicates Visual Studio is requesting this build
            (whether design-time or full solution build).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.DefineExplicitDefaultsProperty">
            <summary>
            The name of the "DefineExplicitDefaults" MSBuild property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.TrueValue">
            <summary>
            The string "true".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.FalseValue">
            <summary>
            The string "false".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.BuildAsync(Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject,System.String)">
            <summary>
            Builds a specified MSBuild target for this project with design-time build semantics.
            </summary>
            <param name="buildProject">The project build service.</param>
            <param name="target">The target to build.</param>
            <returns>A task that evaluates to the result of the build.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.BuildAsync(Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject,Microsoft.VisualStudio.ProjectSystem.Build.BuildAction)">
            <summary>
            Builds a specified action for this project with design-time build semantics.
            </summary>
            <param name="buildProject">The project build service.</param>
            <param name="buildAction">The build action to perform.</param>
            <returns>A task that evaluates to the result of the build.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.RespondToCancellationRequests(System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest,System.Threading.Tasks.TaskCompletionSource{Microsoft.Build.Execution.BuildResult}}})">
            <summary>
            Searches a sequence of build requests for any canceled requests, marks their tasks as canceled and includes them in the returned sequence.
            </summary>
            <param name="buildQueue">The sequence of build requests to scan for cancellations.</param>
            <returns>The cancelled build requests.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.RespondToCancellationRequests(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest,System.Threading.Tasks.TaskCompletionSource{Microsoft.Build.Execution.BuildResult}}})">
            <summary>
            Searches a sequence of build requests for any canceled requests, marks their tasks as canceled and includes them in the returned sequence.
            </summary>
            <param name="buildQueue">The sequence of build requests to scan for cancellations.</param>
            <returns>The cancelled build requests.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.RegisterForAggregateBuildRequestCancellation(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest},Microsoft.Build.Execution.BuildManager)">
            <summary>
            Registers for automatic cancellation of the build if <em>all</em> build requests are canceled.
            </summary>
            <param name="buildRequests">The complete set of build requests submitted for this build.</param>
            <param name="buildManager">The build manager to which these requests were submitted.</param>
            <returns>A value that must be disposed of before calling <see cref="M:Microsoft.Build.Execution.BuildManager.EndBuild"/></returns>
            <remarks>
            This method should be called *after* submitting all build requests to MSBuild.
            This method's result must be disposed of *before* calling <see cref="M:Microsoft.Build.Execution.BuildManager.EndBuild"/>
            to protect against race conditions and possibly cancelling the wrong build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.AppendUnregisterLoggersTask(System.Threading.Tasks.Task{Microsoft.Build.Execution.BuildResult},Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices,System.Int32)">
            <summary>
            Schedules a task that will unregister loggers from the mux logger at the conclusion of a build request's execution.
            </summary>
            <returns>A task that is completed when unregistration is complete and returns the build result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.AppendUnregisterLoggersTask(System.Threading.Tasks.Task{Microsoft.Build.Execution.BuildResult},Microsoft.Build.Utilities.MuxLogger,System.Int32)">
            <summary>
            Schedules a task that will unregister loggers from the mux logger at the conclusion of a build request's execution.
            </summary>
            <returns>A task that is completed when unregistration is complete and returns the build result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.AppendFlushLoggersTask(System.Threading.Tasks.Task{Microsoft.Build.Execution.BuildResult},Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest)">
            <summary>
            Schedules a task that flushes all flushable build loggers at the conclusion of a build request's execution.
            </summary>
            <returns>A task that is completed when flushing is complete and returns the build result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.GetBatchBuildCancellationToken(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Consolidates a batch build request's set of cancellation tokens to just one,
            either the one that is shared among all individual build requests or
            <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.NoOpDispose">
            <summary>
             Does nothing at all.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.NoOpDispose.StaticInstance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.NoOpDispose.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.NoOpDispose"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.NoOpDispose.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.BuildUtilities.NoOpDispose.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CollectionExtensions">
            <summary>
            Extension methods for various collections
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CollectionExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all the elements in a sequence to the set.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CollectionExtensions.GetOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            get or create dictionary value
            </summary>
            <typeparam name="T1">key type</typeparam>
            <typeparam name="T2">value type</typeparam>
            <param name="dictionary">dictionary this extension method applies to</param>
            <param name="key">dictionary key</param>
            <param name="creator">factory lambda that creates initial value</param>
            <returns>correspoinding value for the key</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CollectionExtensions.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            return index of given item in the list
            </summary>
            <typeparam name="T">type of list item</typeparam>
            <returns>-1 when it can't find the node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CollectionExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Tries to divine the number of elements in a sequence without actually enumerating each element.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable source.</param>
            <param name="count">Receives the number of elements in the enumeration, if it could be determined.</param>
            <returns><c>true</c> if the count could be determined; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CollectionExtensions.TryGetCount``1(System.Collections.IEnumerable,System.Int32@)">
            <summary>
            Tries to divine the number of elements in a sequence without actually enumerating each element.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable source.</param>
            <param name="count">Receives the number of elements in the enumeration, if it could be determined.</param>
            <returns><c>true</c> if the count could be determined; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods">
            <summary>
            Extension methods usable by the Platform project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.AsReadOnly``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Returns a readonly (active) view of a set.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1">
            <summary>
            A read-only view of a set.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.backingSet">
            <summary>
            The set that is being presented as readonly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.Count">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.IsReadOnly">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.Add(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.Clear">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.Contains(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.Remove(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.GetEnumerator">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonPlatformExtensionMethods.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ConfiguredProjectAutoLoadAttribute">
            <summary>
            An attribute that causes a method to be invoked automatically when a ConfiguredProject gets loaded.
            </summary>
            <remarks>
            This attribute cannot be inherited because ExportAttribute cannot be inherited,
            and InheritedExportAttribute does not allow application on methods.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ConfiguredProjectAutoLoadAttribute.ContractName">
            <summary>
            The contract name for delegates that should be auto-loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ConfiguredProjectAutoLoadAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ConfiguredProjectAutoLoadAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ConfiguredProjectAutoLoadAttribute.RequiresUIThread">
            <summary>
            Gets or sets a value indicating whether this method must be invoked on the UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult">
            <summary>
            Represents a COM HRESULT
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.OK">
            <summary>
            The S_OK value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.False">
            <summary>
            The S_FALSE value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.NotImplemented">
            <summary>
            The E_NOTIMPL value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.NoInterface">
            <summary>
            The E_NOINTERFACE value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.MemberNotFound">
            <summary>
            The DISP_E_MEMBERNOTFOUND value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.InvalidArg">
            <summary>
            The E_INVALIDARG value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Unexpected">
            <summary>
            The E_UNEXPECTED value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Fail">
            <summary>
            The E_FAIL value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Pending">
            <summary>
            The E_PENDING value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.IncompatibleProject">
            <summary>
            Indicates to VS during project load that this is an incompatible project type for
            the current OS or SKU of VS.
            </summary>
            <remarks>
            Copied from VSShell110.idl
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.WrongThread">
            <summary>
            Indicates that code was executed from the wrong thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.hr">
            <summary>
            The HRESULT this value represents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.exception">
            <summary>
            The captured exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult"/> struct.
            </summary>
            <param name="hr">The HRESULT that this value represents.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult"/> struct.
            </summary>
            <param name="exception">The exception that is to be converted to an HRESULT.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult"/> struct.
            </summary>
            <param name="hr">The HRESULT that this value represents.</param>
            <param name="captureErrorInfoNow">
            Captures the current IErrorInfo struct immediately, if <paramref name="hr"/>
            represents a failure.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ErrorBehavior">
            <summary>
            Indicates what the desired behavior is in the event of a failure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ErrorBehavior.Throw">
            <summary>
            An exception should be (re)thrown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ErrorBehavior.Report">
            <summary>
            An error should be reported to the user, but then execution flow should resume.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ErrorBehavior.Log">
            <summary>
            An error should be quietly logged, and then execution flow should resume.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Exception">
            <summary>
            Gets the exception that triggered a failing HRESULT.
            </summary>
            <value>Null if this HRESULT represents a success value.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Failed">
            <summary>
            Gets a value indicating whether this HRESULT represents a failure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Succeeded">
            <summary>
            Gets a value indicating whether this HRESULT represents a success.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.IsOK">
            <summary>
            Gets a value indicating whether this HRESULT is S_OK.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.IsFalse">
            <summary>
            Gets a value indicating whether this HRESULT is S_FALSE.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.IsNotImplemented">
            <summary>
            Gets a value indicating whether this HRESULT is E_NOTIMPL.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.op_Implicit(System.Int32)~Microsoft.VisualStudio.ProjectSystem.Utilities.HResult">
            <summary>
            Converts an HRESULT int to an HResult struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.op_Implicit(Microsoft.VisualStudio.ProjectSystem.Utilities.HResult)~System.Int32">
            <summary>
            Converts an HResult struct to an int.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.op_Equality(Microsoft.VisualStudio.ProjectSystem.Utilities.HResult,Microsoft.VisualStudio.ProjectSystem.Utilities.HResult)">
            <summary>
            Returns true if result1 equals resul2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.op_Inequality(Microsoft.VisualStudio.ProjectSystem.Utilities.HResult,Microsoft.VisualStudio.ProjectSystem.Utilities.HResult)">
            <summary>
            Returns true if result1 is not equal to result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ToHResult(System.Int32)">
            <summary>
            Converts an int to an HResult, and captures the current IErrorInfo for failures.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.FromHResult(Microsoft.VisualStudio.ProjectSystem.Utilities.HResult)">
            <summary>
            Converts an HResult struct to an int.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Invoke(System.Action,System.IServiceProvider,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invokes some action, and converts exceptions into HRESULTs that include messages.
            </summary>
            <param name="action">The code to invoke and catch exceptions for.</param>
            <param name="vsShellServiceProvider">Any IServiceProvider in VS, so that SVsUIShell may be obtained in the event of an error.</param>
            <param name="projectFaultHandlerService">The IProjectFaultHandlerService service to handle the caught exception.</param>
            <param name="project">The relevant <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject"/> instance if it is applicable.</param>
            <returns>The HRESULT.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Invoke(System.Func{Microsoft.VisualStudio.ProjectSystem.Utilities.HResult},System.IServiceProvider,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invokes some action, and converts exceptions into HRESULTs that include messages.
            </summary>
            <param name="action">The code to invoke and catch exceptions for.</param>
            <param name="vsShellServiceProvider">Any IServiceProvider in VS, so that SVsUIShell may be obtained in the event of an error.</param>
            <param name="projectFaultHandlerService">The IProjectFaultHandlerService service to handle the caught exception.</param>
            <param name="project">The relevant <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject"/> instance if it is applicable.</param>
            <returns>The HRESULT.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Verify(Microsoft.VisualStudio.ProjectSystem.Utilities.HResult,System.String,Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ErrorBehavior)">
            <summary>
            Checks that an HRESULT is successful or throws and handles the error in a predictable way.
            </summary>
            <param name="hr">The HRESULT to check.</param>
            <param name="unformattedErrorMessage">An unformatted message to include with an error text.  {0} will be replaced with the HRESULT value, and {1} will be replaced with the exception details (if any).</param>
            <param name="errorHandling">The kind of error handling to apply.</param>
            <returns>A value indicating whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Verify(System.Func{System.Int32},System.String,Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.ErrorBehavior)">
            <summary>
            Invokes a delegate that returns an HRESULT or throws and handles the error in a predictable way.
            </summary>
            <param name="interopInvocation">The delegate that will return an HRESULT or throw.</param>
            <param name="unformattedErrorMessage">An unformatted message to include with an error text.  {0} will be replaced with the HRESULT value, and {1} will be replaced with the exception details (if any).</param>
            <param name="errorHandling">The kind of error handling to apply.</param>
            <returns>A value indicating whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.Equals(System.Object)">
            <summary>
            Compares this HResult with another.
            </summary>
            <param name="obj">The HResult or int that represents an HRESULT to compare against.</param>
            <returns>True if the HRESULT code is the same; otherwise <c>false</c></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.HResult.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities">
            <summary>
            Well-known project capabilities.
            </summary>
            <remarks>
            Project capability requirements must be expressed on MEF parts via:
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AppliesToAttribute"/> using one of the valid metadata names given below.
            Project capabilities are not case sensitive.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities.DiagnosticRuntimeServiceCapability">
            <summary>
            Performance regress acceptable in favor of additional runtime diagnostic checks.
            </summary>
            <remarks>
            This is the opposite of <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities.RetailRuntimeServiceCapability"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities.RetailRuntimeServiceCapability">
            <summary>
            Suppresses additional diagnostic checks that could otherwise cause performance to suffer.
            </summary>
            <remarks>
            This is the opposite of <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities.DiagnosticRuntimeServiceCapability"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities.MetricsCollectionServiceCapability">
            <summary>
            CPS collects metrics that may be helpful in analyzing performance characteristics.  Performance impact should be minimal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ServiceCapabilities.HonorProjectXmlToolsVersionWhenExists">
            <summary>
            A capability that causes MSBuild Project evaluations to consider the ToolsVersion dictated by
            the project XML to be the one actually wanted, so long as it is a toolset that is defined in
            the CPS ProjectCollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportBuildGlobalPropertiesProviderAttribute">
            <summary>
            Exports a class that implements the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectGlobalPropertiesProvider"/> interface such that
            it can provide global properties to include in an asynchronous (non design-time) project build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportBuildGlobalPropertiesProviderAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportBuildGlobalPropertiesProviderAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider">
            <summary>
            Adds a project capability based on what a project imports either directly or through its other imports.
            </summary>
            <remarks>
            Derived-types should export the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider"/> interface.
            They should also strongly consider adding a file extension filter to avoid getting loaded
            for irrelevant project types.
            So for example:
            <example><code>
            [Export(ExportContractNames.Scopes.ConfiguredProject, typeof(IProjectCapabilitiesProvider))]
            [SupportsFileExtension(".csproj")]
            </code></example>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.capabilities">
            <summary>
            The capabilities to inject into the project if the matching targets import is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider"/> class.
            </summary>
            <param name="triggerTargets">The substring to search for in the Import/@Project attribute.</param>
            <param name="capabilities">The capability to add on a match.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.TriggerTarget">
            <summary>
            The value inside &lt;Import Project="{0}" /&gt; on which to match.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.ConfiguredProject">
            <summary>
            Gets the configured project whose project capabilities are to be manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.GetCapabilitiesAsync">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <value>A task which returns a sequence that is possibly empty but never <c>null</c>.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportEvaluationProvider.GetIsApplicableAsync">
            <summary>
            Gets a value indicating whether the project matching criteria has been met and
            this component's capabilities should be injected into the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`1">
            <summary>
            A collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/> to ensure imports are sorted according
            to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceExportFactoryCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer">
            <summary>
            A comparer that can sort MEF imports in a preferred order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.order">
            <summary>
            The ordering style for this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.preferredComesFirstInstance">
            <summary>
            An instance of this class that sorts preferred imports earlier in a sequence.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.preferredComesLastInstance">
            <summary>
            An instance of this class that sorts preferred imports later in a sequence.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder">
            <summary>
            The ordering styles available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder.PreferredComesFirst">
            <summary>
            Higher precedence order integers appear earlier in the sequence. Ordered numerically descending.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder.PreferredComesLast">
            <summary>
            Lower precedence order integers appear earlier in the sequence. Ordered numerically ascending.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferredComesFirst">
            <summary>
            Gets an instance of this class that sorts preferred imports earlier in a sequence.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferredComesLast">
            <summary>
            Gets an instance of this class that sorts preferred imports later in a sequence.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.GetComparer(Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Gets the comparer for a given ordering style.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Sorts in integer descending order.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator">
            <summary>
            Aggregates the command status for multiple nodes and determines a single answer to pass to Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.supported">
            <summary>
            The command is supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.enabled">
            <summary>
            The command is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.invisible">
            <summary>
            The command is invisible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.latched">
            <summary>
            The command is toggled on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.Result">
            <summary>
            Gets the aggregated status.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.Reset">
            <summary>
            Resets the aggregation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DefaultCommandStatusAggregator.AggregateStatus(Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus)">
            <summary>
            Aggregates the specified status with the previously aggregated statuses.
            </summary>
            <param name="status">The status to aggregate.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2">
            <summary>
            Provides simple dictionary equality checks.
            </summary>
            <typeparam name="TKey">The type of key in the dictionaries to compare.</typeparam>
            <typeparam name="TValue">The type of value in the dictionaries to compare.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2.defaultInstance">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2.Instance"/> static property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2.Instance">
            <summary>
            Gets a dictionary equality comparer instance appropriate for dictionaries that use the default key comparer for the <typeparamref name="TKey"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2.Equals(System.Collections.Immutable.IImmutableDictionary{`0,`1},System.Collections.Immutable.IImmutableDictionary{`0,`1})">
            <summary>
            Checks two dictionaries for equality.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryEqualityComparer`2.GetHashCode(System.Collections.Immutable.IImmutableDictionary{`0,`1})">
            <summary>
            Calculates a hash code for a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportCommandGroupAttribute">
            <summary>
            Marks a class as a MEF export and indicates what group of commands it can handle.
            </summary>
            <remarks>
            See also <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IAsyncCommandGroupHandler"/>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportCommandGroupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportCommandGroupAttribute"/> class.
            </summary>
            <param name="group">The guid for the command group the handler handles.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportCommandGroupAttribute.Group">
            <summary>
            The command group guid that a handler understands.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute">
            <summary>
            Marks a class as a MEF export and indicates which range of special files they possibly provide.
            </summary>
            <remarks>
            See also <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ISpecialFileProvider"/>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute"/> class.
            </summary>
            <param name="specialFile">The type of special file handled.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles,Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute"/> class.
            </summary>
            <param name="minimum">The minimum special file type possibly handled.</param>
            <param name="maximum">The maximum special file type possibly handled.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute.Minimum">
            <summary>
            The minimum special file type the provider could possibly handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExportSpecialFileProviderAttribute.Maximum">
            <summary>
            The maximum special file type the provider could possibly handle.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceAttribute">
            <summary>
            Suggests to an <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/> consumer of this export what order
            this particular export should appear in a priority-sorted list of similar exports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceAttribute"/> class.
            </summary>
            <param name="orderPrecedence">
            The precedence order, where higher numbers generally are interpreted to mean more preferred.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceAttribute.OrderPrecedence">
            <summary>
            Gets the precedence order, where higher numbers generally are interpreted to mean more preferred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2">
            <summary>
            A project capability filtering collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/>
            to ensure imports are sorted according to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
            <typeparam name="TMetadata">The metadata interface for the export.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.syncObject">
            <summary>
            An object to lock when checking cache validation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.list">
            <summary>
            The list that contains the contents of this collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.comparer">
            <summary>
            The comparer to use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.projectCapabilityCheckProvider">
            <summary>
            A source for the filter to apply to exports. May be null for no filtering.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.isListSorted">
            <summary>
            A value indicating whether <see cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.list"/> has already been sorted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.filterVersion">
            <summary>
            The version of the project capability filter when it was last used to capture a snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.filteredSnapshot">
            <summary>
            A snapshot of the exports after the project capability filter has been applied.
            May be <c>null</c> if no snapshot has been created yet or since it was last invalidated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.Count">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.IsReadOnly">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.Add(System.Lazy{`0,`1})">
            <summary>
            Adds an item to the collection in the sorted position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.Contains(System.Lazy{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.CopyTo(System.Lazy{`0,`1}[],System.Int32)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.Remove(System.Lazy{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.Single">
            <summary>
            Gets the applicable export when exactly one matching export is expected.
            </summary>
            <returns>The exported value.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException">Thrown when there is not exactly 1 applicable export.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.SingleOrDefault">
            <summary>
            Gets the applicable export when 0 or 1 matching export is expected.
            </summary>
            <returns>The exported value, or <c>null</c> if no exported values were found.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException">Thrown when there is not exactly 1 applicable export.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.FirstOrDefault">
            <summary>
            Returns the first (best) applicable export, if any.
            </summary>
            <returns>The exported value, or <c>null</c> if no applicable exports are available.</returns>
            <remarks>
            This is defined to avoid the object allocations for this common operation the Linq extension method would incur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.First">
            <summary>
            Returns the first (best) applicable export, and throws if no export is found.
            </summary>
            <returns>The exported value, or <c>null</c> if no applicable exports are available.</returns>
            <remarks>
            This is defined to avoid the object allocations for this common operation the Linq extension method would incur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.OnRecomputingSnapshot(System.Collections.Immutable.ImmutableList{System.Lazy{`0,`1}})">
            <summary>
            Invoked after computing a new snapshot candidate but before commiting it.
            </summary>
            <param name="newSnapshotCandidate">The recently recomputed snapshot.</param>
            <returns>The value to pass to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.OnCommitSnapshot(System.Object)"/> if the snapshot candidate is selected to commit.</returns>
            <remarks>
            Note that it is possible this may be called multiple times in a row, or that
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.OnCommitSnapshot(System.Object)"/> is not called after this when races occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.OnCommitSnapshot(System.Object)">
            <summary>
            Invoked while commiting a recomputed snapshot.
            </summary>
            <param name="recomputingSnapshotResult">The result of a prior call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.OnRecomputingSnapshot(System.Collections.Immutable.ImmutableList{System.Lazy{`0,`1}})"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.GetFilteredSnapshot">
            <summary>
            Gets a current snapshot of the filtered exports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPrecedenceImportCollection`2.InvalidateFilteredSnapshot">
            <summary>
            Marks the most recent export snapshot has invalid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities">
            <summary>
            Well-known project capabilities.
            </summary>
            <remarks>
            Project capability requirements must be expressed on MEF parts via:
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.AppliesToAttribute"/> using one of the valid metadata names given below.
            Project capabilities are not case sensitive.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.VisualC">
            <summary>
            Expressed on parts applicable to any Visual C++ project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.CSharp">
            <summary>
            Expressed on parts applicable to any C# project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.VB">
            <summary>
            Expressed on parts applicable to any Visual Basic .NET project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.AlwaysApplicable">
            <summary>
            The empty string, because project capability expressions that are empty evaluate to <c>true</c>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.Cps">
            <summary>
            Expressed on parts applicable to any pure-CPS project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.HostSetActiveProjectConfiguration">
            <summary>
            Present when the project is loaded in the context of a host process
            that has a concept of active project configurations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ProjectConfigurationsInferredFromUsage">
            <summary>
            Present when a project does not explicitly declare its own project configurations, but rather expects the
            project system to infer what they are based on MSBuild element Condition attributes that appear in the project.
            </summary>
            <remarks>
            This capability tends to be used for C#/VB.
            </remarks>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ProjectConfigurationsDeclaredAsItems"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ProjectConfigurationsDeclaredAsItems">
            <summary>
            Present when a project explicitly declares its own project configurations as ProjectConfiguration msbuild items.
            </summary>
            <remarks>
            This capability tends to be used for C++/JS.
            </remarks>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ProjectConfigurationsInferredFromUsage"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.RunningInVisualStudio">
            <summary>
            Present when the CPS-VS MEF components are available.
            </summary>
            <remarks>
            This project capability is here to help VC adjust to turning off
            stable composition by forcing parts that would be rejected to be
            removed from the MEF catalog.  It is not intended for general purpose
            consumption.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.NotLoadedWithIDEIntegration">
            <summary>
            A capability defined when a project is loaded without integration with the IDE.
            Examples include .filters file and platform projects internally used by the project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.RenameNearbySimilarlyNamedImportsWithProject">
            <summary>
            A capability that opts a project into automatically having its imported files renamed with the project.
            </summary>
            <remarks>
            For example, if a.proj imports a.proj.user and a.proj is renamed to b.proj, then a.proj.user should be renamed to b.proj.user.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.Managed">
            <summary>
            A project capability expressed by projects that compile to MSIL (e.g. C#, VB, F#, and Managed C++ or C++/CLI).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ReferencesFolder">
            <summary>
            Expressed on parts that provide the special References folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.SharedAssetsProject">
            <summary>
            Expressed on parts that provide services for Code Sharing projects (i.e. Mercury master projects).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.NestedProjects">
            <summary>
            Expressed on parts that provide services for nested projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.SourceItemsFromImports">
            <summary>
            Indicates that source items should be presented in the UI even if they appear in imported files
            (as opposed to the project manifest itself).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.SharedImports">
            <summary>
            Expressed on parts that provide services for projects that contain imports of MSBuild files that may
            be imported by other projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.LanguageService">
            <summary>
            Present to activate the language service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.SingleFileGenerators">
            <summary>
            Present to activate support for single file generators (aka custom tools that execute at design-time).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ParentVCProject">
            <summary>
            Present to activate support for VC codesharing parent project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.RelativePathDerivedDefaultNamespace">
            <summary>
            Present to activate tracking folder names in namespace (i.e. RootNamespace.Folder1.Folder2).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.WindowsXaml">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) as a UI framework.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.WindowsXamlPage">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) as a UI framework for pages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.WindowsXamlCodeBehind">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) code-behinds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.WindowsXamlResourceDictionary">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) for resource dictionaries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.WindowsXamlUserControl">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) as a UI framework for user controls.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.WinRTReferences">
            <summary>
            Expressed on parts applicable to projects that support WinRT references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.AssemblyReferences">
            <summary>
            Expressed on parts applicable to projects that support assembly references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ComReferences">
            <summary>
            Expressed on parts applicable to projects that support COM references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.ProjectReferences">
            <summary>
            Expressed on parts applicable to projects that support project references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.SharedProjectReferences">
            <summary>
            Expressed on parts applicable to projects that support shared project references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.SdkReferences">
            <summary>
            Expressed on parts applicable to projects that support SDK references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.OutputGroups">
            <summary>
            Activates the overall output groups support in a project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.AllTargetOutputGroups">
            <summary>
            Activates auto-detection of output groups based on a common target naming convention.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.VisualStudioWellKnownOutputGroups">
            <summary>
            Activates auto-detection of targets supporting well-known output groups.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.BuildWindowsDesktopTarget">
            <summary>
            A capability present in projects that produce all or part of an application that can be both:
             1. launched using Win32 CreateProcess, and
             2. debugged using a standard Visual Studio debug engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.AutoPromoteConfiguredProjectCapabilities">
            <summary>
            A project capability that must be specified by the project factory in order to activate
            a project capability provider that automatically scans the MSBuild evaluation for
            project capabilities that may be applicable to the UnconfiguredProject scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.RequiresSharedAssetsProjectLoadForOpenDocuments">
            <summary>
            Indicates that the project's design-time components are not vetted to work when the project's referenced
            Shared Assets Project(s) are not yet loaded by ASL. (see bug 892019)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.DisallowedCharacters">
            <summary>
            The set of disallowed characters in project capabilities.
            </summary>
            <remarks>
            We restrict many symbols, especially mathematical symbols, because we may eventually want to
            support Project Capability arithmetic in project files or MEF metadata string values.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilities.IsValidProjectCapabilityName(System.String)">
            <summary>
            Checks whether a given project capability name is valid.
            </summary>
            <param name="projectCapability">The project capability to validate.</param>
            <returns><c>true</c> if the project capability is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider">
            <summary>
            Adds a project capability based on what a project directly imports.
            </summary>
            <remarks>
            Derived-types should export the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider"/> interface.
            They should also strongly consider adding a file extension filter to avoid getting loaded
            for irrelevant project types.
            So for example:
            <example><code>
            [Export(ExportContractNames.Scopes.UnconfiguredProject, typeof(IProjectCapabilitiesProvider))]
            [SupportsFileExtension(".csproj")]
            </code></example>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.capabilities">
            <summary>
            The capabilities to inject into the project if the matching targets import is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider"/> class.
            </summary>
            <param name="triggerTargets">The substring to search for in the Import/@Project attribute.</param>
            <param name="capabilities">The capabilities to add on a match.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.TriggerTarget">
            <summary>
            The value inside &lt;Import Project="{0}" /&gt; on which to match.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.UnconfiguredProject">
            <summary>
            Gets the unconfigured project whose project capabilities are to be manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.GetCapabilitiesAsync">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <value>A task which returns a sequence that is possibly empty but never <c>null</c>.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectCapabilitiesFromImportXmlProvider.GetIsApplicableAsync">
            <summary>
            Gets a value indicating whether the project matching criteria has been met and
            this component's capabilities should be injected into the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute">
            <summary>
            Generates a package definition (pkgdef) that wires up some project filename extension
            to the CPS project package and factory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.CpsPackageGuid">
            <summary>
            The CPS package GUID.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.folderGuid">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.FolderGuid"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute"/> class.
            </summary>
            <param name="projectTypeGuid">A unique value specific to this project file extension.</param>
            <param name="displayName">The tree node name in the create new project and add new item dialogs.</param>
            <param name="displayProjectFileExtensions">The text that appears in the Open Project dialog's file filter combo box, a semicolon, and the filter itself.</param>
            <param name="defaultProjectExtension">The default project filename extension.</param>
            <param name="language">The LanguageVsTemplate value.</param>
            <param name="resourcePackageGuid">The GUID of the package that contains localized resources for these strings.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.ProjectTypeGuid">
            <summary>
            Gets a unique value specific to this project file extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.ResourcePackage">
            <summary>
            Gets the GUID of the package that contains localized resources for these strings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.DisplayName">
            <summary>
            Gets the tree node name in the create new project and add new item dialogs.
            Takes precedence over the nameResourceID value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.DisplayProjectFileExtensions">
            <summary>
            Gets the text that appears in the Open Project dialog's file filter combo box, a semicolon, and the filter itself.
            </summary>
            <example>My Project Files (*.myproj);*.myproj</example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.DefaultProjectExtension">
            <summary>
            Gets the default project filename extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.PossibleProjectExtensions">
            <summary>
            Gets all the allowed project filename extensions for this project type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.ProjectTemplatesDir">
            <summary>
            Gets the directory where project templates may be discovered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.LanguageVsTemplate">
            <summary>
            Gets the value for the LanguageVsTemplate setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.SortPriority">
            <summary>
            Affect the order in which project are displayed in the new project dialog
            </summary>
            <value>Default is 100</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.NewProjectRequireNewFolderVsTemplate">
            <summary>
            Gets or sets a value indicating whether a new project requires an empty folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.ProjectSubTypeVsTemplate">
            <summary>
            Gets or sets the ProjectSubTypeVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.DisplayProjectTypeVsTemplate">
            <summary>
            Gets or sets the DisplayProjectTypeVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.TemplateGroupIDsVsTemplate">
            <summary>
            Gets or sets the TemplateGroupIDsVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.TemplateIDsVsTemplate">
            <summary>
            Gets or sets the TemplateIDsVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.ShowOnlySpecifiedTemplatesVsTemplate">
            <summary>
            Gets or sets the ShowOnlySpecifiedTemplatesVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.FolderGuid">
            <summary>
            Gets or sets the Folder guid.
            This can be used to control where the project node appear in the New Project dialog
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.NewPrjTemplateRegKey(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Gets the path to the registry key for new project templates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.MakeRootedWithMacros(System.String,System.String)">
            <summary>
            Roots a relative path to another path, taking care to consider leading macros as already rooted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectTypeRegistrationAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Gets the path to the registry key that settings should fall under.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.ISet`1"/> equality comparer that uses
            <see cref="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})"/> to determine equality.
            </summary>
            <typeparam name="T">The type of element contained in the sets.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1.instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1"/> class.
            </summary>
            <devremarks>
            Suppresses the default constructor so this class is a singleton.
            </devremarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1.Default">
            <summary>
            Gets the singleton instance to this equality comparer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1.Equals(System.Collections.Immutable.IImmutableSet{`0},System.Collections.Immutable.IImmutableSet{`0})">
            <summary>
            Checks equality between two sets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SetEqualityComparer`1.GetHashCode(System.Collections.Immutable.IImmutableSet{`0})">
            <summary>
            Gets the hashcode for a set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration">
            <summary>
            Core implementation of ProjectConfiguration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.name">
            <summary>
            See "Name" property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.dimensions">
            <summary>
            The names and values of configuration dimensions contained in this project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.#ctor(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration"/> class.
            </summary>
            <param name="name"> The name of this project configuration. Cannot be null or empty. </param>
            <param name="dimensions"> The names and values of configuration dimensions contained in this project configuration. Cannot be null. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.Name">
            <summary>
            See ProjectConfiguration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.Dimensions">
            <summary>
            See ProjectConfiguration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.Equals(System.Object)">
            <summary>
            See ProjectConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.GetHashCode">
            <summary>
            Returns hash code based on the various properties of the configuration
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.ToString">
            <summary>
            Returns the Name of this configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardProjectConfiguration.Equals(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Compares two ProjectConfigurations for equality based on configuration dimensions. Name is not considered in the comparison.
            </summary>
            <param name="other">Object to compare against</param>
            <returns>True if the objects represent the same configuration, even if reference equality is not true.</returns>
            <remarks> We don't use name in the comparison since name will not end up being an MSBuild property/metadata. </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers">
            <summary>
            StringComparers to use for common scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.ProjectPropertyName">
            <summary>
             Gets the comparer to use for MSBuild project property names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.ProjectPropertyValue">
            <summary>
             Gets the comparer to use for MSBuild project property values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.File">
            <summary>
             Gets the comparer to use for file paths.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.MSBuildTargetName">
            <summary>
            Gets the comparer to use for MSBuild target names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.MSBuildItemName">
            <summary>
             Gets the comparer to use for MSBuild item names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.MSBuildItemType">
            <summary>
             Gets the comparer to use for MSBuild item types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StringComparers.RuleName">
            <summary>
            Gets the equality comparer to use for Rule names.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer">
            <summary>
            Equality comparer for <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.DefaultInstance">
            <summary>
            Backing static field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.Default"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.IgnorePropertySheetInstance">
            <summary>
            Backing static field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.IgnorePropertySheet"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.CaseSensitiveInstance">
            <summary>
            Backing static field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.CaseSensitiveItemNames"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.ignoreFile">
            <summary>
            A value indicating whether this instance should ignore the property sheet member when comparing instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.itemNameComparer">
            <summary>
            Whether a case sensitive compare should be used on the item name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer"/> class.
            </summary>
            <param name="ignoreFile">A value indicating whether this instance should ignore the File member when comparing instances.</param>
            <param name="caseSensitive">A value indicating whether a case sensitive compare should be used on the item name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.Default">
            <summary>
            Gets a comparer that considers every property in the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.IgnorePropertySheet">
            <summary>
            Gets a comparer that considers <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemType"/> and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/>
            but ignores the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.File"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.CaseSensitiveItemNames">
            <summary>
            Gets a comparer that considers <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/>
            to be case sensitive.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.Equals(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> for equality.
            </summary>
            <param name="x">The first instance to consider.</param>
            <param name="y">The second instance to consider.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContextEqualityComparer.GetHashCode(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Calculates a hash code for a given instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/>.
            </summary>
            <param name="value">The instance to compute the hash code for.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools">
            <summary>
            Provides tools for working with CPS snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.CompareSnapshots(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Compares to project snapshots and generates a change description for them.
            </summary>
            <param name="before">The "before" snapshot.</param>
            <param name="after">The "after" snapshot.</param>
            <param name="renameHints">Hints for resolving new/missing items as renames.  Each tuple represents the old and new name in a rename operation.</param>
            <returns>A change description.  Never null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.SynthesizeDiffFromNothing(System.Collections.Immutable.IImmutableDictionary{System.String,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot})">
            <summary>
            Generates a project delta object that treats a project snapshot as if it is all newly added data.
            </summary>
            <param name="initialSnapshot">The snapshot to treat as all new data.</param>
            <returns>A dictionary whose keys are rule names and values are change descriptions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.GetSimpleRenames(System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Extracts the rename hints that qualify as simple user renames.
            </summary>
            <param name="beforeItems">The items appearing in a "before" snapshot.</param>
            <param name="afterItems">The items appearing in an "after" snapshot.</param>
            <param name="renameHints">The rename hints collected recently.</param>
            <returns>The map of simply renamed files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ApplyRenameHints(System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}},System.Collections.Immutable.ImmutableHashSet{System.String}@,System.Collections.Immutable.ImmutableHashSet{System.String}@)">
            <summary>
            Modifies sets of added removed items based on rename hints.
            </summary>
            <param name="before">The items appearing in a "before" snapshot.</param>
            <param name="after">The items appearing in an "after" snapshot.</param>
            <param name="renameHints">The rename hints collected recently.</param>
            <param name="addedItems">The set of items that appear only in the 'after' snapshot.</param>
            <param name="removedItems">The set of items that appear only in the 'before' snapshot.</param>
            <returns>The map of simply renamed files.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot">
            <summary>
            Represents a snapshot that does not contain any data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot.#ctor(System.String,System.Collections.Immutable.IImmutableDictionary{System.Guid,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot"/> class.
            </summary>
            <param name="ruleName">The name of the rule this snapshot represents.</param>
            <param name="dataSourceVersions">The data source versions to associate with this empty snapshot.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot.Items">
            <summary>
            Gets an empty dictionary of items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot.Properties">
            <summary>
            Gets an empty dictionary of properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.EmptyProjectRuleSnapshot.DataSourceVersions">
            <summary>
            Gets the version of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshot"/> from which this rule snapshot was created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff">
            <summary>
            An immutable description of the difference between two <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.EmptyInstance">
            <summary>
            An static empty instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.changedItems">
            <summary>
            backing field for lazily initialized changed items
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.changedProperties">
            <summary>
            backing field for lazily initialized changed properties
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.addedRemovedItems">
            <summary>
            backing field of lazily initialized added and removed items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff"/> class.
            </summary>
            <param name="before">The before snapshot.</param>
            <param name="after">The after snapshot.</param>
            <param name="renameHints">Rename hints, if available.  May be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff"/> class
            that describes no changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.AnyChanges">
            <summary>
            Gets a value indicating whether the snapshots being compared have any differences at all.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.AddedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.RemovedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.RenamedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.ChangedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.ChangedProperties">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes">
            <summary>
            data holder to lazily calculate changes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes.AddedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes.RemovedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes.RenamedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes"/> class
            that describes no changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes.#ctor(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot,System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.SnapshotTools.ProjectChangeDiff.Changes"/> class.
            </summary>
            <param name="before">The before snapshot.</param>
            <param name="after">The after snapshot.</param>
            <param name="renameHints">Rename hints, if available.  May be null.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities">
            <summary>
            This class contains methods that are useful for logging.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.Source">
            <summary>
            The CPS trace source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.CurrentLevel">
            <summary>
            Gives the current Travel Level setting for the CPS tracing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceVerbose(System.String)">
            <summary>
            Requests a verbose trace message to be written out to the listeners, if the
            </summary>
            <param name="formattedMessage">The message to be traced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceVerbose(System.String,System.Object[])">
            <summary>
            Requests a verbose trace message to be written out to the listeners, if the
            </summary>
            <param name="unformattedMessage">The unformatted message to be traced.</param>
            <param name="args">The arguments to be formatted into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceWarning(System.String)">
            <summary>
            Requests a warning trace message to be written out to the listeners, if the
            </summary>
            <param name="formattedMessage">The message to be traced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceWarning(System.String,System.Object[])">
            <summary>
            Requests a warning trace message to be written out to the listeners, if the
            </summary>
            <param name="unformattedMessage">The unformatted message to be traced.</param>
            <param name="args">The arguments to be formatted into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceError(System.String)">
            <summary>
            Requests an error trace message to be written out to the listeners, if the
            </summary>
            <param name="formattedMessage">The message to be traced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceError(System.String,System.Object[])">
            <summary>
            Requests an error trace message to be written out to the listeners, if the
            </summary>
            <param name="unformattedMessage">The unformatted message to be traced.</param>
            <param name="args">The arguments to be formatted into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.TraceUtilities.TraceException(System.String,System.Exception)">
            <summary>
            Requests an error trace message to be written out to the listeners
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute">
            <summary>
            Identifies a method with a <c>Func&lt;Task&gt;</c> signature as one that must be invoked
            when a project is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute.ContractName">
            <summary>
            The contract name for delegates that should complete execution
            before any configuration is loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute"/> class.
            </summary>
            <param name="startAfter">The checkpoint after which the method may be invoked.</param>
            <param name="completeBy">The checkpoint that must not proceed before the method has completed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute.RequiresUIThread">
            <summary>
            Gets or sets a value indicating whether the method must be invoked on the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute.CompleteBy">
            <summary>
            Gets or sets the project load checkpoint that must not proceed before this delegate has completed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoad2Attribute.StartAfter">
            <summary>
            Gets or sets the project load checkpoint that must be reached before this delegate is invoked.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute">
            <summary>
            An attribute that causes a method to be invoked automatically when an UnconfiguredProject gets loaded.
            The method must satisfy the signature of an Action delegate (no args, no return value).
            </summary>
            <remarks>
            This attribute cannot be inherited because ExportAttribute cannot be inherited,
            and InheritedExportAttribute does not allow application on methods.
            </remarks>
            <devremarks>
            This attribute used to support a "WaitForCompletion" property that would cause ConfiguredProjects
            to block on loading until the delegate was executed.  This had to be removed because it introduced
            deadlocks when the delegate had not completed yet, and a thread holding any kind of project lock
            was trying to load a configured project, and the delegate also had or needed a lock.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute.ContractName">
            <summary>
            The contract name for delegates that should be auto-loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute.InitialConfigurationContractName">
            <summary>
            The contract name for delegates that should be auto-loaded when an initial configuration is known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute.InitialProjectServiceContractName">
            <summary>
            The contract name for delegates that should be executed once
            for the entire project service instead of once per project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute"/> class.
            </summary>
            <param name="afterInitialActiveConfigurationKnown">
            A value indicating whether this delegate should not be executed until the initial
            active configuration is known.
            </param>
            <param name="afterInitialProjectService">
            A value indicating whether this delegate should be executed only once
            for the entire project service instead of once per project.
            This is only used when afterInitialActiveConfigurationKnown is false.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UnconfiguredProjectAutoLoadAttribute.RequiresUIThread">
            <summary>
            Gets or sets a value indicating whether this method must be invoked on the UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools">
            <summary>
            Extension methods to work with MEF concepts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.AppliesToIntentionallyInconsistent">
            <summary>
            The name of MEF part metadata that identifies a part that has multiple exports that are intentionally
            decorated with inconsistent AppliesTo metadata values.
            </summary>
            <remarks>
            The value of this metadata should be a boolean value and is expected to be <c>true</c> when present.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.EmptyStringArray">
            <summary>
            An empty string array.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DefaultReportSettings">
            <summary>
            Default report settings to use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.SemicolonDelimiter">
            <summary>
            A single instance of an array which contains a semicolon array, this is used in methods that take a char array as a delimiter char.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.CommaDelimiter">
            <summary>
            Single, static instance of an array that contains a comma, which is used to split strings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ProjectTreeChildrenFilter">
            <summary>
            Criteria that will skip certain branches of a project tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DimensionNamesSeparator">
            <summary>
            Separator used to create the "canonical name aka Debug|Win32"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsCapabilityMatch(System.String,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Checks whether a given capability expression matches against a given set of project or service capabilities.
            </summary>
            <param name="capabilityExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="presentCapabilities">The set of capabilities present.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsCapabilityMatch(System.String,System.Func{System.String,System.Object,System.Boolean},System.Object)">
            <summary>
            Checks whether a given capability expression matches against a given set of project or service capabilities.
            </summary>
            <param name="capabilityExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="symbolDefinedCheck">The function to call to check whether a specific symbol has been defined.</param>
            <param name="symbolDefinedCheckArgument">The value to pass to <paramref name="symbolDefinedCheck"/> as the second argument.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.LoadedProject(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService)">
            <summary>
            Provides protection for some operation that the project will not close before the completion of some *synchronous* work.
            </summary>
            <param name="asyncTaskService">The async task service used to detect/postpone project unload.</param>
            <returns>An object to dispose at the conclusion of the asynchronous task.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the project was already unloaded before this method was invoked.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.LoadedProjectAsync``1(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Provides protection for some operation that the project will not close before the completion of some task.
            </summary>
            <typeparam name="T">The type of value returned by the joinable.</typeparam>
            <param name="asyncTaskService">The async task service used to detect/postpone project unload.</param>
            <param name="action">The action to execute within the context of a loaded project.</param>
            <param name="registerFaultHandler">A value indicating whether faulted tasks should be logged and reported to the user.</param>
            <returns>An object to dispose at the conclusion of the asynchronous task.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the project was already unloaded before this method was invoked.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.LoadedProjectAsync(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Provides protection for some operation that the project will not close before the completion of some task.
            </summary>
            <param name="asyncTaskService">The async task service used to detect/postpone project unload.</param>
            <param name="action">The action to execute within the context of a loaded project.</param>
            <param name="registerFaultHandler">A value indicating whether faulted tasks should be logged and reported to the user.</param>
            <returns>An object to dispose at the conclusion of the asynchronous task.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the project was already unloaded before this method was invoked.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.SortByImportPrecedence``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.Utilities.IOrderPrecedenceMetadataView}},Microsoft.VisualStudio.ProjectSystem.Utilities.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Orders a sequence of imports in precedence order.
            </summary>
            <typeparam name="T">The type of the imports.</typeparam>
            <param name="imports">The sequence of imports.</param>
            <param name="orderingStyle">A spec for which direction the exports should be sorted.</param>
            <returns>An ordered sequence of imports.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ToContext(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Creates a project properties context that points to a given
            </summary>
            <param name="item">The item to create a context for.</param>
            <param name="unconfiguredProject">The unconfigured project to which this item applies.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.Derive``2(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue{``0},System.Func{``0,``1})">
            <summary>
            Constructs an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1"/> wrapper around a value constructed from an existing instance.
            </summary>
            <typeparam name="T">The type of value that acts as the data source.</typeparam>
            <typeparam name="TOut">The type of value derived from <typeparamref name="T"/>.</typeparam>
            <param name="projectVersionedValue">The versioned value that is the data source.</param>
            <param name="transform">A transform that computes a <typeparamref name="TOut"/> from a <typeparamref name="T"/>.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1"/> with the same data source versions as <paramref name="projectVersionedValue"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetSchema(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot,System.String,System.String)">
            <summary>
            Gets the rule from the specified catalog, if such a catalog and rule exist.
            </summary>
            <param name="snapshot">The snapshot to read from.</param>
            <param name="catalogName">The name of the catalog.</param>
            <param name="ruleName">The name of the rule.</param>
            <returns>The rule, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetEffectiveToolsVersion(Microsoft.VisualStudio.ProjectSystem.ProjectService,Microsoft.Build.Construction.ProjectRootElement,Microsoft.Build.Evaluation.ProjectCollection)">
            <summary>
            Gets the ToolsVersion value that the caller should pass into MSBuild to create
            an evaluated Project.
            </summary>
            <param name="projectService">The project service.</param>
            <param name="projectRootElement">The project root element to scan.</param>
            <param name="projectCollection">The project collection that will evaluate the project.</param>
            <returns>The value to pass to the Project constructor's toolsVersion parameter.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.CreateHostObjectsAsync``1(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ProjectSystem.Build.IHostObjectProvider,``0}})">
            <summary>
            Assembles a set of host objects to include in the build.
            </summary>
            <typeparam name="TMetadata">The type of metadata appear on the providers.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ToImmutableDictionaryAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Performs transformations on a set of elements concurrently and returns a map of the before and after transformation elements.
            </summary>
            <typeparam name="TBefore">The type of element in the set.</typeparam>
            <typeparam name="TAfter">The type of element produced by the transformation.</typeparam>
            <param name="set">The set to transform.</param>
            <param name="asyncTransform">The transformation function</param>
            <param name="cancellationToken">A cancellation token to supply to the transformation function.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.SynthesizeProjectConfiguration(System.String,System.String)">
            <summary>
            Creates a ProjectConfiguration object representing the traditional Visual Studio "configuration" and "platform" properties.
            </summary>
            <param name="configuration">The simple configuration name (i.e. "Debug")</param>
            <param name="platform">The platform name (i.e. "Win32")</param>
            <returns>A configuration with the standard name and two dimension properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.SynthesizeProjectConfiguration(System.String)">
            <summary>
            Creates a ProjectConfiguration object representing the traditional Visual Studio "configuration" and "platform" properties.
            </summary>
            <param name="hybridConfigName">The full project configuration name (i.e. "Debug|Win32")</param>
            <returns>A configuration with the standard name and two dimension properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ComposeCanonicalName(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Given the Configuration and Platform property values in a project configuration, compose the "Config|Platform" string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ComposeCanonicalName(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Given the Configuration and Platform property values in a project configuration, compose the "Config|Platform" string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ComposeConfigurationCanonicalName(System.String,System.String)">
            <summary>
            Composes a "Debug" and "Win32" string into its "Debug|Win32" form.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.SplitCanonicalProjectConfigurationName(System.String,System.String@,System.String@)">
            <summary>
            Splits a "Debug|Win32" string into individual "Debug" and "Win32" strings.
            </summary>
            <param name="projectConfigurationName">The "Debug|Win32" formatted string.</param>
            <param name="configurationName">The "Debug" string</param>
            <param name="platformName">The "Win32" string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.FindHint``1(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint}},System.String)">
            <summary>
            Finds specific details about the change of some file.
            </summary>
            <typeparam name="T">The type of details to search for.  Must bear a <see cref="T:System.Runtime.InteropServices.GuidAttribute"/> on the type.</typeparam>
            <param name="hints">The map of hints to search.</param>
            <param name="file">The file to find details for.</param>
            <returns>The details found, or <c>null</c> if none were available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.FindHint(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint}},System.String,System.Guid)">
            <summary>
            Finds specific details about the change of some file.
            </summary>
            <param name="hints">The map of hints to search.</param>
            <param name="file">The file to find details for.</param>
            <param name="kind">The kind of hint to find.</param>
            <returns>The details found, or <c>null</c> if none were available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.Add``1(``0,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint)">
            <summary>
            Adds a project change hint to its appropriate place in a map.
            </summary>
            <typeparam name="T">The type of map.</typeparam>
            <param name="hintMap">The map.</param>
            <param name="hint">The hint.</param>
            <returns>The updated map.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.Rethrow(System.Exception)">
            <summary>
            Rethrows a previously thrown exception while preserving the callstack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetActiveConfigAndCancellationToken(Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject@,System.Threading.CancellationToken@)">
            <summary>
            Atomically gets the active configured project and the cancellation token for it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsAllowed(Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus)">
            <summary>
            Gets a value indicating whether the build may be requested.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IncrementCountOptimistically``2(``0@,``1)">
            <summary>
            Uses an optimistic transaction to increment the counter on some value without using locks.
            </summary>
            <typeparam name="TMap">The type of map being updated.</typeparam>
            <typeparam name="T">The type of value whose ref count is being tracked.</typeparam>
            <param name="refCountingMap">The map keeping the ref counts.</param>
            <param name="value">The value whose ref count is being incremented.</param>
            <returns><c>true</c> if the ref count was just incremented to 1; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DecrementCountOptimistically``2(``0@,``1)">
            <summary>
            Uses an optimistic transaction to decrement the counter on some value without using locks.
            </summary>
            <typeparam name="TMap">The type of map being updated.</typeparam>
            <typeparam name="T">The type of value whose ref count is being tracked.</typeparam>
            <param name="refCountingMap">The map keeping the ref counts.</param>
            <param name="value">The value whose ref count is being decremented.</param>
            <returns><c>true</c> if the ref count was just decremented to 0; <c>false</c> otherwise.</returns>
            <remarks>If the ref count drops to 0, the entry in the map is removed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.InvokeAllCollectingExceptions(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.InvokeAllCollectingExceptions``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <typeparam name="T">The type of event args accepted by the callback.</typeparam>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.InvokeAllCollectingExceptions(System.Collections.Generic.IEnumerable{System.EventHandler},System.Object,System.EventArgs)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetResultOrThrowFirstException``1(System.Threading.Tasks.Task{``0})">
            <summary>
            This method will run a task and return it's result.  If the task fails by throwing an aggregate exception,
            the method will flatten the aggregate exception and then rethrow the first exception in the InnerExceptions list.
            </summary>
            <typeparam name="T">The return type of the task</typeparam>
            <param name="task">A task that returns T</param>
            <returns>The result of the task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.InvokeAllCollectingExceptions``1(System.Collections.Generic.IEnumerable{System.EventHandler{``0}},System.Object,``0)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <typeparam name="T">The type of event args accepted by the callback.</typeparam>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.WhenAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Invokes an async delegate on every item of the specified sequence.
            Any and all exceptions are returned at the conclusion of the sequence
            in aggregate.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="data">The sequence of data.</param>
            <param name="asyncOperation">The async operation to perform.</param>
            <returns>
            A task that completes when all async operations are done.
            The task will fault if any of the async operations faulted.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.WhenAll``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.Tasks.Task},``1)">
            <summary>
            Invokes an async delegate on every item of the specified sequence.
            Any and all exceptions are returned at the conclusion of the sequence
            in aggregate.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <typeparam name="TArg">The type of argument to pass into the <paramref name="asyncOperation"/> delegate.</typeparam>
            <param name="data">The sequence of data.</param>
            <param name="asyncOperation">The async operation to perform.</param>
            <param name="argument">An argument to pass into the <paramref name="asyncOperation"/> delegate.</param>
            <returns>
            A task that completes when all async operations are done.
            The task will fault if any of the async operations faulted.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Calls the <see cref="M:System.IDisposable.Dispose"/> method on an object, allowing the object to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DisposeIfNotNullAsync(Microsoft.VisualStudio.Threading.IAsyncDisposable)">
            <summary>
            Calls the <see cref="M:Microsoft.VisualStudio.Threading.IAsyncDisposable.DisposeAsync"/> method on an object, allowing the object to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DisposeAllIfNotNull(System.Collections.Generic.IEnumerable{System.IDisposable},System.Boolean)">
            <summary>
            Calls <see cref="M:System.IDisposable.Dispose"/> on all elements in a sequence,
            allowing the sequence itself or elements inside it to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.DisposeAllIfNotNullAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Threading.IAsyncDisposable},System.Boolean)">
            <summary>
            Calls <see cref="M:Microsoft.VisualStudio.Threading.IAsyncDisposable.DisposeAsync"/> on all elements in a sequence,
            allowing the sequence itself or elements inside it to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.WaitAllWithLooseStaSupport(System.Threading.WaitHandle[],System.TimeSpan)">
            <summary>
            Calls <see cref="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)"/> on MTA threads,
            and provides a *rough* WaitAll behavior on STA threads (it blocks on all handles once),
            but not simultaneously.
            </summary>
            <param name="handles">The handles to wait on.</param>
            <param name="timeout">The maximum time to wait before returning <c>false</c></param>
            <returns>A value indicating whether all handles were free within the timeout.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.WaitAnyWithRetryLoop(System.Threading.WaitHandle[])">
            <summary>
            Does a WaitAny on a set of handles, but passes in a timeout and retries in a loop to
            allow for a better debugging experience when stuck on a WaitAny.
            </summary>
            <param name="handles">The handles to wait on.</param>
            <returns>The result of WaitHandle.WaitAny when sucessful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetProjectConfigurationsWithDimensionAsync(Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService,System.String,System.String)">
            <summary>
            Enumerates all the sets of conditions for known project configurations that include
            a given simple configuration name (i.e. Debug).
            </summary>
            <param name="projectConfigurationsService">The project configuration service.</param>
            <param name="dimensionName">The dimension name to search for (e.g. "Configuration" or "Platform").</param>
            <param name="dimensionValue">The dimension value to search for (e.g. "Debug" or "Release")</param>
            <returns>A sequence of matching configurations.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetAbsolutePathOf(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets the absolute path for some file, assuming that if it is relative it is relative to the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetProjectPropertiesProvider(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider,Microsoft.VisualStudio.ProjectSystem.Utilities.INamedExportMetadataView}})">
            <summary>
            Gets the provider for properties stored in the user file of a given <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetUserPropertiesProvider(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider,Microsoft.VisualStudio.ProjectSystem.Utilities.INamedExportMetadataView}})">
            <summary>
            Gets the provider for properties stored in the user file of a given <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Gets the properties for some context (property sheet, item type, item, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value for a given key in a dictionary, or the default value if the key is not in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.Cast``1(System.Object)">
            <summary>
            Casts an object to a given type.
            </summary>
            <typeparam name="T">The type to cast the given object to.</typeparam>
            <remarks>
            The idea here is not to cast any object, but specifically objects that you know
            implement some interface, but you need the concrete class that implements the interface.
            If you know what concrete class you're expecting, you can use this method to cast
            and provide a meaningful error message if it fails.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.FindFirstDuplicate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks for duplicates in a sequence.
            </summary>
            <typeparam name="T">The type of elements that are being checked.</typeparam>
            <returns>
            Either the first element that occurs more than once in the sequence,
            or null if all elements in the sequence are unique.
            </returns>
            <remarks>
            An O(N) algorithm.
            Relies on GetHashCode() performing correctly.
            Discretely different objects that share a hash code are recognized as
            different objects provided their Equals methods return false.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.AreEquivalent``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Tests two dictionaries to see if their contents are identical.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.  May be null.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.  May be null.</typeparam>
            <param name="dictionary1">One dictionary to compare.</param>
            <param name="dictionary2">The other dictionary to compare.</param>
            <param name="valueComparer">The comparer to use to determine equivalence of the dictionary values.</param>
            <returns><c>true</c> if the dictionaries' contents are equivalent.  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.AreEquivalent``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Tests two dictionaries to see if their contents are identical.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.  May be null.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.  May be null.</typeparam>
            <param name="dictionary1">One dictionary to compare.</param>
            <param name="dictionary2">The other dictionary to compare.</param>
            <param name="valueComparer">The comparer to use to determine equivalence of the dictionary values.</param>
            <returns><c>true</c> if the dictionaries' contents are equivalent.  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.AreEquivalent``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},System.Collections.Immutable.IImmutableDictionary{``0,``1})">
            <summary>
            Tests two dictionaries to see if their contents are identical.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.  May be null.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.  May be null.</typeparam>
            <param name="dictionary1">One dictionary to compare.</param>
            <param name="dictionary2">The other dictionary to compare.</param>
            <returns><c>true</c> if the dictionaries' contents are equivalent.  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service by a given interface.
            </summary>
            <typeparam name="T">The interface to fetch an object for.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IndexOfSorted``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Discovers where an item should appear in a sorted list.
            </summary>
            <typeparam name="T">The type of elements that are stored in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="element">The element.</param>
            <param name="sort">The sorting routine that was used to sort the existing elements in the list.  A value of <c>null</c> indicates that <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.</param>
            <returns>The index where <paramref name="element"/> would appear in the list if it was present (which it may!).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ForEachAggregateExceptions``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Aggregate exceptions when applying action on the sequence items.
            </summary>
            <typeparam name="T">The type of the element that is stored in the list.</typeparam>
            <param name="sequence">The list.</param>
            <param name="action">Action to apply.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ForEachAggregateExceptionsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Aggregate exceptions when applying action on the sequence items.
            </summary>
            <typeparam name="T">The type of the element that is stored in the list.</typeparam>
            <param name="sequence">The list.</param>
            <param name="action">Action to apply.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IndexOfSorted``2(System.Collections.Generic.IList{``0},``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Discovers where an item should appear in a sorted list.
            </summary>
            <typeparam name="T">The type of elements that are stored in the list.</typeparam>
            <typeparam name="TKey">The type of value extracted from each element that is used in the comparison.</typeparam>
            <param name="list">The list.</param>
            <param name="element">The element.</param>
            <param name="selector">A lambda that translates <typeparamref name="T"/> to <typeparamref name="TKey"/>.</param>
            <param name="sort">The sorting routine that was used to sort the existing elements in the list.  A value of <c>null</c> indicates that <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.</param>
            <returns>The index where <paramref name="element"/> would appear in the list if it was present (which it may!).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsEnvironmentVariableSettingEnabled(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether an environment variable overrides some default boolean setting.
            </summary>
            <param name="name">The name of the environment variable.</param>
            <param name="defaultValue">The default value to use if the environment variable is not defined or is set to an unrecognized value.</param>
            <returns>The value from the default or from the environment variable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ExtractUserActionableMessage(System.Exception)">
            <summary>
            Discovers the message within the specified exception that is most likely to be useful
            and friendly to the user for display in a message box.
            </summary>
            <param name="exception">The exception to derive a message from.</param>
            <returns>An exception message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.ExtractInterestingException(System.AggregateException,System.Boolean)">
            <summary>
            Discovers the exception within the specified aggregate exception that is most likely to be useful
            and friendly to the user for display in a message box.
            </summary>
            <param name="exception">The exception to derive a message from.</param>
            <param name="preferNonInvalidOperationExceptions">A value indicating whether to look for and return exceptions that are not InvalidOperationException if they are available.</param>
            <returns>An exception message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.SynthesizeEmptyRule(System.String)">
            <summary>
            Creates an empty Rule.
            </summary>
            <param name="itemType">The item type the rule represents.  May be null or empty to represent a project-level property rule.</param>
            <returns>An empty rule.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.WriteProjectTree(System.IO.TextWriter,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.Boolean,System.Int32)">
            <summary>
            Renders a tree as a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetDefaultMetadata(Microsoft.VisualStudio.ProjectSystem.Items.IContentType)">
            <summary>
            Gets the default metdata of the given content type from the xaml files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.CreateCollection(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,System.String)">
            <summary>
            Creates a JoinableTaskCollection and names it.
            </summary>
            <param name="context">The JoinableTaskContext to use to create the collection.</param>
            <param name="displayName">
            A human-readable name that may appear in hang reports.
            This should *not* be set to a value that may disclose
            personally identifiable information or other confidential data
            since this value may be included in hang reports sent to a third party.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.CreateCollection(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,System.Object)">
            <summary>
            Creates a JoinableTaskCollection and names it.
            </summary>
            <param name="context">The JoinableTaskContext to use to create the collection.</param>
            <param name="owner">
            The object which owns this collection, and from which a DisplayName will derived from the
            full name  of the containing type.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsPowerOfTwoOrZero(System.Int32)">
            <summary>
            Checks if a number is a power of two or zero.
            </summary>
            <remarks>This can be used to check if only a single enum flag is being set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsPowerOfTwo(System.Int32)">
            <summary>
            Checks if a number is a power of two
            </summary>
            <remarks>This can be used to check if only a non-zero single enum flag is being set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.IsIoRelatedException(System.Exception)">
            <summary>
            If the given exception is file IO related or expected return true.
            Otherwise, return false.
            </summary>
            <param name="e">The exception to check.</param>
            <returns> True if exception is IO related or expected otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetString(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Gets a human-readable textual representation of an image moniker.
            </summary>
            <param name="imageMoniker">The image moniker. Null is allowed.</param>
            <returns>A ({guid} id) formatted string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProjectSystemTools.GetDefaultErrorReportSubmitUIOptions">
            <summary>
            Gets the default customized UI options for the submit consent dialog.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2">
            <summary>
            An IDictionary&lt;TKey, TValue&gt; that preserves item order.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.#ctor(System.Int32,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Item(`0)">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#ContainsKey(`0)">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#TryGetValue(`0,`1@)">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See IDictionary&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.Create(System.Int32)">
            <summary>
            Initializes a new instance of an ordered IDictionary&lt;TKey, TValue&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.Create(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of an ordered IDictionary&lt;TKey, TValue&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OrderPreservingDictionary`2.Create(System.Int32,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of an ordered IDictionary&lt;TKey, TValue&gt;.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties">
            <summary>
            Read/write of properties that have well-known names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.DebuggerSymbolsPathProperty">
            <summary>
            The name of the property that the symbols search path is persisted to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.CommonPropertySerializer">
            <summary>
            A cached read-only copy of the serializer for common types in this file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.CommonTypeSerializer">
            <summary>
            An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer"/> that can only serialize/deserialize the
            <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.SimpleTypes"/> as well as the common types defined in CommonTypes.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.InitializeCommonTypeSerializer">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer"/> with mappings for all the common types in this file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.VCCLCompilerTool">
            <summary>
            Property names and access for the C++ compiler tool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.VCCLCompilerTool.GetProjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider)">
            <summary>
            Gets the IProjectProperties to access project-level settings for the C++ compiler tool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.VCCLCompilerTool.GetProjectPropertyReader(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider)">
            <summary>
            Gets the property reader for project-level C++ compiler tool settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.RemoteDebugger">
            <summary>
            Properties used by the Remote debugger
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.RemoteDebugger.DebuggerConnectionType">
            <summary>
            The two different connection types usable by the remote debugger.
            </summary>
            <remarks>
            Designed to resemble Microsoft.VisualStudio.VCProjectEngine.RemoteDebuggerType.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.RemoteDebugger.DebuggerConnectionType.Authentication">
            <summary>
            aka DbgRemote
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.RemoteDebugger.DebuggerConnectionType.NoAuthentication">
            <summary>
            aka DbgRemoteTCPIP
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.MpiDebugger">
            <summary>
            Properties used by the MPI debugger
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.MpiDebugger.NetworkSecurityMode">
            <summary>
            The methods the MPI debugger will allow for connecting the the remote debuggee.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.MpiDebugger.NetworkSecurityMode.LocalSubnet">
            <summary>
            Accept only connections on the same subnet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.MpiDebugger.NetworkSecurityMode.SpecifiedRange">
            <summary>
            Accept only connections on IP addresses fitting the NetworkFilterProperty value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommonProperties.MpiDebugger.NetworkSecurityMode.AnyAddress">
            <summary>
            Accept connections from any IP address.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext">
            <summary>
            Captures the context needed to read properties from a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.hashCode">
            <summary>
            The hash code (lazily evaluated) for this immutable object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext"/> class.
            </summary>
            <param name="itemType"> The item type whose properties we are interested in. </param>
            <param name="itemName"> The evaluated include of the item whose properties we are interested in. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.IsProjectFile">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.File">
            <summary>
            The name of the property sheet from where to source properties from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.ItemType">
            <summary>
            Used to select the section of the project manifest which contains properties for
            certain item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.ItemName">
            <summary>
            The name of the item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.GetContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String)">
            <summary>
            Factory to produce a context based on the unconfigured project.
            </summary>
            <param name="project"> The unconfigured project containing the property.  May be null.</param>
            <param name="itemType"> The item type whose properties we are interested in. </param>
            <param name="itemName"> The evaluated include of the item whose properties we are interested in. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.GetContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String,System.String)">
            <summary>
            Factory to produce a context based on the unconfigured project.
            </summary>
            <param name="project"> The unconfigured project containing the property, if available.</param>
            <param name="file"> The full path of the project file or property sheet when applicable. </param>
            <param name="itemType"> The item type whose properties we are interested in. </param>
            <param name="itemName"> The evaluated include of the item whose properties we are interested in. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.Equals(System.Object)">
            <summary>
            Tests equality between this context and another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.GetHashCode">
            <summary>
            Gets the hash code for this context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext">
            <summary>
            Implementation of ProjectPropertiesContext where the value for the File property is computed dynamically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.suffix">
            <summary>
            The suffix to apply to the project's full path during file path computation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.project">
            <summary>
            The project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.IsProjectFile">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.File">
            <summary>
            The file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext.HasSameLogicalFileReference(Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.DynamicProjectPropertiesContext)">
            <summary>
            Determines whether these two contexts refer to the same logical file
            </summary>
            <param name="other">The other project to which we should compare.</param>
            <returns>True if the two contexts refer to the same logical file</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext">
            <summary>
            Implementation of ProjectPropertiesContext where the File property never changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext.file">
            <summary>
            The file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext.IsProjectFile">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesContext.StaticProjectPropertiesContext.File">
            <summary>
            The file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryPropertyReader">
            <summary>
            A property reader that gets all properties and values out of a pre-filled dictionary of evaluated properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryPropertyReader.evaluatedProperties">
            <summary>
            The dictionary to read properties from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryPropertyReader.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryPropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.DictionaryPropertyReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExpandStringPropertyReader">
            <summary>
            Reads properties from a <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>'s MSBuild evaluation model.
            </summary>
            <remarks>
            This class is sealed because it calls SatisfyImportsFast(this), which isn't guaranteed to be accurate if there are derived types.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ExpandStringPropertyReader.configuredProject">
            <summary>
            The ConfiguredProject whose properties are to be read from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExpandStringPropertyReader.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ExpandStringPropertyReader"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.ExpandStringPropertyReader.ProjectLockService">
            <summary>
            Gets the ProjectLockService.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ExpandStringPropertyReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetEvaluatedPropertyValueAsync(System.String)"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools">
            <summary>
            A collection of extension methods for easy querying of output groups.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools.GetKeyOutputAsync(Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService,System.Threading.CancellationToken)">
            <summary>
            Gets the full path to the primary executable or library.
            </summary>
            <returns>Gets the path to the project's primary output, or null if it could not be determined.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools.OutputGroups">
            <summary>
            A set of well-known output group names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools.OutputGroups.BuiltProject">
            <summary>
            MSBuild .targets file string for BuiltProjectOutputGroup.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools.MetadataNames">
            <summary>
            A set of well-known output group item metadata names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools.MetadataNames.IsKeyOutput">
            <summary>
            MSBuild .targets file string for IsKeyOutput.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.OutputGroupsTools.MetadataNames.FinalOutputPath">
            <summary>
            MSBuild .targets file string for FinalOutputPath.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper">
            <summary>
            Helper class used for common path operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.NonFastPathCharacters">
            <summary>
            Wildcard characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.Combine(System.String,System.String)">
            <summary>
            A wrapper around Path.Combine() to handle cases where the original method could not handle.
            </summary>
            <param name="basePath">An absolute path to use as the root if <paramref name="path"/> is relative.</param>
            <param name="path">A relative or absolute path, that needs to be absolute.</param>
            <returns>
            A absolute path.
            </returns>
            <Remarks>
            This function needs to remain fast as it can be called many times.
            </Remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRooted(System.String,System.String)">
            <summary>
            Generates an absolute path from a base path and another path.
            </summary>
            <param name="basePath">
            An absolute path to use as the root if <paramref name="path"/> is relative.
            IMPORTANT: if basePath is a directory, it must end with a directory separator character or else
            it will be treated like a filename and discarded.
            </param>
            <param name="path">A relative or absolute path, that needs to be absolute.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="basePath"/> argument is not an absolute path.</exception>
            <returns>
            A normalized, absolute path.  A path with relative parents (i.e. c:\temp\tmp\..\a.txt) will never be returned.
            Not necessarily canonical, in that the file casing of the path is not guaranteed to be consistent.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRelative(System.String,System.String)">
            <summary>
            given the absolute location of a file, and a disc location, returns relative file path to that disk location.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path
            </param>
            <returns>
            The relative path (can be the full path when no relationship exists).
            If <paramref name="basePath"/> and <paramref name="path"/> are equivalent, the empty string is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRootedAndRelative(System.String,System.String,System.String@,System.String@)">
            <summary>Takes a path that may be relative or absolute, classifies it and creates its counterpart.</summary>
            <param name="path">The absolute or relative path.</param>
            <param name="basePath">
            An absolute path to use as the root if <paramref name="path"/> is relative.
            IMPORTANT: if basePath is a directory, it must end with a directory separator character or else
            it will be treated like a filename and discarded.
            </param>
            <param name="relativePath">Receives the relative path.</param>
            <param name="rootedPath">Receives the absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.ClassifyProjectPath(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String@,System.String@)">
            <summary>Takes a path that may be relative or absolute, classifies it and creates its counterpart.</summary>
            <param name="unconfiguredProject">The unconfigured project that forms the assumed base of a relative path.</param>
            <param name="path">The absolute or relative path.</param>
            <param name="projectRelativePath">Receives the relative path.</param>
            <param name="rootedPath">Receives the absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsOutsideProjectDirectory(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets a value indicating whether a given path lies inside or outside the project directory cone.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">A project-relative or absolute path. Must not be null. If empty, the method will always return <c>false</c>.</param>
            <returns><c>true</c> if <paramref name="path"/> represents a location outside the project directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsOutsideProjectDirectory(System.String,System.String)">
            <summary>
            Gets a value indicating whether a given path lies inside or outside the project directory cone.
            </summary>
            <param name="projectRootDirectory">The project's root directory. Must not be null or empty.</param>
            <param name="path">A project-relative or absolute path. Must not be null. If empty, the method will always return <c>false</c>.</param>
            <returns><c>true</c> if <paramref name="path"/> represents a location outside the project directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.TryMakeRelativeToProjectDirectory(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String@)">
            <summary>
            Gets the project-relative path for a given absolute (or project-relative) path.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">A project-relative or absolute path.</param>
            <param name="relativePath">Set to a project-relative path if <paramref name="path"/> is relative to the project directory, otherwise null.</param>
            <returns><c>true</c> if <paramref name="path"/> represents a location within the project directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRelative(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets the project-relative path for a given absolute (or project-relative) path.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">The path to create the project-relative path from.</param>
            <returns>A project-relative path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRelative(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Returns a set of file paths where all file paths are project-relative paths (unless they can only be expressed as absolute paths).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRooted(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets the absolute path for a given project-relative (or absolute) path.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">The path to create the absolute path from.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.EnsureTrailingSlash(System.String)">
            <summary>
            Make sure there is a trailing directory separator.
            </summary>
            <param name="path">directory path</param>
            <returns>directory path with trailing slash</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.CanonicalizeItemInFolder(System.String,System.String)">
            <summary>
            Retrieves the canonical name for a folder or file in a directory. Throws if the item does not exist.
            </summary>
            <param name="directoryName">The directory the item is in.</param>
            <param name="itemName">The name of the item.</param>
            <returns>The full path of the item with the last portion canonicalized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.GetValueAsPathAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty,System.Boolean,System.Boolean)">
            <summary>
            Gets a named property's value.
            Non-existent properties result in an empty string.
            </summary>
            <param name="property">The property whose value is being sought.</param>
            <param name="shouldBeQuoted">
            If true, the double quote character will be added to the beginning and end of the string (even if it was otherwise empty).
            If false, any leading/trailing double quote characters will be removed from the value before it is returned.
            </param>
            <param name="required">Whether an exception should be thrown if the property does not exist or has an empty value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsFileNameValid(System.String,System.Boolean)">
            <summary>
            Checks if a file name is valid.
            </summary>
            <param name="fileName">The file name to check.</param>
            <param name="useVsInvalidCharacters">Whether or not to use the Visual Studio set of invalid characters when checking.</param>
            <returns>True if the file name is valid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsSamePath(System.String,System.String,System.Boolean)">
            <summary>
            Compares two paths to see if they refer to the same file.
            </summary>
            <param name="file1">The first path.</param>
            <param name="file2">The second path.</param>
            <param name="caseSensitive">When true, the string comparison will be case senstive.  Default is false.</param>
            <returns><c>true</c> if the two paths match.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.EnsureDirectoryForFileExists(System.String)">
            <summary>
            Ensures that the path to a file is fully created so that a file might be created within it without error.
            </summary>
            <param name="pathToFile">The path to a file that may not exist already.  If a relative path is given it will be based on the process current directory.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.RemoveTrailingSlashes(System.String)">
            <summary>
            Removes trailing slashes from a path.
            </summary>
            <param name="path"> The path. </param>
            <returns> The path with all trailing slashes removed. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRootedIfNoMacros(System.String,System.String)">
            <summary>
            Given a relative or full path without macros, returns the full path. If the path contains
            macros, then it is returned unprocessed.
            </summary>
            <param name="baseDirectory"> The rooted base directory. It has to be a directory path and not a file path. </param>
            <param name="relativeOrFullPath"> The relative or full path, with or without macros. </param>
            <returns> The full path or the path itself (if it contains macros). </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.MakeRelativeIfNoMacros(System.String,System.String)">
            <summary>
            Given a relative or full path without macros, returns the relative path. If the path contains
            macros, then it is returned unprocessed.
            </summary>
            <param name="baseDirectory"> The rooted base directory. It has to be a directory path and not a file path. </param>
            <param name="relativeOrFullPath"> The relative or full path, with or without macros. </param>
            <returns> The relative path or the path itself (if it contains macros). </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsRooted(System.String)">
            <summary>
            Tests a path to see if it is absolute or not.  More reliable that Path.IsPathRooted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.VerifyThrowArgumentPathMustBeRooted(System.String,System.String)">
            <summary>
            Throws an ArgumentException if the given path is not an absolute path,
            non-blank and non-null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.GetExtensionWithoutPeriod(System.String)">
            <summary>
            Returns the extension (without the ".") for a path. Returns null, if the input is null. It
            returns empty if the input path does not have an extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.ChangeFileName(System.String,System.String)">
            <summary>
            Changes the filename in a given path.
            </summary>
            <param name="path">An absolute path.</param>
            <param name="newFileName">The new filename to set on the path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the file extension of a given file or path.
            </summary>
            <param name="path">An absolute path to change, which may or may not have an extension already.  Must not be null or empty.</param>
            <param name="newExtension">The new extension to apply to the file.  This may or may not include a preceding period.  Must not be null or empty.</param>
            <returns>The original path, with the altered extension.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsWildcardPatternMatch(System.String,System.String)">
            <summary>
            Checks whether a given string matches a given wildcard pattern (file.cpp and *.cpp).  Case insensitive.
            </summary>
            <param name="candidate">The string to check for a match.</param>
            <param name="wildcardPattern">A DOS-like file wildcard pattern.  For examples: *.cpp, c:\temp\*.cpp.</param>
            <remarks>
            Please note that wildcards can appear in directory names or file names, but cannot cross directory boundaries.
            For instance, c:\*\d.txt will match c:\f\d.txt, but not c:\f\a\d.txt.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.ContainsMacros(System.String)">
            <summary>
            Does a simple check to determine if the given path contains any
            MSBuild macros.
            </summary>
            <comment> For now, I am assuming macro = MSBuild property. This method can be
            suitable grown to includeitem type metadata, etc. </comment>
            <param name="path"> The path. </param>
            <returns> true, if it contains macros, else false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.CreateUriFromPath(System.String)">
            <summary>
            Helper function to create Uri object form path.
            </summary>
            <param name="path">path string</param>
            <returns>uri object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.CleanupLocalFilePath(System.String)">
            <summary>
            Fixes common problems with local paths like double-backslash.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsInDirectoryCone(System.String,System.String)">
            <summary>
            Detects whether a given file falls within a given directory.
            </summary>
            <param name="directory">The absolute, normalized path to the directory.</param>
            <param name="file">The absolute, normalized path to the file.</param>
            <returns><c>true</c> if the given file falls within the given directory.</returns>
            <remarks>
            The current implementation of this method does NOT normalize the paths before the check.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsFilePartInvalid(System.String,System.Boolean)">
            <summary>
            Checks whether a file part contains invalid characters. The file part can be any part of a non rooted path.
            </summary>
            <param name="filePart">The file part to check.</param>
            <param name="useVsInvalidCharacters">Whether or not to use the Visual Studio set of invalid characters when checking.</param>
            <returns>True if the path is invalid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.IsStringAllGivenCharacter(System.Char,System.String)">
            <summary>>
            Checks if the string is all the given character.
            </summary>
            <remarks>This is used to check that file names are not all '.' or ' '.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PathHelper.PathNeedsNormalization(System.String)">
            <summary>
            A few fast checks that determine whether normalization of a path is warranted.
            </summary>
            <param name="path">A non-empty path.</param>
            <returns><c>true</c> if normalization is likely needed; <c>false</c> if normalization doesn't appear to be needed.</returns>
            <remarks>
            In the interest of executing very fast (since this method is used in fast-or-slow-path checks)
            this method by no means is comprehensive, but it should catch the common causes for needing normalization.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesReader">
            <summary>
            Reads project properties via the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetEvaluatedPropertyValueAsync(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesReader.properties">
            <summary>
            The property store to read from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesReader.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties,Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.ProjectPropertiesReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetEvaluatedPropertyValueAsync(System.String)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader">
            <summary>
            A convenience class for reading strongly-typed properties from an MSBuild file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.serializer">
            <summary>
            The serializer that knows how to read properties in a type-safe way.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.Create(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.Create(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties,Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetValueAsync``1(System.String)">
            <summary>
            Gets the strongly-typed value for a given property.
            </summary>
            <typeparam name="T">The strong-type to convert the string value to.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetValueAsync``1(System.String,``0)">
            <summary>
            Gets the strongly-typed value for a given property.
            </summary>
            <typeparam name="T">The strong-type to convert the string value to.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetRequiredValueAsync``1(System.String)">
            <summary>
            Gets the value of a property and throws an error if the property is missing or empty.
            </summary>
            <typeparam name="T">The strong-type to convert the string value to.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetValueAsPathAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a named property's value.
            Non-existent properties result in an empty string.
            </summary>
            <param name="propertyName">The name of the property whose value is being sought.</param>
            <param name="shouldBeQuoted">
            If true, the double quote character will be added to the beginning and end of the string (even if it was otherwise empty).
            If false, any leading/trailing double quote characters will be removed from the value before it is returned.
            </param>
            <param name="required">Whether an exception should be thrown if the property does not exist or has an empty value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.Create(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertyReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            Gets the evaluated property value for some named property.  No special processing is performed.
            </summary>
            <returns>The evaluated value of the property, or <see cref="F:System.String.Empty"/> if the property was not found.</returns>
            <remarks>
            Implementations of this method should NEVER return null or throw an exception.
            Use the empty string when property names are not defined.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor">
            <summary>
            Class to implement the construction of a tool command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.AdditionalOptionsPropertyName">
            <summary>
            The string "AdditionalOptions", which identifies the specially recognized property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.readPropertyValueInContext">
            <summary>
            Indicates whether to read property values at the end of the project or at its point of definition in the context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.props">
            <summary>
            Dictionary to hold all properties of a rule for easy access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.args">
            <summary>
            String list to hold all names of argument properties of a parent property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.rule">
            <summary>
            The rule for which this class constructs the command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.projectLockService">
            <summary>
            A mechanism to obtain a project lock around a larger set of work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.IProjectLockService,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="projectLockService">The project lock service.</param>
            <param name="readPropertyValueInContext"> Indicates whether to obtain the values of the properties in the
            rule from evaluating to the end of the project or from evaluating till the definition of the property in
            the context. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.GetStringsCommonPart(System.Collections.Generic.IList{System.String},System.String,System.Boolean@)">
            <summary>
            Helper to get common part of multiple strings
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.GetAdditionalOptionsProperty">
            <summary>
            Obtains additional options property from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.ConstructCommandLineAsync">
            <summary>
            Constructs command line from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.GetAdditionalOptionsValueAsync">
            <summary>
            Obtains additional options string value from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.GetPropertyValueInAppropriateFormAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProperty)">
            <summary>
            Returns the value of a property in a form required by the namespace Microsoft.Build.Tasks.Xaml.CommandLineGenerator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.AutoGenerateCommandLineAsync">
            <summary>
            Constructs command line from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.EmitArgumentSwitchAsync(System.Collections.Generic.IList{Microsoft.VisualStudio.ProjectSystem.Properties.IArgument})">
            <summary>
            Command line construction helper: returns the switch or sequence of switches
            that should be emitted by all argument properties of a parent property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.EmitPropertySwitchAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProperty)">
            <summary>
            Command line construction helper: returns the switch that should be emitted
            by a property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.CommandLineConstructor.GetEvaluatedValueAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)">
            <summary>
            Returns the evaluated value of a property. Reads the in-context or at-the-end value
            depending on the flag pased to the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.AbsolutePathExpected">
            <summary>
              Looks up a localized string similar to An absolute path is required for this parameter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.AbsolutePathRequired">
            <summary>
              Looks up a localized string similar to An absolute path is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.Argument_EmptyArray">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must contain at least one element..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be an empty string (&quot;&quot;) or start with the null character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.Argument_Whitespace">
            <summary>
              Looks up a localized string similar to The parameter &quot;{0}&quot; cannot consist entirely of white space characters..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.BeforeAfterConstraintContradiction">
            <summary>
              Looks up a localized string similar to The &quot;after&quot; phase constraint must be set to a phase that occurs prior to the &quot;before&quot; phase constraint (or may be equal)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.CannotSaveProjectOutsideProjectDirectory">
            <summary>
              Looks up a localized string similar to The project file can only be saved into the project location &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.CollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to At least one element must be present in the collection..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DataflowLinkOptionsOrCloneable">
            <summary>
              Looks up a localized string similar to An instance of type DataflowLinkOptions or one that implements System.ICloneable was expected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DefaultCloseText">
            <summary>
              Looks up a localized string similar to Skip error report and continue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DefaultConsentDialogBody">
            <summary>
              Looks up a localized string similar to It may take several minutes to collect an error report..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DefaultConsentDialogHeader">
            <summary>
              Looks up a localized string similar to Visual Studio project system has encountered a non-fatal error..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DefaultOfflineSolutionCheckText">
            <summary>
              Looks up a localized string similar to Send error report and continue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DefaultOnlineSolutionCheckText">
            <summary>
              Looks up a localized string similar to Send error report and continue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DelimitedStringListMissingDelimiterAfterQuote">
            <summary>
              Looks up a localized string similar to A delimiting &apos;{0}&apos; character was expected after the closing quote at position {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DelimitedStringMissingClosingQuote">
            <summary>
              Looks up a localized string similar to The last element in the string list was missing its closing quote character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DelimiterCannotBeQuoteCharacter">
            <summary>
              Looks up a localized string similar to Delimiter cannot be the &quot; character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DeprecatedMethod">
            <summary>
              Looks up a localized string similar to The method or property &quot;{0}&quot; is deprecated and no longer implemented..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.DuplicateKey">
            <summary>
              Looks up a localized string similar to An element with the same key but a different value already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ImportCardinalityMismatchExpectsAtLeastOne">
            <summary>
              Looks up a localized string similar to Expected at least one export of the {0} contract after filtering but found {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ImportCardinalityMismatchExpectsAtMostOne">
            <summary>
              Looks up a localized string similar to Expected 0 or 1 exports of the {0} contract after filtering but found {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ImportCardinalityMismatchExpectsExactlyOne">
            <summary>
              Looks up a localized string similar to Expected exactly 1 export of the {0} contract after filtering but found {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.IncompatibleSnapshots">
            <summary>
              Looks up a localized string similar to The snapshots have conflicting rule names (&quot;{0}&quot; and &quot;{1}&quot;)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InternalExceptionMessage">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please contact Microsoft Product Support Services..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidCapabilityExpressionWithPosition">
            <summary>
              Looks up a localized string similar to Invalid capability expression at position {0} in the expression &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidEmptyOperation">
            <summary>
              Looks up a localized string similar to This operation does not apply to an empty instance..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidPropertyValue">
            <summary>
              Looks up a localized string similar to Error while reading property &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidStringToValueConversion">
            <summary>
              Looks up a localized string similar to String value &apos;{0}&apos; cannot be translated to any value from type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidTypeConversion">
            <summary>
              Looks up a localized string similar to There is no serialization code for type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidValueToStringConversion">
            <summary>
              Looks up a localized string similar to There is no serialization code for value: {0} from type: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.InvalidWhileWriteLockHeld">
            <summary>
              Looks up a localized string similar to This operation is not valid while a project write lock is held..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ItemTypeNotSupported">
            <summary>
              Looks up a localized string similar to The item type &apos;{0}&apos; is not supported by this project item provider..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.KeyNotFound">
            <summary>
              Looks up a localized string similar to The element with the given key was not found in this set..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.NoComponentImplementationFound">
            <summary>
              Looks up a localized string similar to No project component for interface &quot;{0}&quot; was found in this context..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.NoItemTypeForRule">
            <summary>
              Looks up a localized string similar to Expected to find item type for rule {0}. The rule file is either missing or malformed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.NotSupportedReadOnlyCollection">
            <summary>
              Looks up a localized string similar to This operation is not supported on a read-only collection..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterCannotHaveZeroLength">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot have zero length..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterContainsInvalidCharacters">
            <summary>
              Looks up a localized string similar to The parameter &quot;{0}&quot; with value &quot;{1}&quot; contains a disallowed character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterListHadNullElement">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; contained a null element which is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterMustEndWithAnySubstringSuffix">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; value must end with one of these suffixes &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterOutOfRange">
            <summary>
              Looks up a localized string similar to Parameter value was outside the range of expected or supported values..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterPathMustBeRooted">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot be a relative path..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterPathMustIncludeFileName">
            <summary>
              Looks up a localized string similar to The file name is missing from the path &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParametersMustHaveTheSameLength">
            <summary>
              Looks up a localized string similar to Parameters &quot;{0}&quot; and &quot;{1}&quot; must have the same number of elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ParameterWrongConcreteType">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; expected concrete type &quot;{1}&quot; but was &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.PathCannotEndWithSeperator">
            <summary>
              Looks up a localized string similar to A file path cannot end with a directory separator..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ProjectFileIsInvalid">
            <summary>
              Looks up a localized string similar to The project file path &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ProjectFilePathEmptyOrWhitespace">
            <summary>
              Looks up a localized string similar to The project file path is invalid because it is empty or contains only whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ProjectHasNoFilename">
            <summary>
              Looks up a localized string similar to Cannot save a project that was not loaded by a file. Try using the Save method with a file name..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ProjectItemNotFound">
            <summary>
              Looks up a localized string similar to Could not find project item with item type &apos;{0}&apos; and include value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ProjectRenameNotAllowed">
            <summary>
              Looks up a localized string similar to Renaming project &quot;{0}&quot; is currently not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.PropertyMissing">
            <summary>
              Looks up a localized string similar to The required property &apos;{0}&apos; is missing or empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.RuleMissing">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; rule is missing from the project..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.RulePropertyMissing">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; rule is missing the &quot;{1}&quot; property..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ServiceMissing">
            <summary>
              Looks up a localized string similar to Cannot find an instance of the {0} service..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.ThereMustBeAtleastOneDimensionInAProjectConfiguration">
            <summary>
              Looks up a localized string similar to There must be at least one dimension defined in a project configuration..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.TooManyComponentImplementationsFound">
            <summary>
              Looks up a localized string similar to Only one implementation for interface &quot;{0}&quot; should exist in this context..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.TreeUpdateRejected">
            <summary>
              Looks up a localized string similar to The request to update the project tree was rejected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.TypeConversionAlreadyMapped">
            <summary>
              Looks up a localized string similar to Serialization code for type {0} has already been set..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.UtilityStrings.UnbalancedQuotes">
            <summary>
              Looks up a localized string similar to This string list cannot include any items that contain an odd number of &quot; characters..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs">
            <summary>
            Provides a standard implementation of the abstract <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveConfigurationChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.previouslyActive">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.PreviouslyActive"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.nowActive">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.NowActive"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs"/> class.
            </summary>
            <param name="previouslyActive">The previously active ConfiguredProject.</param>
            <param name="nowActive">The now active ConfiguredProject.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.PreviouslyActive">
            <summary>
            Gets the previously active ConfiguredProject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.StandardActiveConfigurationChangedEventArgs.NowActive">
            <summary>
            Gets the ConfiguredProject that is now active.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.UnlocalizedStrings">
            <summary>
            A set of string constants for internal error reporting that we don't want localized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.UnlocalizedStrings.InternalCpsErrorCausedInconsistentState">
            <summary>
            A string reporting that an internal error within CPS has caused a data inconsistency.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer">
            <summary>
            Serializing/Deserializing of various types to MSBuild properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.converters">
            <summary>
            contains the map of existing type serializers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.disallowNewMappings">
            <summary>
            When true, prevents calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.AddMapping``1(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IStrongTypeAndStringMapping{``0})"/>.  Useful for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.SimpleTypes"/> statically stored instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer"/> class
            with a common set of converters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.#ctor(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer"/> class
            with a set of converters from another instance.
            Useful for adding more without affecting the original.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IStrongTypeAndStringMapping`1">
            <summary>
            A contract for translating a string value to a strongly-typed object.
            </summary>
            <typeparam name="T">The strong-type representation of some value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IStrongTypeAndStringMapping`1.ToString(`0)">
            <summary>
            Converts some value to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IStrongTypeAndStringMapping`1.ToValue(System.String)">
            <summary>
            Converts a string to some strongly-typed value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IStrongTypeAndStringMapping`1.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Provides the mapping a chance to validate itself as a last step.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.SimpleTypes">
            <summary>
            Gets an instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer"/> that can only serialize/deserialize the
            <see cref="T:System.Boolean"/> and <see cref="T:System.Int32"/> types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.AsReadOnly">
            <summary>
            Returns a serializer that disallows any changes to the property serialization mappings.
            (Although property serialization still works).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.ToString``1(``0)">
            <summary>
            serializer for class T
            </summary>
            <typeparam name="T">class to be serialized</typeparam>
            <param name="value">strongly typed value</param>
            <returns>string to use to repesend the value in msbuild</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.ToValue``1(System.String)">
            <summary>
            deserializer for class T
            </summary>
            <typeparam name="T">class template</typeparam>
            <param name="value">serialized value</param>
            <returns>strly typed value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.ToValue``1(System.String,``0)">
            <summary>
            deserializer for class T, when an explicit default value is preferred.
            </summary>
            <typeparam name="T">class template</typeparam>
            <param name="value">serialized value</param>
            <param name="defaultValue">The value of T to use if <paramref name="value"/> is null or empty.</param>
            <returns>strly typed value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.AddMapping``1(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IStrongTypeAndStringMapping{``0})">
            <summary>
            Adds a string-to-type (and vice versa) mapping to the list that can be serialized.
            </summary>
            <typeparam name="T">The strong type that may be serialized.</typeparam>
            <param name="values">A mapping of values.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.InitializeSimpleTypes">
            <summary>
            Initializes an instance that can only serialize simple, pre-defined types.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1">
            <summary>
            Helper class holding 2 wait translation table class values  to msbuild property value (string).
            </summary>
            <typeparam name="T"> clr class to be serialized to property values</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.enumToString">
            <summary>
            holds values -> string map
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.stringToEnum">
            <summary>
            string-to-values map
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.catchAllEnumValue">
            <summary>
            The enum value to return when reading in an unrecognized string.
            A value here avoids an ArgumentException being thrown during conversion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1"/> class
            that describes a new mapping between enumerable values and their string representations.
            </summary>
            <param name="defaultValue">
            The enum value to be assigned as the default value when reading
            a property that is empty or is not defined.
            </param>
            <param name="serializeDefaultValueAsEmptyString">
            Whether to use the empty string when serializing out this default value.
            If false, <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.AddMapping(`0,System.String)"/> should be called with the default value
            and a string to actually use for serializing out.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.AddMapping(`0,System.String)">
            <summary>
            Add T to String mapping
            </summary>
            <param name="enumValue">strongly typed value</param>
            <param name="propertyValue">serialized value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.SetCatchallValue(`0)">
            <summary>
            Sets an enum value that will be set when reading strings that are not added explicitly using <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.AddMapping(`0,System.String)"/>.
            </summary>
            <param name="enumValue">The enum value to be assigned when reading in unrecognized strings.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{T}#ToString(`0)">
            <summary>
            Convert a given value from type T to a string
            </summary>
            <param name="enumValue">the value to be serialized</param>
            <returns>the string representing the input value in msbuild file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{T}#ToValue(System.String)">
            <summary>
            Deserialize the property value to a strongly typed value.
            </summary>
            <param name="propertyValue">string value from msbuild</param>
            <returns>strongly typed value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input string is not recognized as an enum value.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumToPropertyValues`1.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Verifies a sane mapping between enum values and strings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2">
            <summary>
            A mapping for Enums that simply delegates to another existing Enum mapping
            for an equivalent (but different) enum type.
            </summary>
            <typeparam name="TNew">The enum type to add a mapping for.</typeparam>
            <typeparam name="TExisting">The enum type that already has a mapping for it in this PropertySerializer.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2.other">
            <summary>
            The dependency enum mapping object that we delegate everything to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2.ToString(`0)">
            <summary>
            Calls the other enum mapping's ToString method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2.ToValue(System.String)">
            <summary>
            Calls the other enum mapping's ToValue method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.EnumEquivalence`2.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            Finds the other existing mapping in the property serializer mapping table and stores its reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.UShortToPropertyValues">
            <summary>
            Describes how to convert unsigned short to strings and back again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.UShortToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#UInt16}#ToString(System.UInt16)">
            <summary>
            Converts a ushort to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.UShortToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#UInt16}#ToValue(System.String)">
            <summary>
            Converts a string to a ushort.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.UShortToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IntToPropertyValues">
            <summary>
            Describes how to convert integers to strings and back again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IntToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#Int32}#ToString(System.Int32)">
            <summary>
            Converts an integer to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IntToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#Int32}#ToValue(System.String)">
            <summary>
            Converts a string to an integer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.IntToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.StringToPropertyValues">
            <summary>
            Used to support reading strings.
            </summary>
            <remarks>
            This would be unnecessary, but some routines ignorantly pass T = string around that may eventually reach
            the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer"/>.  So this just keeps things from breaking.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.StringToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#String}#ToString(System.String)">
            <summary>
             returns value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.StringToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#String}#ToValue(System.String)">
            <summary>
             returns value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.StringToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.GuidToPropertyValues">
            <summary>
            Describes how to convert Guid to strings and back again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.GuidToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#Guid}#ToString(System.Guid)">
            <summary>
            Converts an integer to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.GuidToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Utilities#PropertySerializer#IStrongTypeAndStringMapping{System#Guid}#ToValue(System.String)">
            <summary>
            Converts a string to an integer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer.GuidToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Utilities.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities">
            <summary>
            Project property value manipulation routines
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.NoInherit">
            <summary>
            $(NOINHERIT) keyword as known in old VC++
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.Inherit">
            <summary>
            $(INHERIT) keyword as known in old VC++
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.Quote">
            <summary>
            The " character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.CharactersToEscapePreservingMacros">
            <summary>
            The characters that are special to MSBuild but NOT special to vcproj.
            </summary>
            <remarks>
            These are the characters we should escape when strings are set on the shim to make sure
            that old clients that are used to saving strings to vcproj files do not break because there
            are new characters that invoke special processing.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.escapingSequences">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.EscapingSequences"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.EscapingSequences">
            <summary>
            Key/value pairs where the keys are the characters that must be escaped and the values are the escaped sequences.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetItemsFromVCProjList(System.String,System.Char[])">
            <summary>
            Splits out a VCProj property value into items based on given delimiter(s).
            </summary>
            <param name="unevaluatedStringList">
            The unevaluated value from the vcproj-style property value.
            It must be either unevaluated or evaluated but still escaped
            to allow this method to guarantee proper splitting by semicolons.
            </param>
            <param name="delimiters">The delimiters that may be found in the string list to separate the items.</param>
            <returns>An enumeration of the items in the VCProj list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetItemsFromMSBuildList(System.String)">
            <summary>
            Splits out an MSBuild property value into items based on the semicolon delimiter.
            </summary>
            <param name="unevaluatedStringList">
            The unevaluated value from the MSBuild property.  It must be either unevaluated or evaluated but still escaped
            to allow this method to guarantee proper splitting by semicolons.
            </param>
            <returns>An enumeration of the items in the MSBuild list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.TrimMSBuildList(System.String)">
            <summary>
            Takes an MSBuild stringlist based on the semicolon delimiter and trims out the \r\n between each entry.
            </summary>
            <param name="unevaluatedStringList">
            The unevaluated value from the MSBuild property.  It must be either unevaluated or evaluated but still escaped
            to allow this method to guarantee proper splitting by semicolons.
            </param>
            <returns>The input string with any extra whitespace within the delimited string parts removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.AssembleMSBuildStringList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a list of strings for MSBuild property values.
            </summary>
            <param name="items">The items to include in the list.</param>
            <returns>A semicolon-delimited list, where each element has its internal semicolons escaped.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.AssembleVCProjStringList(System.Collections.Generic.IEnumerable{System.String},System.Char[])">
            <summary>
            Constructs a list of strings for shim client (vcproj) property values.
            </summary>
            <param name="items">The items to include in the list.</param>
            <param name="delimiters">Valid delimiters to use for the list.
            The first delimiter will be used in creating the list, and the others will be
            watched for and items quoted appropriately if they contain them.</param>
            <returns>A list delimited, where each element has its internal semicolons escaped.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMsBuildInheritance(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a string list property value that may contain a $(NOINHERIT) token to an MSBuild-style inheritance list.
            </summary>
            <param name="property">The property that will receive the value.</param>
            <param name="vcprojItems">The items in the list, possibly including the $(NOINHERIT).</param>
            <returns>An enumeration of items that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMsBuildInheritance(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)">
            <summary>
            Converts a string list property value that may contain a $(NOINHERIT) token to an MSBuild-style inheritance list.
            </summary>
            <param name="propertyName">The name of the property containing the value</param>
            <param name="vcprojItems">The items in the list, possibly including the $(NOINHERIT).</param>
            <param name="location">What kind of group this property is stored in.</param>
            <returns>An enumeration of items that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMsBuildInheritance(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts a string list property value that may contain $(NOINHERIT) or $(INHERIT) tokens to an MSBuild-style inheritance list.
            </summary>
            <param name="vcprojItems">The items in the list, possibly including $(INHERIT) or $(NOINHERIT).</param>
            <param name="msbuildInheritToken">The macro to use to indicate inheritance.</param>
            <returns>An enumeration of items that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetVCProjInheritance(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a string list property value that may contain an
            MSBuild-style $(InheritedPropertyName) token to an VCProj-style $(NOINHERIT) list.
            </summary>
            <param name="property">The property containing the value</param>
            <param name="msbuildItems">The items in the list, possibly including the $(InheritedPropertyName).</param>
            <returns>An enumeration of items that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetVCProjInheritance(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)">
            <summary>
            Converts a string list property value that may contain an
            MSBuild-style $(InheritedPropertyName) token to an VCProj-style $(NOINHERIT) list.
            </summary>
            <param name="propertyName">The name of the property containing the value</param>
            <param name="msbuildItems">The items in the list, possibly including the $(InheritedPropertyName).</param>
            <param name="location">What kind of group this property is stored in.</param>
            <returns>An enumeration of items that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetVCProjInheritance(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts a string list property value that may contain an
            MSBuild-style $(InheritedPropertyName) token to an VCProj-style $(NOINHERIT) list.
            </summary>
            <param name="msbuildItems">The items in the list, possibly including the $(InheritedPropertyName).</param>
            <param name="msbuildInheritToken">The macro to use to indicate inheritance.</param>
            <returns>An enumeration of items that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetVCProjInheritanceNonList(System.String,System.String)">
            <summary>
            Converts a string property value that may contain MSBuild-style %(Value) or $(Value) to
            a VCProj-style $(NOINHERIT) string
            </summary>
            <param name="msbuildValue">The value in MSBuild format</param>
            <param name="msbuildInheritToken">The inherit token to search for.</param>
            <returns>A VCProj string that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetVCProjInheritanceNonList(System.String,System.String,System.String)">
            <summary>
            Converts a string property value that may contain MSBuild-style %(Value) or $(Value) to
            a VCProj-style $(NOINHERIT) string
            </summary>
            <param name="msbuildValue">The value in MSBuild format</param>
            <param name="msbuildInheritToken">The inherit token to search for.</param>
            <param name="vcprojSeparator">Separator to use in VCProj.</param>
            <returns>A VCProj string that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMsBuildInheritanceNonList(System.String,System.String)">
            <summary>
            Converts a string property value that may contain $(NOINHERIT) or $(INHERIT) tokens to an MSBuild-style inheritance value.
            </summary>
            <param name="vcprojValue">The items in the list, possibly including $(INHERIT) or $(NOINHERIT).</param>
            <param name="msbuildInheritToken">The substring for inheriting the parent value.</param>
            <returns>A string that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMsBuildInheritanceNonList(System.String,System.String,System.String)">
            <summary>
            Converts a string property value that may contain $(NOINHERIT) or $(INHERIT) tokens to an MSBuild-style inheritance value.
            </summary>
            <param name="vcprojValue">The items in the list, possibly including $(INHERIT) or $(NOINHERIT).</param>
            <param name="msbuildInheritToken">The substring for inheriting the parent value.</param>
            <param name="msbuildSeparator">Separator to use between the value and the inherited value</param>
            <returns>A string that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.EscapePreservingMacros(System.String)">
            <summary>
            Escapes characters that did not invoke special processing in vcproj but would in msbuild.
            </summary>
            <param name="value">The string value to escape.</param>
            <returns>A version of the string that would have the same semantic meaning in msbuild as the input did in vcproj files.</returns>
            <remarks>
            <para>
            This method is <i>not</i> the same as the standard MSBuild Escape method.  This method does not
            escape all special MSBuild characters -- only the ones that are not also special characters in vcproj.
            This way, the VC shim can receive input that would have been safe in a vcproj file, including macros,
            and we can preserve the behavior of the macros while also ensuring that it is safe for msbuild.
            </para>
            <para>
            The <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Unescape(System.String)"/> may be used to reverse the effects
            of this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMSBuildInheritanceToken(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)">
            <summary>
            represent the "parent" reference token in msbuild terms - ie %(foo) or $(foo) depending on property location
            </summary>
            <param name="propertyName">name</param>
            <param name="location">location in msbuild file</param>
            <returns>parent reference token</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetValueWithoutInheritanceToken(System.String,System.String)">
            <summary>
            Gets a string that is sure to NOT have the given inheritance token.
            </summary>
            <param name="value">The starting property value, which may or may not contain the inheriting <paramref name="inheritanceToken"/></param>
            <param name="inheritanceToken">The value obtained by calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMSBuildInheritanceToken(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)"/>.</param>
            <returns>The <paramref name="value"/> with the <paramref name="inheritanceToken"/> removed if it appeared in the string before that.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetValueWithInheritanceToken(System.String,System.String)">
            <summary>
            Gets a string that is sure to have the given inheritance token.
            </summary>
            <param name="value">The starting property value, which may or may not contain the inheriting <paramref name="inheritanceToken"/></param>
            <param name="inheritanceToken">The value obtained by calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.GetMSBuildInheritanceToken(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)"/>.</param>
            <returns>The <paramref name="value"/> with the <paramref name="inheritanceToken"/> tacked on the end if it did not appear in the string before that.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.SplitPathUnevaluatedParts(System.String,System.Func{System.String,System.String},System.String@,System.String@,System.String@)">
            <summary>
            Breaks up an unevaluated path (which may include macros) into directory, file and extension segments.
            </summary>
            <param name="unevaluatedPath">The unexpanded string that should represent a path (absolute or relative) when expanded.</param>
            <param name="expansion">The expansion function (typically MSBuild.Project.Evaluate) used to expand the unexpanded string.</param>
            <param name="unevaluatedDirectory">Receives the portion of the unexpanded string that makes up the directory.  Always ends in backslash if not empty.</param>
            <param name="unevaluatedFilename">Receives the portion of the unexpanded string that makes up the filename (omitting extension).</param>
            <param name="unevaluatedExtension">Receives the portion of the unexpanded string that makes up the extension (including period).</param>
            <exception cref="T:System.ArgumentException">Thrown if the unevaluatedPath does not expand to a path, or has a macro that expands across path component boundaries.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.TokenizeUnevaluatedString(System.String)">
            <summary>
            Breaks up an unevaluated string into macro tokens and individual characters for non-macros.
            </summary>
            <param name="unevaluatedValue">Unevaluated string.</param>
            <returns>A stream of individually evaluatable tokens.  For example, the string "foo$(bar)baz" would generate the stream: f o o $(bar) b a z.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.TokenMatcher(System.String[],System.Collections.Generic.IEnumerator{System.String},System.Func{System.String,System.String},System.StringComparison)">
            <summary>
            Matches evaluated tokens to their unevaluated counterparts, allowing for multiple
            unevaluated tokens to concatenate to form the evaluated forms.
            </summary>
            <param name="expandedTokens">A series of expanded tokens for each of which a series of unexpanded tokens should be found that evaluate to them.</param>
            <param name="unexpandedTokens">A stream of unexpanded tokens to draw on in assembling individual expanded tokens.</param>
            <param name="expansion">The expansion function (typically MSBuild.Project.Evaluate) used to expand the unexpanded string.</param>
            <param name="comparison">The nature of string comparison to use.</param>
            <returns>An array (of the same length as <paramref name="expandedTokens"/>) of unexpanded token substrings that, when evaluated, make up each of the expanded tokens provided.</returns>
            <remarks>
            Expandable tokens are assumed to be at least two characters in length.
            One character tokens will <i>not</i> be passed to the <paramref name="expansion"/> function.
            </remarks>
            <exception type="ArgumentException">Thrown when there are insufficient unexpanded tokens to make up the expanded tokens, or when the unexpanded tokens cannot map to any one individual expanded token.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.SplitRespectingQuotes(System.String,System.Char[])">
            <summary>
            Splits a string by some separator, but ignores all separators found within double-quote pairs.
            </summary>
            <param name="stringList">
            The <paramref name="delimiters"/>-delimited list of strings.
            Each element in the list MAY be quoted.
            Null is not allowed, but an empty string is.
            </param>
            <param name="delimiters">The characters used to separate the elements in the string.</param>
            <returns>An enumeration of the individual element substrings found in the list.</returns>
            <remarks>
            An empty <paramref name="stringList"/> will generate no strings.
            A non-empty <paramref name="stringList"/> with no unquoted delimiters will generate one string.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.RemoveUnescapedQuotes(System.String)">
            <summary>
            Removes any " characters that are not preceded by a backslash.
            </summary>
            <param name="value">The value to remove " characters from.  May be null or empty.</param>
            <returns>A string that is no longer than the original string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.TrimSurroundingQuotes(System.String)">
            <summary>
            Trims the surrounding quotes from a value if there are balanced, surrounding quotes on a value.
            </summary>
            <param name="value">The value to trim.</param>
            <returns>The original value, with one set of quotes trimmed from the edges if they were there.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Performs a case-insensitive string search and replacement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.CreateSafeXmlTagName(System.String)">
            <summary>
            Replaces chars invalid in xml tags names with '_'
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCStringUtilities.CountCharacters(System.String,System.Char)">
            <summary>
            Counts how many times a given character appears in a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.VCCultureUtilities">
            <summary>
            Localization and globalization functionality class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VCCultureUtilities.EnglishLanguageID">
            <summary>
            English language ID.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VCCultureUtilities.GetVSLocale">
            <summary>
            Returns the ID of the VS language selected by the user, according to registry content.
            This is usually used when querying for VS language outside of VS, when vs shell services are not accessible.
            </summary>
            <returns>The ID of the VS language, in string format.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.VsProjectCapabilityExpressionMatcher">
            <summary>
            The default implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolExpressionEvaluator"/> service.
            </summary>
            <remarks>
            This class is cocreatable due to its registration in the CPS pkgdef file.
            Changing the fully-qualified name of this class requires a matching change
            in the pkgdef file.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.VsProjectCapabilityExpressionMatcher.Space">
            <summary>
            A single space character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VsProjectCapabilityExpressionMatcher.EvaluateExpression(System.String,System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolExpressionEvaluator"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VsProjectCapabilityExpressionMatcher.EvaluateExpression(System.String,Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolPresenceChecker)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolExpressionEvaluator2"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.VsUtilities">
            <summary>
            Visual Studio specific utilities and extension methods for CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VsUtilities.AsUnconfiguredProject(EnvDTE.Project)">
            <summary>
            Gets the CPS UnconfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="project">The project for which to obtain the UnconfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VsUtilities.AsUnconfiguredProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the CPS UnconfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="hierarchy">The project for which to obtain the UnconfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VsUtilities.AsUnconfiguredProject(Microsoft.VisualStudio.Shell.Interop.IVsProject)">
            <summary>
            Gets the CPS UnconfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="project">The project for which to obtain the UnconfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.VsUtilities.AsConfiguredProject(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg)">
            <summary>
            Gets the CPS ConfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="projectConfig">The project configuration for which to obtain the ConfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
            <remarks>
            This method does not work for VC projects.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2">
            <summary>
            Dictionary that does not prevent keys from being garbage collected.
            </summary>
            <typeparam name="TKey">Type of key, without the WeakReference wrapper.</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <remarks>
            See also Microsoft.Build.Collections.WeakDictionary.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.dictionary">
            <summary>
            The dictionary used internally to store the keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.keyComparer">
            <summary>
            The key comparer to use for hashing and equality checks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.capacity">
            <summary>
            The dictionary's initial capacity, and the capacity beyond which we will resist to grow
            by scavenging for collected keys first.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="keyComparer">The key comparer to use. A <c>null</c> value indicates the default comparer will be used.</param>
            <param name="capacity">The initial capacity of the dictionary. Growth beyond this capacity will first induce a scavenge operation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.Count">
            <summary>
            Count of entries.
            Some entries may represent keys or values that have already been garbage collected.
            To clean these out call <see cref="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.Scavenge"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.Item(`0)">
            <summary>
            Obtains the value for a given key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.ContainsKey(`0)">
            <summary>
            Whether there is a key present with the specified key
            </summary>
            <remarks>
            As usual, don't just call Contained as the wrapped value may be null.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value for the provided key.
            Returns true if the key is found, otherwise false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.Remove(`0)">
            <summary>
            Removes an entry with the specified key.
            Returns true if found, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.Scavenge">
            <summary>
            Remove any entries from the dictionary that represent keys
            that have been garbage collected.
            </summary>
            <returns>The number of entries removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.Clear">
            <summary>
            Empty the collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.GetEnumerator">
            <summary>
            See IEnumerable&lt;T&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1">
            <summary>
            Strongly typed wrapper around a weak reference that caches
            the target's hash code so that it can be used in a hashtable.
            </summary>
            <typeparam name="T">Type of the target of the weak reference</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.hashcode">
            <summary>
            Cache the hashcode so that it is still available even if the target has been
            collected. This allows this object to be still found in a table so it can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.weakReference">
            <summary>
            Backing weak reference
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.notSoWeakTarget">
            <summary>
            Some of our instances are around just to do existence checks, and don't want
            to allocate WeakReference objects as they are short-lived.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.#ctor(`2,System.Collections.Generic.IEqualityComparer{`2},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.Target">
            <summary>
            Target wrapped by this weak reference.  Null if the target has already been garbage collected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.IsAlive">
            <summary>
            Whether the target has not been garbage collected yet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.GetHashCode">
            <summary>
            Returns the hashcode of the wrapped target
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReference`1.Equals(System.Object)">
            <summary>
            Compares two structures.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1">
            <summary>
            Equality comparer for weak references that actually compares the
            targets of the weak references
            </summary>
            <typeparam name="T">Type of the targets of the weak references to be compared</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.underlyingComparer">
            <summary>
            Comparer to use if specified, otherwise null
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1"/> class
            with an explicitly specified comparer.
            </summary>
            <param name="comparer">
            Comparer may be null, in which case the default comparer for the type
            will be used.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.GetHashCode(Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary{`0,`1}.WeakReference{`2})">
            <summary>
            Gets the hashcode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.Equals(Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary{`0,`1}.WeakReference{`2},Microsoft.VisualStudio.ProjectSystem.Utilities.WeakKeyDictionary{`0,`1}.WeakReference{`2})">
            <summary>
            Compares the weak references for equality
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SchemaName">
            <summary>The name of the schema to look for at runtime to fulfill property access.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.PrimaryDataSourceItemType">
            <summary>The ItemType given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.PrimaryDataSourceLabel">
            <summary>The Label given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.ApplicationIconProperty">
            <summary> (The "ApplicationIcon" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.ProjectTypeGuidsProperty">
            <summary> (The "ProjectTypeGuids" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.ProjectGuidProperty">
            <summary> (The "ProjectGuid" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetFrameworkMonikerProperty">
            <summary> (The "TargetFrameworkMoniker" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetFrameworkIdentifierProperty">
            <summary> (The "TargetFrameworkIdentifier" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetFrameworkVersionProperty">
            <summary> (The "TargetFrameworkVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetFrameworkProfileProperty">
            <summary> (The "TargetFrameworkProfile" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetPathProperty">
            <summary> (The "TargetPath" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.DocumentationFileProperty">
            <summary> (The "DocumentationFile" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AssemblyNameProperty">
            <summary> (The "AssemblyName" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.NameProperty">
            <summary> (The "Name" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.RootNamespaceProperty">
            <summary> (The "RootNamespace" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputNameProperty">
            <summary> (The "OutputName" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputPathProperty">
            <summary> (The "OutputPath" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeProperty">
            <summary> (The "OutputType" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AvailablePlatformsProperty">
            <summary> (The "AvailablePlatforms" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OptimizeProperty">
            <summary>Should compiler optimize output? (The "Optimize" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.MSBuildProjectDirectoryProperty">
            <summary> (The "MSBuildProjectDirectory" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.DefaultPlatformProperty">
            <summary> (The "DefaultPlatform" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.PackageActionProperty">
            <summary>The MSBuild target to use when packaging a project. (The "PackageAction" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.DefaultContentTypeProperty">
            <summary>The default content type name to use when adding files. (The "DefaultContentType" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.VCInstallDirProperty">
            <summary> (The "VCInstallDir" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.VSInstallDirProperty">
            <summary> (The "VSInstallDir" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.PlatformProperty">
            <summary> (The "Platform" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.ConfigurationProperty">
            <summary> (The "Configuration" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.DebuggerSymbolsPathProperty">
            <summary> (The "DebuggerSymbolsPath" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.IntDirProperty">
            <summary> (The "IntDir" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetPlatformWinMDLocationProperty">
            <summary> (The "TargetPlatformWinMDLocation" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SDKReferenceDirectoryRootProperty">
            <summary> (The "SDKReferenceDirectoryRoot" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SDKReferenceRegistryRootProperty">
            <summary> (The "SDKReferenceRegistryRoot" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SDKExtensionDirectoryRootProperty">
            <summary> (The "SDKExtensionDirectoryRoot" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SDKIdentifierProperty">
            <summary> (The "SDKIdentifier" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SDKVersionProperty">
            <summary> (The "SDKVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetPlatformIdentifierProperty">
            <summary> (The "TargetPlatformIdentifier" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetPlatformVersionProperty">
            <summary> (The "TargetPlatformVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.WindowsAppContainerProperty">
            <summary> (The "WindowsAppContainer" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.WinMDAssemblyProperty">
            <summary> (The "WinMDAssembly" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetRuntimeProperty">
            <summary> (The "TargetRuntime" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AssemblySearchPathsProperty">
            <summary> (The "AssemblySearchPaths" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.WinRTReferenceTabsProperty">
            <summary> (The "WinRTReferenceTabs" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AssemblyReferenceTabsProperty">
            <summary> (The "AssemblyReferenceTabs" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.MinimumVisualStudioVersionProperty">
            <summary> (The "MinimumVisualStudioVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SuppressOutOfDateMessageOnBuildProperty">
            <summary>True to just build out-of-date projects without ever prompting the user to confirm. (The "SuppressOutOfDateMessageOnBuild" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.ShowAllFilesProperty">
            <summary> (The "ShowAllFiles" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AutoRefreshProperty">
            <summary> (The "AutoRefresh" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AddItemTemplatesGuidProperty">
            <summary> (The "AddItemTemplatesGuid" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.ProjectUISubcaptionProperty">
            <summary> (The "ProjectUISubcaption" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SharedItemContextSubProjectGuidProperty">
            <summary> (The "SharedItemContextSubProjectGuid" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OneAppCapabilitiesProperty">
            <summary> (The "OneAppCapabilities" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.SharedProjectAppliesToProperty">
            <summary>Capability match expression that at a minimum tests for the language of the Shared Project; used to filter Add Shared Project Reference choices. (The "SharedProjectAppliesTo" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.AlwaysUseNumericalSuffixInItemNamesProperty">
            <summary>Indicates if names of newly added items should always be suffixed with a number. (The "AlwaysUseNumericalSuffixInItemNames" property).</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues">
            <summary>Enum values for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues.Library">
            <summary>The  ("Library") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues.exe">
            <summary>The  ("exe") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues.winexe">
            <summary>The  ("winexe") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues.AppContainerExe">
            <summary>The  ("AppContainerExe") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues.WinMDObj">
            <summary>The  ("WinMDObj") value for the OutputType property.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.OutputTypeValues.#ctor">
            <summary>Prevents automatic generation of a default constructor.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetRuntimeValues">
            <summary>Enum values for the TargetRuntime property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetRuntimeValues.Managed">
            <summary>The  ("Managed") value for the TargetRuntime property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetRuntimeValues.Native">
            <summary>The  ("Native") value for the TargetRuntime property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetRuntimeValues.AppHost">
            <summary>The  ("AppHost") value for the TargetRuntime property.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Utilities.Rules.ConfigurationGeneral.TargetRuntimeValues.#ctor">
            <summary>Prevents automatic generation of a default constructor.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProviderMetadataView">
            <summary>
            The MEF metadata view for metadata that is required on an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider"/> export.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProviderMetadataView.ProjectType">
            <summary>
            Gets the non-localized moniker for the project type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProviderMetadataView.ProjectFileExtensions">
            <summary>
            Gets the set of project file extensions that are typically seen for this type of project.
            </summary>
            <value>An array of strings, each element starting with a period.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProviderMetadataView">
            <summary>
            The metadata that an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProvider"/> export is expected to include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProviderMetadataView.SupportsItemSpecificView">
            <summary>
            Gets a value indicating whether this provider is interested in hearing about property page displays
            for file specific views (i.e., at least one project item is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProviderMetadataView.SupportsProjectSpecificView">
            <summary>
            Gets a value indicating whether this provider is interested in hearing about property page displays
            for the project level view (i.e., a project is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProviderMetadataView.SupportsPropertySheetSpecificView">
            <summary>
            Gets a value indicating whether this provider is interested in hearing about property page displays
            for the property sheet level view (i.e., a property sheet is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProviderMetadataView.PageTemplates">
            <summary>
            Gets the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate"/> values that this factory provider can produce factories for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument">
            <summary>
            Default implementation of a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
            <remarks> Is thread-safe. </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument.argument">
            <summary>
            The argument schema. We source all schema information from this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument.#ctor(Microsoft.Build.Framework.XamlTypes.Argument)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument"/> class.
            </summary>
            <param name="argument"> The argument schema object. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument.PropertyName">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument.IsRequired">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument.Separator">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageArgument.ConvertToIArgument(System.Collections.Generic.IList{Microsoft.Build.Framework.XamlTypes.Argument})">
            <summary>
            Creates a list of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/> objects from a list of <see cref="T:Microsoft.Build.Framework.XamlTypes.Argument"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue">
            <summary>
            Default implementation of a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
            <remarks> Is thread-safe. </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.enumValue">
            <summary>
            The enum value schema. We source all schema information from this object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.pageArguments">
            <summary>
            See the Arguments property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.#ctor(Microsoft.Build.Framework.XamlTypes.EnumValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue"/> class.
            </summary>
            <param name="enumValue"> The enum value schema object. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.Name">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.DisplayName">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.Description">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.HelpString">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.Switch">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.SwitchPrefix">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.IsDefault">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.Metadata">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.Arguments">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.ToString">
            <summary>
            Translates this enum value to the in-project string representation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageEnumValue.ConvertToIEnumValue(System.Collections.Generic.IList{Microsoft.Build.Framework.XamlTypes.EnumValue})">
            <summary>
            Creates a list of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> objects from a list of <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1">
            <summary>
            The standard implementation of IProjectItem for use in CPS.
            </summary>
            <typeparam name="TProjectItemInterface">The IProjectItem or derived interface that the provider is typed with.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.provider">
            <summary>
            The items provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.unevaluatedInclude">
            <summary>
            A cache of the unevaluated include value of the item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.evaluatedIncludeAsFullPath">
            <summary>
            A cache of the evaluated include value of the item make into a full path
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.metadata">
            <summary>
            Backing store for the Metadata property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.syncObject">
            <summary>
            Lock to acquire when lazy-initializing fields.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.#ctor(Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase{`0},Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.#ctor(Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase{`0},Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.ItemType">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.UnevaluatedInclude">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.EvaluatedInclude">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.EvaluatedIncludeAsFullPath">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.EvaluatedIncludeAsRelativePath">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.PropertiesContext">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.Metadata">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.SetItemTypeAsync(System.String)">
            <summary>
            Sets the item type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.SetUnevaluatedIncludeAsync(System.String)">
            <summary>
            Sets the item name, which may include MSBuild expressions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.FindItem(Microsoft.Build.Evaluation.Project)">
            <summary>
            Finds the MSBuild.ProjectItem that this instance represents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.InitializePropertiesContext(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Sets the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.PropertiesContext"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.InitializePropertiesContext(Microsoft.Build.Construction.ProjectItemElement)">
            <summary>
            Sets the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem`1.PropertiesContext"/> property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.HierarchicalProjectItemProviderBase`1">
            <summary>
            A project item provider whose tracked project items' include values are file system paths.
            </summary>
            <typeparam name="TProjectItemInterface">The specific interface methods should accept for updating/deleting items.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.HierarchicalProjectItemProviderBase`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.HierarchicalProjectItemProviderBase`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.HierarchicalProjectItemProviderBase`1.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a new item, recognizing that the include value is a path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.HierarchicalProjectItemProviderBase`1.RemoveAsync(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.HierarchicalProjectItemProviderBase`1.GetItemsAsync(System.String,System.String)">
            <summary>
            Gets items recognizing that the include value is a path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer">
            <summary>
            An equality comparer that considers two project items to match if their item types and names equal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer.DefaultInstance">
            <summary>
            The shared singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer.Default">
            <summary>
            Gets the singleton instance to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer.Equals(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem)">
            <summary>
            Returns true if two project items refer to the same item type and evaluated name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemIdentityEqualityComparer.GetHashCode(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem)">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1">
            <summary>
            Provides a common implementation for detecting version conflicts with project item snapshots.
            </summary>
            <typeparam name="TProjectItemInterface">The specific interface methods should accept for updating/deleting items.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.supportedItemTypes">
            <summary>
            A read/write collection of the item types this provider manages.
            </summary>
            <remarks>
            This class should NOT use this field except in its property accessor,
            since its property accessor can be overridden in a derived class,
            leaving this field uninitialized.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.readOnlyItemTypes">
            <summary>
            A read-only view of the <see cref="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.supportedItemTypes"/> collection.
            </summary>
            <remarks>
            This class should NOT use this field except in its property accessor,
            since its property accessor can be overridden in a derived class,
            leaving this field uninitialized.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.propertiesProvider">
            <summary>
            The cached copy of the project properties provider, after it is found through the metadata.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.supportedItemTypesLock">
            <summary>
            The object we lock while lazy-initializing the SupportedItemTypes member.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.projectDirectory">
            <summary>
            Cache for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectDirectory"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1"/> class.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemIdentityChanging">
            <summary>
            Event that is fired on the writer thread when an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should attach handlers to this event if they may need to make
            cascading changes as the result of the change causing this event to fire.
            Clients should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Clients should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemIdentityChangedOnWriter">
            <summary>
            Event that is fired on the writer thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemIdentityChanged">
            <summary>
            Event that is fired on a background thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.EventDispatcher">
            <summary>
            Gets or sets the event dispatcher.
            </summary>
            <value>The event dispatcher.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ConfiguredProject">
            <summary>
            Gets the configured project.
            </summary>
            <value>The configured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ConfiguredProjectCacheFactory">
            <summary>
            Gets the configured project cache factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectDirectory">
            <summary>
            Gets the directory the project is found in.  Always ends with a trailing slash.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.PropertiesProvider">
            <summary>
            The provider we'll use for reading/writing project item properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ThreadHandling">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectFaultHandlerService">
            <summary>
            Gets the project fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.PropertiesProviders">
            <summary>
            The various properties providers, from which we'll choose the project properties one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.UnconfiguredProject">
            <summary>
            UnconfigureProject
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemAddingListeners">
            <summary>
            Gets a sequence of delegates to invoke when we are about to add items.
            </summary>
            <remarks>
            The bool argument indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemRemovingListeners">
            <summary>
            Gets a sequence of delegates to invoke when we are about to remove items.
            </summary>
            <remarks>
            The bool argument 1 indicating whether the items are being deleted from disk as well as from the project file..
            The bool argument 2 indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemRenamingListeners">
            <summary>
            Gets a sequence of delegates to invoke when we are about to rename items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemAddedListeners">
            <summary>
            Gets a sequence of delegates to invoke when we have added items.
            They must be invoked on the writer thread, and the item name must be the evaluated *project-relative* path.
            </summary>
            <remarks>
            The bool argument indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemRemovedListeners">
            <summary>
            Gets a sequence of delegates to invoke when we have removed items.
            </summary>
            <remarks>
            The bool argument 1 indicating whether the items are being deleted from disk as well as from the project file..
            The bool argument 2 indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ItemRenamedListeners">
            <summary>
            Gets a sequence of delegates to invoke when we have renamed items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetExistingItemTypesAsync">
            <summary>
            See IProjectItemProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsAsync">
            <summary>
            Gets all project items with item types in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemTypesAsync"/> collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsAsync(System.String)">
            <summary>
            Gets all project items with the given item type as long as it appears
            in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemTypesAsync"/> collection.
            </summary>
            <returns>
            A sequence of project items with the given item type,
            or an empty sequence if the given item type is not one that is
            managed by this provider.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsAsync(System.String,System.String)">
            <summary>
            Returns an item with the given <paramref name="itemType"/> and <paramref name="evaluatedInclude"/>.
            </summary>
            <param name="itemType">The itemType to match on.  Case insensitive.</param>
            <param name="evaluatedInclude">
            The evaluated value of the Include attribute on the item.  Case insensitive.
            </param>
            <returns>
            All items that match the given criteria.  Never null.
            If the given <paramref name="itemType"/> is not included in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemTypesAsync"/> collection,
            the item is not sought for and an empty sequence is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.FindItemByNameAsync(System.String)">
            <summary>
            Gets any source item that matches a given evaluated name.
            </summary>
            <param name="evaluatedInclude">The evaluated item name to find.</param>
            <returns>The item, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Gets the first item that matches the given context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a new item to the MSBuild project.
            </summary>
            <param name="itemType">The item type for the new item.</param>
            <param name="include">The unevaluated include value for the new item.</param>
            <param name="metadata">The metadata for the new item.  May be null.</param>
            <returns>The new project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Adds new items to the MSBuild project.
            </summary>
            <param name="items">
            A sequence of items to add.  The tuple is made up of the item type, the item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <returns>The sequence of added items. May be fewer than <paramref name="items"/> because items that already existed in the project are not omitted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddAsync(System.String)">
            <summary>
            Adds a file to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="path">The absolute or project-relative path to the file to add to the project.</param>
            <returns>The project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the files to add to the project.</param>
            <returns>The project items actually added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.RemoveAsync(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            NOTE: This method never actually deletes file from storage; it is the caller's responsibility to
            delete the file from disk after this method removes the item from the project if required.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.RemoveAsync(`0,Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes items from the MSBuild project.
            </summary>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemTypesAsync">
            <summary>
            Gets a readonly copy of the set of item types this Provider works with.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.SetUnevaluatedIncludeAsync(Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem{`0},System.String)">
            <summary>
            Updates the backing MsBuild store with the new 'Include' value for the item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.SetItemTypeAsync(Microsoft.VisualStudio.ProjectSystem.Items.CpsProjectItem{`0},System.String)">
            <summary>
            Updates the backing MsBuild store with the new item type for the item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.OnItemIdentityChangingAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Helper method for this provider to fire the ItemIdentityChanged event.
            </summary>
            <param name="projectItem">The project item whose identity is changed.</param>
            <param name="propertySheet"> The property sheet/project manifest the item belongs to. </param>
            <param name="oldItemType"> The item type before the change. </param>
            <param name="newItemType"> The item type after the change. </param>
            <param name="oldUnevaluatedInclude"> The unevaluated include before the change. </param>
            <param name="newUnevaluatedInclude"> The unevaluated include after the change. </param>
            <param name="oldEvaluatedInclude"> The evaluated include before the change. </param>
            <param name="newEvaluatedInclude"> The evaluated include after the change. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.OnItemIdentityChangedAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Helper method for this provider to fire the ItemIdentityChanged event.
            </summary>
            <param name="projectItem">The project item whose identity is changed.</param>
            <param name="propertySheet"> The property sheet/project manifest the item belongs to. </param>
            <param name="oldItemType"> The item type before the change. </param>
            <param name="newItemType"> The item type after the change. </param>
            <param name="oldUnevaluatedInclude"> The unevaluated include before the change. </param>
            <param name="newUnevaluatedInclude"> The unevaluated include after the change. </param>
            <param name="oldEvaluatedInclude"> The evaluated include before the change. </param>
            <param name="newEvaluatedInclude"> The evaluated include after the change. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddFastAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds an item to the project without any extra validation checks.
            </summary>
            <remarks>
            This is used in VC upgrade.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetSupportedItemTypesAsync">
            <summary>
            Gets the set of item types this Provider works with.
            </summary>
            <remarks>
            A derived class must fill this collection in order for this class to do anything worthwhile.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddCoreAsync(System.String)">
            <summary>
            Adds a file to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="path">The absolute or project-relative path to the file to add to the project.</param>
            <returns>The project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.AddCoreAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the files to add to the project.</param>
            <returns>The project items actually added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsByPathAsync(System.String,System.String)">
            <summary>
            Searches for all MSBuild.ProjectItems whose EvaluatedInclude value matches some relative or absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsByPathAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Searches for all MSBuild.ProjectItems whose EvaluatedInclude value matches some relative or absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.Create(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Instantiates a CPS project item that wraps an MSBuild.ProjectItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetInitialItemTypes">
            <summary>
            Gets the item types the provider is designed to manage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsByPathHelperAsync(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.Build.Evaluation.Project)">
            <summary>
            A helper method to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.GetItemsByPathAsync(System.Collections.Generic.IEnumerable{System.String},System.String)"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectItem">
            <summary>
            temporary struct to hold intermediate data across method boundaries
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectItem.ItemName">
            <summary>
            project item name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectItem.EvaluatedName">
            <summary>
            project item's evaluated name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.ProjectItemProviderBase`1.ProjectItem.Metadata">
            <summary>
            metadata for the item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs">
            <summary>
            Arguments for the ItemIdentityChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.item">
            <summary>
            The item whose identity is changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.propertySheet">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.oldItemType">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.newItemType">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.oldUnevaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.newUnevaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.oldEvaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.newEvaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.hasItemTypeChanged">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.hasUnevaluatedIncludeChanged">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.#ctor(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.Item">
            <summary>
            Gets the item whose identity was changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.PropertySheet">
            <summary>
            The evaluated full path of the property sheet/project manifest
            that contains this item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.OldItemType">
            <summary>
            The old item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.NewItemType">
            <summary>
            The new item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.OldUnevaluatedInclude">
            <summary>
            The old unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.NewUnevaluatedInclude">
            <summary>
            The new unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.OldEvaluatedInclude">
            <summary>
            The old evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.NewEvaluatedInclude">
            <summary>
            The new evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.HasItemTypeChanged">
            <summary>
            Indicates if the item type has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.StandardItemIdentityChangedEventArgs.HasUnevaluatedIncludeChanged">
            <summary>
            Indicates if the unevaluated include has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties">
            <summary>
            Provides properties available in an MSBuild ITaskItem.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.isReadOnly">
            <summary>
            A value indicating whether this instance should not allow mutating of metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.#ctor(Microsoft.Build.Framework.ITaskItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.PropertyKind">
            <summary>
            see IProjectProperties
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.Context">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.FileFullPath">
            <summary>
            See IProjectProperties
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.TaskItem">
            <summary>
            Stores the ITaskItem where properties will be read.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetPropertyNamesAsync">
            <summary>
            see IProjectProperties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetDirectPropertyNamesAsync">
            <summary>
            see IProjectProperties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetUnevaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.SetPropertyValueAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.DeletePropertyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.IsValueInheritedAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.DeleteDirectPropertiesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost">
            <summary>
            Bootstraps CPS when no host IDE is available with a service-level MEF composition.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.CreateSelfHostAsync(System.Collections.Generic.IReadOnlyCollection{System.Reflection.Assembly},Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel,System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)">
            <summary>
            Creates a project service that operates over the given list of project assemblies.
            </summary>
            <param name="assemblies">The project assemblies that will make up the catalog.</param>
            <param name="threadingModel">The threading model.</param>
            <param name="serviceCapabilities">Additional service capabilities to define.</param>
            <param name="throwCompositionErrors">A flag indicating whether to throw exception when composition error happens.</param>
            <returns>The CPS project service.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.CreateSelfHostContainerAsync(System.Collections.Generic.IReadOnlyCollection{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Creates a MEF container around the specified assemblies.
            </summary>
            <param name="assemblies">The project assemblies that will make up the catalog.</param>
            <param name="throwCompositionErrors">A flag indicating whether to throw exception when composition error happens.</param>
            <returns>The MEF container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.CreateSelfHostContainer(Microsoft.VisualStudio.Composition.ComposableCatalog,System.Boolean)">
            <summary>
            Creates a project service that operates over the specified catalog.
            </summary>
            <param name="catalog">The catalog containing all necessary project assemblies.</param>
            <param name="throwCompositionErrors">A flag indicating whether to throw exception when composition error happens.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.GetProjectService(Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel,System.Collections.Immutable.IImmutableSet{System.String},System.Nullable{System.Boolean},Microsoft.VisualStudio.Composition.ExportProvider)">
            <summary>
            Initializes CPS within the container.
            </summary>
            <param name="threadingModel">The threading model.</param>
            <param name="serviceCapabilities">Additional service capabilities to define.</param>
            <param name="diagnosticRuntime">A flag indicating whether to load CPS in diagnostic mode.</param>
            <param name="container">The MEF container.</param>
            <returns>The CPS <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectService"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.AdditionalEnvironmentVariables">
            <summary>
            A class whose lifetime temporarily sets an environment variable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.AdditionalEnvironmentVariables.name">
            <summary>
            The name of the environment variable to set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.AdditionalEnvironmentVariables.oldValue">
            <summary>
            The value of the environment variable to restore upon disposal of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.AdditionalEnvironmentVariables.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.AdditionalEnvironmentVariables"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Hosting.ProjectServiceSelfHost.AdditionalEnvironmentVariables.Dispose">
            <summary>
            Restores the old value of the variable.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher">
            <summary>
            Functions for matching file names with patterns.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.InvalidPathChars">
            <summary>
            Cache of the list of invalid path characters, because this method returns a clone (for security reasons)
            which can cause significant transient allocations
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries">
            <summary>
            Delegate defines the GetFileSystemEntries signature that GetLongPathName uses
            to enumerate directories on the file system.
            </summary>
            <param name="entityType">Files, Directories, or Files and Directories</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The file pattern.</param>
            <param name="projectDirectory">Undocumented.</param>
            <param name="stripProjectDirectory">Undocumented.</param>
            <returns>The array of filesystem entries.</returns>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.FileSystemEntity">
            <summary>
            The type of entity that GetFileSystemEntries should return.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.FileSystemEntity.Files">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.FileSystemEntity.Directories">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.FileSystemEntity.FilesAndDirectories">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.HasWildcards(System.String)">
            <summary>
            Determines whether the given path has any wild card characters.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFileSystemEntries(Microsoft.Build.Shared.FileMatcher.FileSystemEntity,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the files and\or folders specified by the given path and pattern.
            </summary>
            <param name="entityType">Whether Files, Directories or both.</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The pattern to search.</param>
            <param name="projectDirectory">The directory for the project within which the call is made</param>
            <param name="stripProjectDirectory">If true the project directory should be stripped</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFilesAndDirectories(System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria. Inaccessible or non-existent file
            system entries are skipped.
            </summary>
            <returns>Array of matching file system entries (can be empty).</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Same as Directory.GetFiles(...) except that files that
             aren't accessible are skipped instead of throwing an exception.
            
             Other exceptions are passed through.
             </summary>
             <param name="path">The path.</param>
             <param name="filespec">The pattern.</param>
             <param name="projectDirectory">The project directory</param>
             <param name="stripProjectDirectory">Undocumented.</param>
             <returns>Files that can be accessed.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleDirectories(System.String,System.String)">
             <summary>
             Same as Directory.GetDirectories(...) except that files that
             aren't accessible are skipped instead of throwing an exception.
            
             Other exceptions are passed through.
             </summary>
             <param name="path">The path.</param>
             <param name="pattern">Pattern to match</param>
             <returns>Accessible directories.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetLongPathName(System.String,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a path name, get its long version.
            </summary>
            <param name="path">The short path.</param>
            <param name="getFileSystemEntries">Delegate.</param>
            <returns>The long path.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.SplitFileSpec(System.String,System.String@,System.String@,System.String@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, split it into left-most 'fixed' dir part, middle 'wildcard' dir part, and filename part.
            The filename part may have wildcard characters in it.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.PreprocessFileSpecForSplitting(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Do most of the grunt work of splitting the filespec into parts.
            Does not handle post-processing common to the different matching
            paths.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RemoveInitialDotSlash(System.String[])">
            <summary>
            Removes the leading ".\" from all of the paths in the array.
            </summary>
            <param name="paths">Paths to remove .\ from.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.IsDirectorySeparator(System.Char)">
            <summary>
            Checks if the char is a DirectorySeparatorChar or a AltDirectorySeparatorChar
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RemoveProjectDirectory(System.String[],System.String)">
            <summary>
            Removes the current directory converting the file back to relative path
            </summary>
            <param name="paths">Paths to remove current directory from.</param>
            <param name="projectDirectory">Undocumented.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFilesRecursive(System.Collections.IList,System.String,System.String,System.String,System.Int32,System.Text.RegularExpressions.Regex,System.Boolean,System.String,System.Boolean,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Get all files that match either the file-spec or the regular expression.
            </summary>
            <param name="listOfFiles">List of files that gets populated.</param>
            <param name="baseDirectory">The path to enumerate</param>
            <param name="remainingWildcardDirectory">The remaining, wildcard part of the directory.</param>
            <param name="filespec">The filespec.</param>
            <param name="extensionLengthToEnforce">Undocumented.</param>
            <param name="regexFileMatch">Wild-card matching.</param>
            <param name="needsRecursion">If true, then recursion is required.</param>
            <param name="projectDirectory">Undocumented.</param>
            <param name="stripProjectDirectory">Undocumented.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RegularExpressionFromFileSpec(System.String,System.String,System.String,System.Boolean@)">
             <summary>
             Given a file spec, create a regular expression that will match that
             file spec.
            
             PERF WARNING: this method is called in performance-critical
             scenarios, so keep it fast and cheap
             </summary>
             <param name="fixedDirectoryPart">The fixed directory part.</param>
             <param name="wildcardDirectoryPart">The wildcard directory part.</param>
             <param name="filenamePart">The filename part.</param>
             <param name="isLegalFileSpec">Receives whether this pattern is legal or not.</param>
             <returns>The regular expression string.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(System.String,System.Text.RegularExpressions.Regex@,System.Boolean@,System.Boolean@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="regexFileMatch">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(System.String,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">Receives the wildcard directory part.</param>
            <param name="filenamePart">Receives the filename part.</param>
            <param name="matchFileExpression">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.FileMatch(System.String,System.String)">
            <summary>
            Given a pattern (filespec) and a candidate filename (fileToMatch)
            return matching information.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fileToMatch">The candidate to match against.</param>
            <returns>The result class.</returns>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.Result">
            <summary>
            The results of a match between a filespec and a file name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.Result.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Build.Shared.FileMatcher.Result"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
    </members>
</doc>
