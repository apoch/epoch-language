<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ProjectSystem.V14Only</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProviderAsync">
            <summary>
            Describes a project extension that may attach loggers to arbitrary builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProviderAsync.GetLoggersAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Gets a set of loggers to attach to a given build.
            </summary>
            <param name="targets">The list of targets being executed.</param>
            <param name="properties">The set of virtual properties set on this build.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The set of loggers to attach.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject2">
            <summary>
            Provides MSBuild project building services.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject2.IsUpToDateAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Boolean,System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs a partial build up-to-date check based on the filter
            of <paramref name="beforeDrainCriticalTasks"/>
            </summary>
            <param name="buildAction">The build action to query up-to-date status.</param>
            <param name="beforeDrainCriticalTasks">Filters the set of up-to-date providers that are called based upon
            their BeforeDrainCriticalTasks metadata</param>
            <param name="logger">A logger that may be used to write out status or information messages regarding the up-to-date check.
            May be null.</param>
            <param name="cancellationToken">A token whose cancellation indicates lost interest in the result of the async operation.</param>
            <returns>A task whose result is <c>true</c> if the given build action is up-to-date. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction">
            <summary>
            Well-known build operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Build">
            <summary>
            Incremental build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Rebuild">
            <summary>
            A full (non-incremental) build.  Generally performed by Clean followed by a Build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Clean">
            <summary>
            Removes all intermediate and final items generated by previous builds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Compile">
            <summary>
            Selective file build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Link">
            <summary>
            Link-Only
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Deploy">
            <summary>
            Deploy project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Package">
            <summary>
            Generate the package.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost">
            <summary>
            An interface optionally implemented by <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when they schedule their builds via the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost.BuildBatch(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Schedules a build that will include exactly a given set of build requests.
            </summary>
            <param name="buildRequests">A set of build requests that have been bundled together by a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService"/>.</param>
            <returns>A map of the build requests and their results.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProvider">
            <summary>
            Describes a project extension that may attach loggers to arbitrary builds.
            </summary>
            <devremarks>
            TODO: In Dev15 remove this interface in favor of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProviderAsync"/> interface
            (and probably rename the other one to trim off the "Async" distinguishing suffix).
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProvider.GetLoggers(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Gets a set of loggers to attach to a given build.
            </summary>
            <param name="targets">The list of targets being executed.</param>
            <param name="properties">The set of virtual properties set on this build.</param>
            <returns>The set of loggers to attach.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost">
            <summary>
            An interface that should be exported at the CPS ProjectService scope to provide centralized build services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost.IsCancelable">
            <summary>
            Gets a value indicating whether build requests submitted with this build manager can be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost.IsApplicableAsync">
            <summary>
            Gets a value indicating whether this build host can start a build in this environment at this time.
            </summary>
            <remarks>
            A build host that works within the coordination of the Solution Build Manager only returns <c>true</c>,
            for example, when the Solution Build Manager is currently running a build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost.Build(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Acquires an MSBuild <see cref="T:Microsoft.Build.Execution.BuildManager"/> and submits the specified build requests for building.
            </summary>
            <param name="buildRequests">The build requests to submit and the loggers that should be attached to each one.</param>
            <returns>A map of the build requests and their results.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService">
            <summary>
            A service that intelligently schedules build requests, re-ordering and batching them for improved throughput or UI-responsiveness.
            </summary>
            <remarks>
            The default implementation of this service can reorder and batch build requests in order to prioritize builds and improve throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService.Enqueue(Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Enqueues a set of build requests for scheduling.
            </summary>
            <param name="buildManagerHost">The build manager host that should ultimately receive the batched build that is assembled from these requests.</param>
            <param name="buildRequests">The set of build requests.</param>
            <returns>A map of build requests and tasks that return their build results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService.IsCompatibleProjectInstance(Microsoft.Build.Execution.ProjectInstance,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Execution.ProjectInstance})">
            <summary>
            Checks whether a given ProjectInstance would be compatible with a set of other project instances that have already been accepted as part of a build.
            </summary>
            <param name="candidateInstance">The project instance being considered to add to the build.</param>
            <param name="compatibleProjectInstances">The project instances that are already part of a build.</param>
            <returns><c>true</c> if the candidate project instance can be added to the build without introducing a versioning problem in the build system; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService.Abort(Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest,System.Exception})">
            <summary>
            Aborts a set of build requests, which cannot be serviced correctly. Build requests causing deadlocks have to be aborted.
            </summary>
            <param name="buildManagerHost">The build manager host that originally expected to execute the build requests to be aborted..</param>
            <param name="abortedReasons">
            The set of build requests for a specified build manager to be aborted, and also include failed reasons for those requests.
            </param>
            <remarks>Only requests which are in the pending state can be aborted. Aborting a request which is in the build will be ignored.</remarks>
            <returns>A collection of build requests which are aborted.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal">
            <summary>
            Additional build methods that are only appropriate to be invoked within CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal.BuildWithSolutionAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.BuildAction},System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on this project, even if this configuration does not belong to the active solution configuration.
            </summary>
            <param name="actions">The actions to build.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal.BuildWithSolutionAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on this project, even if this configuration does not belong to the active solution configuration.
            </summary>
            <param name="targets">The targets to build.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal.IsUpToDateCheckEnabledAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether an up-to-date check is enabled for a given build action,
            filtering the set of up-to-date checkers based upon <paramref name="beforeDrainCriticalTasks"/>
            </summary>
            <param name="buildAction">The build action being performed</param>
            <param name="beforeDrainCriticalTasks">Filters the set of up-to-date checkers based upon their metadata</param>
            <param name="cancellationToken">The cancelation token</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority">
            <summary>
            Expresses the desired handling and positioning of a build request by describing its priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority.High">
            <summary>
            The UI is completely blocked until this build completes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority.Medium">
            <summary>
            The UI isn't blocked, but the user may be waiting for an asynchronous update to the UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority.Low">
            <summary>
            The user may not notice when this build completes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest">
            <summary>
            An interface that fully describes a build request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.BuildRequestData">
            <summary>
            Gets the MSBuild build request itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.CancellationToken">
            <summary>
            Gets the cancellation token that signals that the client requesting this build is no longer interested in its results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.Loggers">
            <summary>
            Gets the set of loggers to attach to this build request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.Priority">
            <summary>
            Gets the priority with which to treat this build request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.IsMainThreadRequired">
            <summary>
            Gets a value indicating whether this build may require the main thread to execute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.IsMainThreadBlocked">
            <summary>
            Gets a value indicating whether the main thread is blocked for the completion of this build request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.OnBeginBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when the build is actually beginning
            to give the owner of the build request an opportunity to perform any steps required to
            execute immediately before the request is submitted to MSBuild.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates that the build request has been canceled.
            This token may not be the same as the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.CancellationToken"/> property on this
            instance because other cancellation criteria may be linked with it.
            </param>
            <returns>A task whose completion allows the build to proceed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.OnEndBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when MSBuild has finished executing this request
            to give the owner of the build request an opportunity to perform any steps required to
            execute immediately after the request is finished within MSBuild.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates that the build request has been canceled.
            This token may not be the same as the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.CancellationToken"/> property on this
            instance because other cancellation criteria may be linked with it.
            </param>
            <returns>A task whose completion allows subsequent builds to proceed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus">
            <summary>
            Describes build modes for a specific project configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.Idle">
            <summary>
            The absence of all flags, indicating that a build can be started.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.Busy">
            <summary>
            Indicates this project configuration is currently building (or at least is in a build queue).
            </summary>
            <remarks>
            When this flag is present, a build request may still be successfully queued.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.SecurityDisabled">
            <summary>
            Indicates that this project cannot be built due to a failed security check.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.ConfigurationDisabled">
            <summary>
            Indicates that this project configuration is not a member of the active solution configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.DisabledMask">
            <summary>
            A mask of all bits that indicate that a build may not be started.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport">
            <summary>
            A service that assists in a general build client to query a particular project's capability to build various ways.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.Status">
            <summary>
            Gets the status of build support in this project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.GetTargetForBuildAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction)">
            <summary>
            Gets the name of the target that implements a specified build action.
            </summary>
            <param name="buildAction">The build action being queried.</param>
            <returns>The name of an MSBuild target, or <c>null</c> if the specified build action is not supported.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.IsBuildActionSupportedAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Threading.CancellationToken)">
            <summary>
            Verifies that the build action is supported for current configuration settings.
            </summary>
            <param name="buildAction">The build action to perform.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if the build action is supported</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.IsBuildTargetSupportedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Verifies that the build action target exists for current configuration settings.
            </summary>
            <param name="target">The build target to perform.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if the build target is supported</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildUpToDateCheckProvider">
            <summary>
            An interface that may be exported at the ConfiguredProject scope to provide a hint
            as to whether the project's outputs are up to date with respect to its inputs.
            </summary>
            <remarks>
            MEF optional metadata:
                    BeforeDrainCriticalTasks (bool) - Indicates if this provider is to be ran
                    before (true) or after (false, default) draining of critical tasks.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildUpToDateCheckProvider.IsUpToDateCheckEnabledAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether the up-to-date check is available at the moment.
            </summary>
            <param name="cancellationToken">A token that is cancelled if the caller loses interest in the result.</param>
            <returns>A task whose result is <c>true</c> if the up-to-date check is enabled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildUpToDateCheckProvider.IsUpToDateAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Check if project outputs are up-to-date (i.e there is no need to build)
            </summary>
            <param name="buildAction">The build action to perform.</param>
            <param name="logger">A logger that may be used to write out status or information messages regarding the up-to-date check.</param>
            <param name="cancellationToken">A token that is cancelled if the caller loses interest in the result.</param>
            <returns>A task whose result is true if project is up-to-date</returns>
            <remarks>
            The cache must be of fullpath to recent timestamp mapping with case insensitive comparisons of the path. The
            timestamps are DateTimes, expected to be in UTC format.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider">
            <summary>
            An interface that extensions can export to provide an implementation
            for the deploy phase of build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.IsDeploySupported">
            <summary>
            Gets a value indicating whether or not deploy is currently supported.
            </summary>
            <devremarks>
            TODO: make this property an async method: GetIsDeploySupportedAsync()
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.Commit">
            <summary>
            Alerts a project that a deployment operation was successful. Called immediately after the project finishes deployment regardless of the result of other projects in the solution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.DeployAsync(System.Threading.CancellationToken,System.IO.TextWriter)">
            <summary>
            Signals to start the deploy operation.
            </summary>
            <param name="cancellationToken">A cancellation token that will be set if the deploy is cancelled by the user.
            This cancellation token should be passed in as the CancellationToken parameter to the task that is returned.</param>
            <param name="outputPaneWriter">A TextWriter that will write to the deployment output pane.</param>
            <returns>A task that performs the deploy operation.</returns>
            <devremarks>
            TODO: Reorder parameters so cancellationToken is last.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.Rollback">
            <summary>
            Alerts a deployment project that a deployment operation has failed. Called immediately after the project fails deployment regardless of the result of other projects in the solution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider">
            <summary>
            An interface that MEF extensions can export to provide an implementation for publishing the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider.IsPublishSupportedAsync">
            <summary>
            Gets a value indicating whether or not publish is currently supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider.PublishAsync(System.Threading.CancellationToken,System.IO.TextWriter)">
            <summary>
            Signals to start the publishing operation.
            </summary>
            <param name="cancellationToken">A cancellation token that will be set if the publish is cancelled by the user.</param>
            <param name="outputPaneWriter">A TextWriter that will write to the publishing output pane.</param>
            <returns>A task that performs the publishing operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider.ShowPublishPromptAsync">
            <summary>
            Displays a prompt that asks the user whether or not a publishing operation should continue.
            </summary>
            <returns>true if the publish should continue.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IFileTimestampCache">
            <summary>
            Provides a system-wide cache of file timestamps to optimize up-to-date checks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IFileTimestampCache.IsCacheApplicable">
            <summary>
            Gets a value indicating whether the cache is currently active given the state of the process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IFileTimestampCache.TimestampCache">
            <summary>
            Gets the cache of file absolute paths and modification timestamps.
            </summary>
            <remarks>
            Implementations of this interface should provide a thread-safe dictionary, perhaps ConcurrentDictionary&lt;string, DateTime&gt;.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject">
            <summary>
            Wraps an MSBuild host object with metadata and build coordination events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.TargetName">
            <summary>
            Gets the MSBuild target that the host object is to apply to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.TaskName">
            <summary>
            Gets the MSBuild task that the host object is to apply to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.TaskHostObject">
            <summary>
            Gets the MSBuild host object itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.IsMainThreadRequired">
            <summary>
            Gets a value indicating whether the host object might ever require the main thread during the build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.OnBeginBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when the build is actually beginning.
            </summary>
            <param name="cancellationToken">A token whose cancellation indicates that the build request has been canceled.</param>
            <returns>A task whose completion allows the build to proceed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.OnEndBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when MSBuild has finished executing this request.
            </summary>
            <param name="cancellationToken">A token whose cancellation indicates that the build request has been canceled.</param>
            <returns>A task whose completion allows subsequent builds to proceed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IHostObjectProvider">
            <summary>
            Provides host objects to MSBuild tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IHostObjectProvider.CreateHostObjectsAsync">
            <summary>
            Creates and initializes host objects to supply to the build.
            </summary>
            <remarks>A task whose result is the set of initialized host objects.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupProvider">
            <summary>
            Adds output groups to the set of known output groups for a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupProvider.OutputGroups">
            <summary>
            Gets a set of output group metadata, which will form the basis of a full output group aggregated by the output group service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult">
            <summary>
            Describes the result of a build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.MSBuildResult">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Execution.BuildResult" /> instance provided by MSBuild.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.OverallResult">
            <summary>
            Gets the overall build result (pass/fail).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.Warnings">
            <summary>
            Gets the number of warnings that were generated by the build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.Errors">
            <summary>
            Gets the number of errors that were generated by the build.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.ICommandLinePreviewProvider">
            <summary>
            An interface that a component designed to assist in command line preview generation can implement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ICommandLinePreviewProvider.GetAdditionalCommandLineValuesAsync(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties)">
            <summary>
            Gets the additional values to include in the command line preview that are additional to
            what some property in the XAML file actually provides by itself.
            </summary>
            <param name="parameter">The name of the parameter whose values are required.</param>
            <param name="contextProperties">Access to project properties.</param>
            <returns>
            An enumeration of additional values to tack on for the parameter's arguments.
            Null must never be returned, but an empty enumeration may be.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IFlushableLogger">
            <summary>
            An MSBuild logger that privately queues message that come from MSBuild
            and may need to flush messages before a build is considered completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IFlushableLogger.FlushAsync">
            <summary>
            Flushes all queued messages to their final destinations and closes the logger to additional messages.
            </summary>
            <returns>
            A task that is complete when all messages have been flushed.
            </returns>
            <remarks>
            Implementations should be prepared to be called from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject">
            <summary>
            Provides MSBuild project building services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.DesignTimeBuildPropertiesSource">
            <summary>
            Gets the source of a block that broadcasts the properties to define to match the semantic of design-time builds.
            </summary>
            <devremarks>
            Dev15 TODO: Consider moving this to ProjectSubscriptionService.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.GetFullBuildPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the properties to define to match the semantic of full builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.GetDesignTimeBuildPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the properties to define to match the semantic of design-time builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,Microsoft.Build.Execution.ProjectInstance,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of targets on a given ProjectInstance.
            </summary>
            <param name="targets">The targets to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="projectInstance">The project instance that should be built.  Cannot be null.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This overload includes unsaved project file changes made to projects referenced from this one.
            Project state is synchronously acquired to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.BuildAction},System.Threading.CancellationToken,Microsoft.Build.Execution.ProjectInstance,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on a given ProjectInstance.
            </summary>
            <param name="actions">The actions to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="projectInstance">The project instance that should be built.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This overload includes unsaved project file changes made to projects referenced from this one.
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Boolean,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of targets on this project.
            </summary>
            <param name="targets">The targets to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="includeUnsavedChanges">A value indicating whether unsaved changes to this and any referenced projects should be considered during the build. This does not relate to unsaved changes in source files.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.BuildAction},System.Threading.CancellationToken,System.Boolean,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on this project.
            </summary>
            <param name="actions">The actions to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="includeUnsavedChanges">A value indicating whether unsaved changes to this and any referenced projects should be considered during the build.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.IsUpToDateCheckEnabledAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether an up-to-date check is enabled for a given build action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.IsUpToDateAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether a given build action is considered up-to-date.
            </summary>
            <param name="buildAction">The build action to query up-to-date status.</param>
            <param name="logger">A logger that may be used to write out status or information messages regarding the up-to-date check.
            May be null.</param>
            <param name="cancellationToken">A token whose cancellation indicates lost interest in the result of the async operation.</param>
            <returns>A task whose result is <c>true</c> if the given build action is up-to-date.  False otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles">
            <summary>
            Special feature to build just some files in a project for supporting project types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles.PrepareBuildFilesAsync(System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)">
            <summary>
            Obtains the targets to build and global properties to set for a specified subset of files in the project.
            </summary>
            <param name="files">The files in the project to build/compile.  Paths should be absolute or project-relative.</param>
            <param name="predeterminedTarget">A value indicating whether the target to build has already been determined.</param>
            <returns>An asynchronous result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles.CanBuildFileAsync(System.String)">
            <summary>
            Checks if the file has an associated target.
            </summary>
            <param name="file">The project-relative or absolute path to the file.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult">
            <summary>
            The composite result of the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles.PrepareBuildFilesAsync(System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult.BuildMayProceed">
            <summary>
            Gets or sets a value indicating whether the build can proceed.
            </summary>
            <value><c>true</c> if the build can proceed; <c>false</c> if predeterminedTarget is <c>false</c> and any of the requested files can't be found in the project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult.Properties">
            <summary>
            Gets or sets the properties to include in the build so that only selected files are compiled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult.Targets">
            <summary>
            Gets or sets the targets to build for this set of files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup">
            <summary>
            A set of outputs generated by a project that fit under some common category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.Name">
            <summary>
            The well-known name of this group to Visual Studio (non-localized).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.TargetName">
            <summary>
            Gets the target that is built to determine the contents of this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.Description">
            <summary>
            Gets a localized string describing the purpose of the contents of this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.DisplayName">
            <summary>
            Gets a localized string to identify this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.Outputs">
            <summary>
            Gets the outputs of some target as part of the build process.  Typically file paths with metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.IsSuccessful">
            <summary>
            Gets a value indicating whether the output group built successfully.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService">
            <summary>
            Provides access to project generated build outputs by categorical name.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService.OutputGroupNames">
            <summary>
            Gets a set of names of the available output groups for this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService.GetOutputGroupsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all the (non-dependency) output groups in the project that build successfully.
            </summary>
            <param name="cancellationToken">A token to cancel the output group build.</param>
            <returns>A task whose result is the set of output groups in this project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService.GetOutputGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single output group with the given name.
            </summary>
            <param name="name">The name of the output group to retrieve.  Examples include "Built", "ContentFiles", or "Symbols".</param>
            <param name="cancellationToken">A token to cancel the output group build.</param>
            <returns>A task whose result is the requested output group.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the requested output group isn't defined in the project.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor">
            <summary>
            This component provides a mechanism to intercept and optionally take over
            processing of build error messages by the default <see cref="T:Microsoft.Build.Framework.ILogger"/> implementation.
            This is called by the latter component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor.HandleEvent(Microsoft.Build.Framework.BuildEventArgs,System.String)">
            <summary>
            Called by the default implementation of <see cref="T:Microsoft.Build.Framework.ILogger"/> before processing any
            build error message. The default implementation does not further process the message itself if
            "true" is returned from this method.
            </summary>
            <param name="buildEventArgs"> Event args of the build event raised by MSBuild. </param>
            <param name="message"> The error message to process.</param>
            <returns> "true" if the error message has been fully processed and does not need to be processed further by
            the default <see cref="T:Microsoft.Build.Framework.ILogger"/> implementation. </returns>
            <remarks>
            This method is called on the UI thread.
            </remarks>
            <devremarks>
            Dev15: We should raise this event from a background thread and make it async.
            </devremarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintService">
            <summary>
            A service that captures semantic descriptions of project changes
            and allows subscription to those events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintService.Subscribe(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Subscribes a receiver to receive project change events.
            </summary>
            <param name="unconfiguredProject">The unconfigured project the receiver is interested in receiving events for.</param>
            <param name="receiver">The event sink.</param>
            <param name="interestedEventKinds">The kinds of events the sink would like to receive.</param>
            <returns>A value that may be disposed to cancel the subscription.</returns>
            <remarks>
            A subscriber is guaranteed to receive matching calls to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver.HintingAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint)"/> and
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver.HintedAsync(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint}})"/>.
            When a subscription is created in between two such events, the subscriber will not receive the latter call.
            When a subscription is disposed of in between two such events, the subscriber will still receive the latter call.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory2">
            <summary>
            Creates new <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory"/> instances.
            </summary>
            <devremarks>
            This interface need be merged back to IProjectTreeFactory in Dev 15.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory2.NewTree(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="filePath">The full file path for the node.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <param name="children">Child tree, which must be created by this factory.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory2.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <param name="children">Child tree, which must be created by this factory.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeModifier2">
            <summary>
            Extensibility point that allows for arbitrary changes to a project tree after a tree provider creates it.
            It allows the provider to pass the original tree before latest mutation to the modifier, so the modifier can understand what has been updated.
            The primary reason is that the tree modifier gets a chance to update the node based on what has changed to prevent two modifier to update
            the same property repeatedly.
            This is an extension of the IProjectTreeModifier interface, and it is not a MEF contract.  Tree modifiers should export IProjectTreeModifier.
            If a tree modifier implements this interface, IProjectTreeModifier2.ApplyModifications will be called instead of the IProjectTreeModifier interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeModifier2.ApplyModifications(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider)">
            <summary>
            Transforms a tree in some way (perhaps customizing icons or menus).
            </summary>
            <param name="tree">The tree or node as it comes from a tree provider or another modifier.</param>
            <param name="previousTree">The root of the previous tree before the latest mutation.  This is null, when the TreeModifier is called to initialize a new node.</param>
            <param name="projectTreeProvider">The project tree provider that created the initial tree node.</param>
            <returns>The modified tree, or the original tree if no changes were appropriate.  It node's identity must match the one passed in.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicDebugTargetsGenerator">
            <summary>
            An interface exported at or above the ConfiguredProject scope to supply
            a dynamic list of debug targets that may appear in the debug target dropdown.
            </summary>
            <remarks>
            Exports of this interface should also have ExportMetadata with a key of "Name"
            and a value that matches the EnumProvider attribute's value in the debugger's XAML file.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IVsProjectDesignerPageService">
             <summary>
             Provides services for gathering property designer pages for a project.
              This is a singlton service, which will be implemented inside CPS VS implementation side.
            
             Note: Both this interface and IVsPropertyPageService need be moved to VS specific layer.
              This is temporary defined here because it shares PropertyPageFilters type with IVsPropertyPageService.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IVsProjectDesignerPageService.IsProjectDesignerSupported">
            <summary>
            Whether the project designer is supported for the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IVsProjectDesignerPageService.GetPagesAsync(Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters)">
            <summary>
            Gets the co-creatable GUIDs for the property pages to display for the current project.
            </summary>
            <param name="filter">A filter of which property pages to include.</param>
            <returns>An array of co-creatable GUIDs.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters">
            <summary>
            Attributes of property pages that can be used to filter the set to display.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters.None">
            <summary>
            No property pages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters.ConfigurationIndependent">
            <summary>
            Property pages that contain <em>no</em> properties whose values are set with configuration conditions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters.ConfigurationDependent">
            <summary>
            Property pages that contain properties whose values are set with configuration conditions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters.All">
            <summary>
            All property pages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IVsPropertyPageService">
            <summary>
            Provides services for displaying property pages for context objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IVsPropertyPageService.GetPagesAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Designers.Properties.PropertyPageFilters)">
            <summary>
            Gets the co-creatable GUIDs for the property pages to display for the given context
            whose properties are set without configuration conditions.
            </summary>
            <param name="context">The context of the element whose property pages should be displayed.</param>
            <param name="filter">A filter of which property pages to include.</param>
            <returns>An array of co-creatable GUIDs.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator">
            <summary>
            A contract for providers of values for DynamicEnumProperty properties.
            </summary>
            <remarks>
            Implementations of this interface should be thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator.AllowCustomValues">
            <summary>
            **** OBSOLTETE ****
            This property is not consumed and will be removed in a future version
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator.GetListedValuesAsync">
            <summary>
            The list of values for this property that should be displayed to the user as common options.
            It may not be a comprehensive list of all admissible values however.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator.TryCreateEnumValueAsync(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator.TryCreateEnumValueAsync(System.String)">
            <summary>
            Tries to find or create an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> based on some user supplied string.
            </summary>
            <param name="userSuppliedValue">The string entered by the user in the property page UI.</param>
            <returns>
            An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> if the <paramref name="userSuppliedValue"/> was successfully used
            to generate or retrieve an appropriate matching <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            A task whose result is <c>null</c> otherwise.
            </returns>
            <remarks>
            If this returns a task with a <c>null</c> result, then CPS will try to match the user supplied value to those
            listed in <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator.GetListedValuesAsync"/>. If that fails to find a suitable match then the user supplied
            value will be placed directly into the property field.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesProvider">
            <summary>
            Builds <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator"/> instances given a set of options.
            </summary>
            <remarks>
            Implementations of this interface should be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesProvider.GetProviderAsync(System.Collections.Generic.IList{Microsoft.Build.Framework.XamlTypes.NameValuePair})">
            <summary>
            Returns an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator"/> instance prepared to generate dynamic enum values
            given an (optional) set of options.
            </summary>
            <param name="options">
            A set of options set in XAML that helps to customize the behavior of the
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator"/> instance in some way.
            </param>
            <returns>
            Either a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IDynamicEnumValuesGenerator"/> instance
            or an existing one, if the existing one can serve responses based on the given <paramref name="options"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory">
            <summary>
            IPropertyPageUIFactory is a link between the property page provider and underlying page draw control
            Instances of IPropertyPageUIFactory contains only static data, therefore only one instance per page Id
            is needed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.PageId">
            <summary>
            Property page ID (used by frame UI)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.GroupOrder">
            <summary>
            Page parent section order (valid if GroupName is not null or empty)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.PageOrder">
            <summary>
            Page order (in section if any or global)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.Name">
            <summary>
            non localized page name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.GroupName">
            <summary>
            non localized parent section. (can be null or empty)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.DisplayName">
            <summary>
            The name of the page (as it apears in the left side of the Frame UI). This is localized string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.DisplayGroupName">
            <summary>
            The section where property page is under. can be null or empty. It is localized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory.CreateControl(Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIWindow)">
            <summary>
            This method will create the actual UI control that is responsible to draw the left part of UI frame.
            </summary>
            <param name="hostWindow">The containing UI window for the control</param>
            <returns>An instance of the UI control</returns>
            <remarks>
            The UI technology for the container and the control are up to the factory, which is why the API
            is weakly typed. Make sure to utilize the factory's metadata to only use factories that conform to
            the UI technology used by the hosting application.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProvider">
            <summary>
            Component implementing IPropertyPageUIFactoryProvider knows how to handle particular type of propery pages. given the full set of
            available XAML property page definitions, it will break it to an individyal property pages create IPropertyPageUIFactory
            associated with each page and provide back the list of pages to sent to Frame UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryProvider.GetPropertyPageUIFactories(System.Collections.Generic.ICollection{Microsoft.VisualStudio.ProjectSystem.Properties.IRule},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns the set of UI factories that should be included in the property page view for the given set of rules and itemTypes.
            </summary>
            <param name="rules">All applicable data models for this display.</param>
            <param name="itemTypes">The list of item types that are being included in the display.</param>
            <returns>list of property pages to show</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryService">
            <summary>
            Per-project configuration collection of property page UI factories.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryService.AddFactory(Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactory)">
            <summary>
            Adds a factory to the list of possible factories in this project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryService.GetFactoryFromId(System.Guid)">
            <summary>
            Returns the factory in this configuration for a given ID.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIFactoryService.GetPropertyEditor(System.String)">
            <summary>
            returns the named property editor instance
            </summary>
            <param name="editorName">the value for Name metadata to match</param>
            <returns>the property editor, null if there is none</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIWindow">
            <summary>
            Represents the window element for the property page controls
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIWindow.MarkDirty">
            <summary>
            Indicates to the containing window that the control state has become dirty.
            </summary>
            <remarks>
            The purpose of this method is to allow the property page window to know when state has
            changed in it's controls without having to poll each one. Then the window can perform
            specific actions such as enabling ok/apply buttons, etc.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIValueEditor">
            <summary>
            Represents the window element for the property page controls
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPageUIValueEditor.EditValueAsync(System.IServiceProvider,Microsoft.VisualStudio.ProjectSystem.Properties.IProperty,System.Object)">
            <summary>
            Invokes the editor.
            </summary>
            <param name="serviceProvider">The set of potential services the component can query for, mainly for access back to the host itself.</param>
            <param name="ruleProperty">the property being edited</param>
            <param name="currentValue">the current value of the property (may be different than property.Value - for example if host UI caches the new values until Apply button)</param>
            <returns>The new value.  May be <paramref name="currentValue"/> if no change is intended.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPagesDataModelProvider">
            <summary>
            Proffers the data model for property pages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPagesDataModelProvider.GetRule(Microsoft.Build.Framework.XamlTypes.Rule,System.String,System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> object for a particular schema and a particular context.
            </summary>
            <param name="schema">The Rule that describes the properties to access.</param>
            <param name="file">The project file, imported property sheet or user file to which the context applies; may be <c>null</c> to allow the default context.</param>
            <param name="itemType">The item type to which the context applies, if applicable.</param>
            <param name="itemName">The item name to which the context applies, if applicable.</param>
            <returns>Data model for the property page</returns>
            <devcomment>
            This method cannot simply take an IProjectPropertiesContext parameter instead of file|itemType|itemName
            because IProjectPropertiesContext requires that the file be set to a non-null value.
            </devcomment>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPagesDataModelProvider.GetRule(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Execution.ProjectInstance,System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> object for a particular schema and a particular context.
            </summary>
            <param name="schema">The Rule that describes the properties to access.</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="itemType">The item (definition) from which to read metadata.  May be null.</param>
            <param name="itemName">The item from which to read metadata.  May be null.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IPropertyPagesDataModelProvider.GetRule(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Execution.ProjectInstance,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> object for a particular schema and a particular context.
            </summary>
            <param name="schema">The Rule that describes the properties to access.</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="taskItem">The backing task item to get read-only properties from.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IValueEditor">
            <summary>
            Defines a value editor to be used on a property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IValueEditor.EditorType">
            <summary>
            Defines the MEF type, which implements IPropertyPageUIValueEditor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IValueEditor.DisplayName">
            <summary>
             Editor name to use in the property dropdown
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IValueEditor.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.Properties.IValueEditor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IJoinableProjectValueDataSource">
            <summary>
            A joinable instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource`1"/>
            </summary>
            <remarks>
            This interface does not derive from <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource`1"/> so that it needn't be generic,
            which can make it easier to call into this interface where type of the produced value doesn't matter to
            the immediate caller.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IJoinableProjectValueDataSource.Join">
            <summary>
            Extends any access to the UI thread held by the caller to this instance
            to assist in its regular execution, if needed.
            </summary>
            <returns>
            A value whose disposal stops any UI thread sharing from the caller to this service.
            May be <c>null</c> if this data source never needs to be joined.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedImportRegister">
            <summary>
            An UnconfiguredProject-scoped exported service that registers shared files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedImportRegister.RegisteredSharedProjectFiles">
            <summary>
            Gets the current set of registered project files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedImportRegister.RegisterInitialSharedProjectFilesAsync">
            <summary>
            Registers the initial set of shared project files with the central service.
            </summary>
            <remarks>
            Invoking this method kicks off a service that keeps the shared project file
            registration current for the lifetime of the project.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IAsyncCommandGroupHandler.GetCommandStatusAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},System.Int64,System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus)"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.UnhandledTask">
            <summary>
            A reusable completed task that wraps an unhandled command status response.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.handled">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.Handled"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.commandText">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.CommandText"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.status">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.Status"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.sharedInstance">
            <summary>
            A value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.#ctor(System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult"/> struct.
            </summary>
            <param name="handled">true if the command is recognized and the result specified should be returned to Visual Studio. false otherwise.</param>
            <param name="commandText">The default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.</param>
            <param name="status">The query result thus far (as default, or as handed off from previous handler).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.Unhandled">
            <summary>
            Gets a value that represents an unhandled command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.Handled">
            <summary>
            Gets or sets a value indicating whether the command is recognized and the result specified should be returned to Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.CommandText">
            <summary>
            Gets or sets the default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.Status">
            <summary>
            Getes or sets the query result thus far (as default, or as handed off from previous handler).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.AsTask">
            <summary>
            Wraps this instance in a Task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult.Equals(Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatusResult)">
            <summary>
            Checks equality between this value and another.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshot">
            <summary>
            A snapshot of the import tree for a ConfiguredProject.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshotService">
            <summary>
            Produces snapshots of the import tree for a ConfiguredProject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportTreeSnapshotService.GetCurrentImportTreeAsync">
            <summary>
            Returns a current snapshot of the project's import tree, acquiring a project lock as necessary.
            </summary>
            <returns>
            A task whose result is the import tree snapshot.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot">
            <summary>
            Describes an imported project file and the project files it imports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot.ProjectPath">
            <summary>
            Gets the full path to the imported file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot.Label">
            <summary>
            Gets the value of the Label on the Import element responsible for importing this project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot.GroupLabel">
            <summary>
            Gets the value of the Label attribute on the ImportGroup element (if any) containing the Import responsible for importing this project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectImportSnapshot.Imports">
            <summary>
            Gets the list of imports that appear in this project file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFolder">
            <summary>
            Describes a shared folder that may be imported by a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFolder.FolderPath">
            <summary>
            Gets the full path to the shared folder.
            </summary>
            <value>An absolute path that ends with a trailing path separator.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFolder.ProjectPath">
            <summary>
            Gets the full path to the project file that tracks this shared folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersService">
            <summary>
            A service exported at the UnconfiguredProject scope for managing shared folders for that project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersService.CreateSharedFolderAsync(System.String)">
            <summary>
            Creates a new Shared Folder on disk at the specified path.
            </summary>
            <param name="folderPath">The absolute or project-relative path of the shared folder (including leaf name.)</param>
            <returns>A task whose result is the absolute path to the shared.items file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersService.AddSharedFolderAsync(System.String)">
            <summary>
            Adds the specified Shared.items file as an import to this project.
            </summary>
            <param name="sharedItemsPath">The absolute or project-relative path to the shared.items file that is directly within the Shared Folder to be added.</param>
            <returns>A task whose result is <c>true</c> if the shared folder was added; <c>false</c> if it was already a member of the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersService.RenameSharedFolderAsync(System.String,System.String)">
            <summary>
            Renames a shared folder.
            </summary>
            <param name="sharedItemsPath">The project-relative or absolute path to the shared.items file within the folder to be renamed.</param>
            <param name="newFolderName">The new name for the shared folder.</param>
            <returns>A task that represents the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersService.RemoveSharedFolderAsync(System.String)">
            <summary>
            Removes the Shared Folder associated with the specified Shared.items file.
            </summary>
            <param name="sharedItemsPath">The absolute or project-relative path to the Shared.items file found within the Shared Folder to be removed.</param>
            <returns>A task that captures the result of the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshotService">
            <summary>
            A subscription service for shared folders in a ConfiguredProject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshotService.GetSharedFoldersAsync">
            <summary>
            Returns a current snapshot of the project's shared folders, acquiring a project lock as necessary.
            </summary>
            <returns>
            A task whose result is the snapshot of current shared folders.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot">
            <summary>
            A snapshot of shared folders imported by a project.
            </summary>
            <remarks>
            The strings are absolute paths with trailing slashes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot.ProjectDirectory">
            <summary>
            Gets the full path to the project directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSharedFoldersSnapshot.ContainsSharedFolder(System.String)">
            <summary>
            Checks membership of some folder in the shared folders collection.
            </summary>
            <param name="folderPath">A full path to the folder to check for.</param>
            <returns><c>true</c> if <paramref name="folderPath"/> represents a Shared Folder in this snapshot; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedImportSnapshotService">
            <summary>
            A service that publishes snapshots of shared import ProjectRootElements as they are updated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption">
            <summary>
            This enum specifies options available when registering a shared project file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption.ProjectAffinity">
            <summary>
            Attempt to register the shared project file as being owned by the calling project
            if possible. If this flag is not specified, then the shared project file will be
            managed in another project. If no other project registered the file specifying
            ProjectAffinity, then the shared project file will be managed in a (Solution-scoped)
            project-independent manner.
            </summary>
            <remarks>
            Projects that want to use this option need to meet the following criteria:
              1. The Project manages a node in its hierarchy for the shared project file.
                 NOTE: In Visual Studio this means that the project has an implementation
                       of IVsProject.IsDocumentInProject that will return the itemid for
                       the sharedProjectFile. It is also responsible to return an appropriate
                       string (of the project's choice) as the VSPROPID_SaveName for this itemid.
                       The project is also expected to implement IVsProject3.TransferItem.
                       This method is called to transfer ownership of the open shared
                       project file document to the project; the project is expected to
                       call IVsRunningDocumentTable.RenameDocument passing itself as the
                       IVsHierarchy and their itemid for the shared project file.
              2. The project is responsible to save the sharedProjectFile when asked to
                 save its corresponding project item.
                 NOTE: In Visual Studio this means that the project has an implementation of
                       IVsPersistHierarchyItem that will lookup the sharedProjectFile in the
                       SVsRunningDocumentTable and call IVsPersistDocData.SaveDocData on
                       the open document (DocData object).
            The first preference is to give ownership of the open shared project file document to
            the single project that registers with SharedProjectFileOwnerProject. If there
            is not a OwnerProject, then an attempt is made to give the ownership to the project
            that registers with ProjectAffinity. If multiple projects register the same shared
            project file with ProjectAffinity, then the ownership of the open document is given to the
            registering project which is the highest-level common parent project if there is one.
            Shared project files that are registered by either a project that does not meet
            the above requirements or which have been registered by multiple projects with no
            common parent project will be managed in a project-independent manner.
            NOTE: In Visual Studio they will be managed by the special, solution-scoped,
                  invisible hierarchy called "[Shared MSBuild Project Files]".
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption.InMemoryReload">
            <summary>
            This flag is used by projects that support light-weight reloading of their
            use of a shared project file without fully requiring the project to be closed.
            </summary>
            <remarks>
            This means that the project supports reloading by directly telling the MSBuild
            ProjectCollection to reload the MSBuild project file in memory without unloading
            the project completely.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption.EnableSccSupport">
            <summary>
            This flag is used by projects that want to enable Source Code Control (SCC)
            support for this shared project file.
            </summary>
            <remarks>
            In Visual Studio this means that the shared project file will managed as a
            "Project IVsHierarchy" in the Solution that has an implementation of
            IVsSccProject.GetSccFiles that returns the shared project file as its
            "project file" (for VSITEMID_ROOT). This also enables the implemenation
            to save a special PropertyGroup inside of the shared project file to store
            the ProjectID Guid and the SccLocation strings assigned to the project
            when it is added to SCC.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption.SharedProjectFileOwnerProject">
            <summary>
            This flag is used by the distinguished project user of a shared MSBuild file
            that wraps the user's access to the shared project file (aka Shared Assets Project).
            </summary>
            <remarks>
            <para>
            When a clear owner for the shared project file can be established, then this project trumps
            all projects that register with ProjectAffinity as the project that is given the
            ownership of the open shared MSBuild file in the RunningDocumentTable (RDT).
            </para>
            <para>
            There normally should only be one project that registers as the user of a shared MSBuild
            file with "SharedMSBuildFileOwnerProject" flag in the Solution. In this case this project
            is the assigned OwnerProject.
            In the rare event that more than one project registers with the "SharedMSBuildFileOwnerProject"
            flag, then if only one of these project is loaded (i.e. all of the others are unloaded),
            then the single, LOADED project would be assigned as the OwnerProject.
            </para>
            <para>
            NOTE: In Visual Studio the project that should specify this flag is the "real",
            top-level shared project file listed in the Solution file that wraps an importable
            shared project file (aka shared assets project or shared items project).
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.SaveOption">
            <summary>
            This option specifies the desired persistance operation to be performed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SaveOption.NoSave">
            <summary>
            Save nothing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SaveOption.SaveIfDirty">
            <summary>
            Save silently anything that is dirty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SaveOption.PromptSave">
            <summary>
            Prompt the user if they want to save.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService">
            <summary>
            A ProjectService scoped export which projects which use shared project files (e.g. import files) should use to register
            their shared files.
            </summary>
            <remarks>
            A host application (e.g. Visual Studio) could use this registration to coordinate the handling and persistence of
            shared project files.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.RegisterSharedProjectFiles(System.Collections.Generic.IReadOnlyCollection{System.String},System.String,Microsoft.VisualStudio.ProjectSystem.Designers.RegistrationOption,System.String)">
             <summary>
             Called by projects which use (or have used) shared project files (e.g. import files) to register
             those files during the project open operation.
             </summary>
             <param name="sharedFileFullPaths">list of shared project files the project wants to register</param>
             <param name="sharedFileUserFullPath">full path of the project that is calling to register its use of a
             shared project files.</param>
             <param name="options">Registration options.</param>
             <param name="categoryName">optional category (or role) for this shared project file, e.g. "SharedItemsImports".
             It may be null or String.Empty if no category grouping is required.</param>
             <remarks>
             Notes:
                 1. This method is normally called during the project opening operation. It may also be called while a project
                    is open when new shared files are introduced to the project.
                 2. Projects must be sure to call UnregisterAnySharedProjectFilesAsync when their project is closing.
                 3. If a project has ever called this services to register use of shared project files, then
                    it must continue to call the service from then on even if all of the imported project files
                    have been removed from the project. This is necessary so the service can properly track
                    when shared project files are no longer in use. Because the initialization operation of a project
                    may be asyncronous, the service won't assume that because a project is loaded and it never
                    called to register any files, that its previously registered shared project files are no longer in use.
                    It could just be that the project's initialization operation is not yet complete.
            
             IN VISUAL STUDIO:
                 When this is being called during the Project creation sequence it must be called after
                 IVsProjectFactory.CreateProject has returned (and ideally before IVsSolutionEvents.OnAfterOpenProject
                 is fired). It may also be called at later times when new shared MSBuild file import statements are added.
                 Recommended points to call this during project creation are the following:
                    1. IVsPrioritizedSolutionEvents.PrioritizedOnAfterOpenProject
                    2. if your are a flavored project is from IVsAggregatableProject.OnAggregationComplete.
                    3. IVsParentProject.OpenChildren.
             <para>
                 Registering shared project files with this service gives the following benefits:
                 1. A document (DocData object) will be registered in the RunningDocumentTable that will block the user from
                    opening the file simultaneously in a text (or other) editor. The user will be given the message that
                    The document 'blah' is already open as a project or a solution and cannot be opened in an editor at this time.".
                 2. The user will be prompted to save the shared project file in the Save Changes dialog at the correct
                    times. This includes when closing the solution or unloading/removing a project that has registered
                    the file. Ownership of the open document will continually be updated as projects that register the
                    file are opened/closed. If the file is managed with ProjectAffinity, then the shared project file
                    will appear a sub node under the highest-level registered project. If there is not a suitable
                    common parent project (with ProjectAffinity), the the shared project file will appear as a node
                    under the Solution-scoped "[Shared MSBuild Project Files]" project in the SaveChanges dialog.
                 3. The shared project file along with any contained item files will automatically be saved whenever
                    a registering project is saved.
                    This service tracks the IVsRunningDocTableEvents.OnAfterSave event fired when a registering project is saved.
                 4. This service automatically takes care of calling QuerySaveFiles with SVsQueryEditQuerySave service
                    when saving the shared project file. This is important for proper SCC handling during a save operation.
                 5. This service coordinates the Open Solution From Source Code Control (SCC) operation and automatically
                    adds the shared project files as invisible project files in the Solution (.sln) so that they are managed
                    by the active SccProvider. This achieves the goal of getting the shared project files downloaded from
                    SCC by file-based SCC Providers (e.g. MSSCCI SccProviders).
             </para>
             <para>
             Note:
                 Category names are optional and at the descretion of the caller. A project can use any names it likes.
                 Category names do not need to be predefined at install time; they can be generated at runtime.
                 One possible strategy is to use the project Configuration name (e.g. "Debug|x86") as the category name.
                 If the project uses such names that are user defined and can be added/removed, then it should call
                 RegisterSharedProjectFileCategoriesAsync after it as finished calling RegisterSharedProjectFilesAsync for
                 all of its categories. This allows the system to clean out stale category information that is no longer
                 being used.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.UnregisterAnySharedProjectFilesAsync(System.String)">
            <summary>
            Unregisters any shared files previously registered by the specified project.
            </summary>
            <param name="sharedFileUserFullPath">full path of the project that is calling to unregister its use of its
            shared project files.</param>
            <returns>A task that completes when the unregistration operation has finished.</returns>
            <remarks>
            This method is typically called during the project's close/dispose operation.
               * It is not treated as an error to call this for a projectFullPath that actually has not
            registered any files.
               * The shared project files that are being unregistered will still be considered as "in use".
            e.g. In Visual Studio this means the the unregistered shared project files will still be recorded as
            files to be managed by Source Code Control (SCC) in the Solution (.sln) file.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.RegisterSharedProjectFileCategories(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Called by projects that use dynamic shared project file category names (e.g. based on the names
            of project configurations (e.g. "Debug|x86"), in order to allow cleanup of stale persisted category data.
            </summary>
            <param name="sharedFileUserFullPath">full path of the project that is calling to register its use of a
            shared project files.</param>
            <param name="allPossibleProjectFileCategories">list of possible file categories still in use by the project.
            </param>
            <remarks>
            For example, if the project uses category names based on project configuration names and a configuration was
            deleted, then it is important to have called this method with the now current set of configuration based
            category names. If the project uses such names that are user defined and can be added/removed, then it should
            call RegisterSharedProjectFileCategories after it as finished calling RegisterSharedProjectFilesAsync for
            all of its categories.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.ReloadSharedProjectFileAsync(System.String)">
            <summary>
            Called by projects that want to request the SharedProjectFileRegistrationService to orchestrate the reloading
            of all projects that have registered as using (i.e. importing) the specified shared project file.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>A bool returning Task that completes when the reloading of all registered client projects have
            been reloaded. A true return value for this Task indicates that the specified shared project file
            had actually been registered as being used by a client project and that reloading of client project
            had been performed. A false return value of the Task indicates that the file had not been
            registered as being used by any client project with the SharedProjectFileRegistrationService.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.GetUserFullPathsOfSharedProjectFile(System.String)">
            <summary>
            Returns the list full paths of shared project file user projects for a particular shared project file.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>list of shared project file user project full paths</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.GetUsersOfSharedProjectFile(System.String)">
            <summary>
            Returns the list ProjectID Guids of shared project file user projects for a particular shared project file.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>list of shared project file user project ProjectID Guids</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.GetOwnerProjectForSharedProjectFile(System.String)">
            <summary>
            Returns the shared project file user project that registered use of the shared project file
            with RegistrationOption.SharedProjectFileOwnerProject.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>project file full path for the SharedProjectFileOwnerProject; or <c>null</c> if none is found.</returns>
            <remarks>
            <para>
            When a clear owner for the shared project file can be established, then this project trumps
            all projects that register with ProjectAffinity as the project that is given the
            ownership of the open shared MSBuild file in the RunningDocumentTable (RDT).
            </para>
            <para>
            There normally should only be one project that registers as the user of a shared MSBuild
            file with "SharedProjectFileOwnerProject" flag. After this project is loaded, it
            would would be the project returned from GetOwnerProjectForSharedProjectFile. When
            this project is unloaded or removed, then GetOwnerProjectForSharedProjectFile would
            return Guid.Empty indicating there is no owner for the shared MSBuild file loaded.
            </para>
            <para>
            In the case that more than one project registers with the "SharedProjectFileOwnerProject"
            flag, then if only one of these project is loaded (i.e. all of the others are unloaded),
            then the single, LOADED project would be considered the current owner for the shared MSBuild
            file and would be the project returned from GetOwnerProjectForSharedProjectFile.
            If there are multiple loaded projects that registered with the "SharedProjectFileOwnerProject"
            flag, then GetOwnerProjectForSharedProjectFile would return Guid.Empty indicating there is
            no clear owner for the shared MSBuild file. In this case, the ownership status is ambiguous.
            </para>
            <para>
            NOTE: In Visual Studio the project that should specify this flag is the "real",
            top-level shared project file listed in the Solution file that wraps an importable
            shared project file (aka shared assets project or shared items project).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.EnsureUsersOfSharedProjectFileAreLoaded(System.String)">
            <summary>
            Ensure all users of a given shared project file are fully loaded.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <remarks>
            <para>IN VISUAL STUDIO:
            This method will force all async loading of the shared project file user projects to be
            completed (by ASL).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.EnsureActiveUserOfSharedProjectFileIsLoaded(System.String)">
            <summary>
            Ensures that the active user of a given shared project file is fully loaded.
            </summary>
            <param name="sharedFileFullPath">Full path of a (potential) shared project file.</param>
            /// <remarks>
            <para>IN VISUAL STUDIO:
            This method will force async loading of the active shared project file user project to be
            completed (by ASL).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.IsSharedProjectFilesManagerHierarchyLoadedAsync">
            <summary>
            Is the shared project files manager hierarchy already loaded?
            </summary>
            <return>A task whose result is true if the shared project files manager hierarchy is already loaded.</return>
            <remarks>This method is for perf optimization, in order to avoid loading the shared project files manager hierarchy when it is not necessary.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.QueryRenameSharedProjectFile(System.String,System.String)">
            <summary>
            Checks with the environment for approval to rename a shared project file, and
            if approved performs any necessary prior steps (such as checking out of the solution file).
            Must be invoked on the UI thread.
            </summary>
            <param name="oldSharedFileFullPath">The old full path to the shared project file.</param>
            <param name="newSharedFileFullPath">The new full path to the shared project file.</param>
            <returns>A value indicating whether the rename is allowed to proceed.</returns>
            <exception cref="T:System.Exception">May be thrown if an error occurs while validating the rename.</exception>
            <remarks>
            NOTE: In Visual Studio this will result in:
            If the shared file is enabled for SCC integration, this method will invoke:
             * IVsSolution.QueryRenameProject
               * IVsTrackProjectDocuments2.QueryRenameFile
            Otherwise for non SCC-enabled shared files this will simply call:
             * IVsTrackProjectDocuments2.QueryRenameFile
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISharedProjectFileRegistrationService.OnAfterRenameSharedProjectFile(System.String,System.String)">
            <summary>
            Informs the environment of a renamed shared project file.
            Must be invoked on the UI thread.
            </summary>
            <param name="oldSharedFileFullPath">The old full path to the shared project file.</param>
            <param name="newSharedFileFullPath">The new full path to the shared project file.</param>
            <remarks>
            <para>
            It is the caller's responsibility to have actually renamed the file on disk,
            and to update all imports of this file.
            </para>
            <para>
            NOTE: In Visual Studio this will result in:
            If the shared file is enabled for SCC integration, this method will invoke:
             * IVsSolution.OnAfterRenameProject
               * IVsTrackProjectDocuments2.OnAfterRenameFile
               * IVsSolutionEvents.OnAfterRenameProject
               * RunningDocumentTable.RenameDocument
               * etc.
            Otherwise for non SCC-enabled shared files this will simply call:
             * IVsTrackProjectDocuments2.OnAfterRenameFile
             </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVetoProjectPreLoad">
            <summary>
            An interface that allows an extension to prevent a specific project
            from loading.
            </summary>
            <remarks>This component exists on the UnconfiguredProject level.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVetoProjectPreLoad.AllowProjectLoadAsync(System.Boolean,Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration,System.Threading.CancellationToken)">
            <summary>
            Checks whether the project should be allowed to load.
            </summary>
            <param name="isNewProject">A value indicating whether the project is being newly created; <c>false</c> indicates we are loading an existing project.</param>
            <param name="activeConfiguration">The anticipated active configuration for this project.</param>
            <param name="cancellationToken">A token whose cancellation token that signals lost interest in the result of this call.</param>
            <returns>A task whose result is true if the project is allowed to load; false otherwise.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">May also be thrown to reject a project load with a specific error.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ICommandGroupHandler">
            <summary>
            An interface that extensions can export to indicate that they support
            handling a specific group of commands. CPS extensions can export as
            many command group handlers as needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ICommandGroupHandler.GetCommandStatus(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},System.Int64,System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus)">
            <summary>
            Check if a specific command is supported and enabled.
            </summary>
            <param name="nodes">The project nodes being queried.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandText">The default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.</param>
            <param name="progressiveStatus">The query result thus far (as default, or as handed off from previous handler).</param>
            <returns>A value that describes how this command may be handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ICommandGroupHandler.TryHandleCommand(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},System.Int64,System.Boolean,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Indicates that the user wants to execute a specific command.
            </summary>
            <param name="nodes">The project nodes to execute on.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandExecuteOptions">Values describe how the object should execute the command.</param>
            <param name="variantArgIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="variantArgOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>true if the extension has handled execution for this command and should prevent other handlers from processing the command. false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException">
            <summary>
            Thrown when an active project configuration switch makes continuation some operation impossible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveProjectTreeProvider">
            <summary>
            A service that provides a stream of project tree snapshot updates from the currently active project tree provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveProjectTreeProvider.Tree">
            <summary>
            Gets the source block for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveProjectTreeProvider.SetActiveTreeProviderAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider)">
            <summary>
            Changes the active project tree provider.
            </summary>
            <param name="treeProvider">The new tree provider to use.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot">
            <summary>
            Describes a project snapshot and the property pages catalog that describes how to interpret it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot.Project">
            <summary>
            Gets the project snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot.NamedCatalogs">
            <summary>
            Gets a map of named catalogs that provide rules for reading the project data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectCatalogSnapshot.ItemSchema">
            <summary>
            Gets the project item schema
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions">
            <summary>
            Exposes the data sources and versions of each that went into computing the value this interface is implemented on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueVersions.DataSourceVersions">
            <summary>
            Gets a map documenting each source for the makeup of this value
            and the version backing that source's current input.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectSnapshotService">
            <summary>
            Defines a service which tracks the active configured project and provides a stream of its snapshots through a dataflow block.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectSubscriptionService">
            <summary>
            Provides cross-sectional views of the project's evaluation and post design-time build states.
            </summary>
            <remarks>
            This service is available at the UnconfiguredProject level, and watches the ConfiguredProject
            associated with the active solution configuration.
            When the active solution configuration changes, this service reports that as a project change
            complete with a snapshot from the activated ConfiguredProject, and a diff between the last
            snapshot from the previously active ConfiguredProject and the newly activated one.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IHandsOffService">
            <summary>
            Defines a service which allows clients to notify interested parties when they can and cannot have access to specified files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IHandsOffService.HandsOnFilesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify VS that the specified files are available for others to access.
            </summary>
            <param name="files">The files to hands-on.</param>
            <returns>A task representing the work involved in ensuring everyone else can now use the specified files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IHandsOffService.HandsOffFilesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify VS that these files are needed for an exclusive operation.
            </summary>
            <param name="files">The files to hands-off.</param>
            <returns>A task representing the work involved in ensuring no one else is using the specified files.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectDirectoryBasedTreeProvider">
            <summary>
            An interface describing a tree provider that has a backing directory tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectDirectoryBasedTreeProvider.CurrentDirectoryTree">
            <summary>
            Gets the current file system directory tree backing this tree provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHostHandler">
            <summary>
            A contract exported by CPS hosts that wish to take actions when CPS suffers internal errors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHostHandler.HandleFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invoked when interesting CPS failures occur that the user should be notified about.
            </summary>
            <param name="failure">The exception describing the failure.</param>
            <param name="severity">The severity of the failure.</param>
            <param name="project">The project related to the failure, if applicable.</param>
            <returns>A task that is completed when the fault has been fully reported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultProvider">
            <summary>
            Defines an object which can detect and resolve project faults
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultProvider.FaultChanged">
            <summary>
            Event raised when the faulted condition changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultProvider.FaultMessage">
            <summary>
            A message explaining the current fault.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultProvider.IsFaulted">
            <summary>
            Flag indicating if the current state is faulted or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultProvider.ResolveFault(System.Boolean@)">
            <summary>
            Method to be invoked to resolve the fault.
            </summary>
            <param name="reload">Set to true when the resolution requires the project to reload.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.FaultChangedEventArgs">
            <summary>
            The event args for IProjectFaultProvider.FaultChanged.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.FaultChangedEventArgs.IsFaulted">
            <summary>
            Flag indicating if the faulted state is active.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.BuildDataflowLinkOptions">
            <summary>
            Additional options that may be specified when linking to the results of a design-time build block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.BuildDataflowLinkOptions.Targets">
            <summary>
            Gets or sets the set of targets that should be included in the design-time build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.BuildDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshot">
            <summary>
            Describes a snapshot of some state of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshot.ProjectInstance">
            <summary>
            Gets an immutable ProjectInstance that captures some state of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshot.ProjectFileEncoding">
            <summary>
            Gets the encoding for the project file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshot.FullPath">
            <summary>
            Gets the full path of the project file
            </summary>
            <remarks>
            ProjectInstance's FullPath won't reflect the case-only change, so we need this
            property to keep and pass the true full path to all the clients.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshot.DependentFileTimes">
            <summary>
            Gets a dictionary to all dependent files and its last modified time,
             only if the project snapshot bases on files on the disk, it will contain .
            If the snapshot uses any change done in the memory, the collection will be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate">
            <summary>
            Describes a set of changes made to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate.ProjectChanges">
            <summary>
            Gets the map of rule names to change descriptions for those rules.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate.CurrentState">
            <summary>
            Gets the map of rule names to the current state of the project for that data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionUpdate.ProjectConfiguration">
            <summary>
            Gets the project configuration for this update.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService">
            <summary>
            Describes an UnconfiguredProject level service that manages the tree to be displayed in the Solution Explorer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService.CurrentTree">
            <summary>
            Gets the most recently published tree, or <c>null</c> if none has been published yet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService.PublishLatestTreeAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Waits for the latest tree to be published as the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService.CurrentTree"/>,
            promoting any and all tasks that require UI thread execution to reentrant-priority
            to ensure their completion.
            </summary>
            <param name="blockDuringLoadingTree"><c>true</c> if the caller wants to block until the initial (real) project tree (not the loading tree) is published.</param>
            <param name="waitForFileSystemUpdates">A flag indicating whether to also block for pending file system change hints to be reflected in the tree.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>The tree that was published by this call.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException">Thrown when the data source requirements include a project configuration and the active configuration is switched before other data source requirements are satisfied.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService.PublishTreeAsync(System.Collections.Immutable.IImmutableDictionary{System.Guid,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionRequirement},System.Threading.CancellationToken)">
            <summary>
            Returns a task that will complete when a tree that includes data that meets the specified requirements
            is published, and whose result will be the data about that tree.
            </summary>
            <param name="minimumRequiredDataSourceVersions">The minimum required versions of various data sources that may be included in the tree.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveProjectConfigurationChangedException">Thrown when the data source requirements include a project configuration and the active configuration is switched before other data source requirements are satisfied.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService.PublishAnyNonLoadingTreeAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a task that will complete when a tree that includes any project data (not just the "loading tree" placeholder)
            has been published.
            </summary>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeService.PublishAnyNonNullTreeAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a task that will complete when any tree is published.
            </summary>
            <param name="cancellationToken">A token that indicates the caller no longer wants the result.</param>
            <returns>A task whose result is the published tree.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState">
            <summary>
            Gets an immutable description of a project tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState.Tree">
            <summary>
            Gets the project tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState.TreeSnapshot">
            <summary>
            Gets the project tree and supporting data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState.ProjectSnapshot">
            <summary>
            Gets the project snapshot from which the tree was produced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState.SourceItems">
            <summary>
            The source items from the project version from which the tree was produced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState.TreeProvider">
            <summary>
            Gets the provider of the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeServiceState.Tree"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot">
            <summary>
            Describes the progressive state of a project tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot.Tree">
            <summary>
            Gets the newly published tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot.TreeProvider">
            <summary>
            Gets the tree provider that produced this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot.PopulatingConfiguredProject">
            <summary>
            Gets the configured project whose data went into populating this tree.
            </summary>
            <value>May be null if the tree does not include any data from a configured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot.LazyFill">
            <summary>
            Gets a value indicating whether the updates made in the new tree represent
            either lazy-filled items or item changes that are benign to the user.
            </summary>
            <remarks>
            A value of <c>true</c> is a hint that new items should not be selected, or their parents expanded.
            TODO Dev14: remove this property, which TreeServce no longer uses.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1">
            <summary>
            Describes the versions of various data sources that went into the production of some value.
            </summary>
            <typeparam name="T">The type of the versioned value.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionedValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionRequirement">
            <summary>
            Describes a version requirement for a particular data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionRequirement.Version">
            <summary>
            Gets the version required of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectVersionRequirement.AllowMissingData">
            <summary>
            Gets a value indicating whether no data at all from a data source is considered out of date data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.RuleDataflowLinkOptions">
            <summary>
            Additional options that may be specified when linking to the results of a design-time build block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.RuleDataflowLinkOptions.RuleNames">
            <summary>
            Gets or sets the set of rules that should be included in the prepared project state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.RuleDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot">
            <summary>
            Describes immutable project state after a design-time build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot.TargetOutputs">
            <summary>
            Gets a map of targets to their target outputs seen as items with metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot.TargetSuccess">
            <summary>
            Gets a map of targets and whether they built successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot.Targets">
            <summary>
            Gets the targets that were explicitly executed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot.BaseSnapshot">
            <summary>
            Gets the pre-Build ProjectInstance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshot.BuiltProjectInstance">
            <summary>
            Gets the post-Build ProjectInstance, if available
            </summary>
            <remarks>
            This value will be null unless some linked receiver specifically requested the
            post-build ProjectInstance to be included, to avoid the unnecessary cost of serialization.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectBuildSnapshotService">
            <summary>
            Provides access to an immutable snapshot of post-design-time build results
            without requiring a project lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService">
            <summary>
            Provides cross-sectional views of the project's evaluation and post design-time build states.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current MSBuild ProjectInstance snapshots, with a few other trivial MSBuild data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current MSBuild ProjectInstance snapshots, with a few other trivial MSBuild data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ImportTreeSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts the current project import tree state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.SharedFoldersSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts the current project shared folders.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.OutputGroupsSource">
            <summary>
            Gets the source of a TPL Dataflow block that broadcasts output groups.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectCatalogBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project snapshots bundled with rules for how to interpret the data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectCatalogSource">
            <summary>
            Gets the source of the TPL Dataflow that broadcasts current project snapshots bundled with rules for how to interpret the data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project evaluation state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectRuleSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current project evaluation state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectBuildRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project build state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.ProjectBuildRuleSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current project build state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.JointRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project evaluation and build state jointly, along with the previous state and a diff describing what changed.
            </summary>
            <remarks>
            Currently, this block's messages may differ from the one-type data of the other blocks.
            Specifically this block only publishes data when the evaluation and build rule blocks publish
            data based on the same version of the project snapshot, which during multiple project changes
            made in fast succession can result in less frequent updates than either of the other two blocks.
            When updates are "skipped" by this block, file renames are not guaranteed to be preserved.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.JointRuleSource">
            <summary>
            Gets the TPL Dataflow source that broadcasts current project evaluation and build state jointly, along with the previous state and a diff describing what changed.
            </summary>
            <remarks>
            Currently, this block's messages may differ from the one-type data of the other blocks.
            Specifically this block only publishes data when the evaluation and build rule blocks publish
            data based on the same version of the project snapshot, which during multiple project changes
            made in fast succession can result in less frequent updates than either of the other two blocks.
            When updates are "skipped" by this block, file renames are not guaranteed to be preserved.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.SourceItemsRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.SourceItemsRuleSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current project source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.SourceItemRuleNamesBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts the set of names of rules that describe source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSubscriptionService.SourceItemRuleNamesSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts the set of names of rules that describe source items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IRuleFactory">
            <summary>
            Factory for IRule instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRuleFactory.CreateResolvedReferencePageRule(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Creates an IRule instance suitable for displaying the browse object properties on a resolved reference.
            Used by external callers who don't have access to the internal type ResolvedReferencePageRule
            </summary>
            <param name="schema">The underlying rule providing the properties</param>
            <param name="unresolvedContext">The IProjectPropertiesContext representing the file</param>
            <param name="resolvedItemName">The ItemName of the resolved reference</param>
            <param name="resolvedItemMetadata">The metadata name-value pairs associated with the resolved reference</param>
            <returns>new ResolvedReferencePageRule as an IRule instance suitable for displaying the browse object properties on a resolved reference</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRuleFactory.ReplicateRule(Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog)">
            <summary>
            Relicates a rule in the current project's context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeFileRenameHint">
            <summary>
            Describes a project change having to do with a file rename operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeFileRenameHint.RenamedFiles">
            <summary>
            Gets the full paths of the affected files, where the key is the old path and the value is the new path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.CopyPasteOperations">
            <summary>
            Defines the types of copy/paste operations. This is used to declare/determine what operations are supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CopyPasteOperations.None">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CopyPasteOperations.Copy">
            <summary>
            Copy the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CopyPasteOperations.Cut">
            <summary>
            Cut/move the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CopyPasteOperations.Drag">
            <summary>
            Drag the source items. Cut, copy, or both should also be specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CopyPasteOperations.All">
            <summary>
            All operations.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects">
            <summary>
            Defines the type of operation to perform on drop/paste.
            </summary>
            <remarks>Matches type defined in oleidl.h</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects.None">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects.Copy">
            <summary>
            Copy the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects.Move">
            <summary>
            Move the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects.Link">
            <summary>
            Link to the source items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IConfiguredProjectActivationTracking">
            <summary>
            A ConfiguredProject-scope service that exposes events regarding activation.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Designers.IConfiguredProjectActivationTracking.Activated">
            <summary>
            Occurs when the active solution configuration is changed
            from not including this configured project to including this configured project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Designers.IConfiguredProjectActivationTracking.Deactivated">
            <summary>
            Occurs when the active solution configuration is changed
            from including this configured project to not including this configured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IConfiguredProjectActivationTracking.IsActive">
            <summary>
            Gets a value indicating whether this configured project is a member
            of the active solution configuration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IConfiguredProjectActivationTracking.ActivationTask">
            <summary>
            Gets a task that is completed when this configuration is activated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPackager">
            <summary>
            An interface that may be MEF exported by components that want to set
            clipboard data for a set of selected nodes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPackager.ClipboardDataFormats">
            <summary>
            Gets the data formats this packager supports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPackager.GetAllowedOperations(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider)">
            <summary>
            Determines whether or not this copy packager can provide data for the given set of nodes and what type
            of operations can be performed on the nodes.
            </summary>
            <param name="selectedNodes">The currently selected nodes.</param>
            <param name="currentProvider">The current tree provider.</param>
            <returns>The operations allowed on the specified set of nodes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPackager.GetPointerToDataAsync(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider)">
            <summary>
            Gets a pointer to data to set on the clipboard object that represents the selected nodes for each data format supported.
            </summary>
            <param name="types">The types of data to package. This will be a subset of the types returned by ClipboardDataFormats.</param>
            <param name="selectedNodes">The currently selected nodes.</param>
            <param name="currentProvider">The current tree provider.</param>
            <returns>
            An IntPtr pointing to AllocHGlobal'd memory representing the selected nodes for each supported data format. Implementations
            may leave out a supported format or specify zero for the IntPtr if no data should be set.
            </returns>
            <remarks>
            GetAllowedOperations will have been called prior to any copy or drag operation. Therefore, the implementation of
            this method can assume that <paramref name="selectedNodes"/> is valid for this packager assuming that
            the implementation of GetAllowedOperations always returns the same result for any set of selected nodes.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem">
            <summary>
            Describes an item participating in a copy/paste operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem.Cancelled">
            <summary>
            Gets or sets whether or not the user has cancelled this item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem.Exception">
            <summary>
            Gets or sets the exception that occured during handling of the item, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem.Children">
            <summary>
            Gets a list of children that should also be added to the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteDataObjectProcessor">
            <summary>
            An interface that may be MEF exported by components that want to process an OLE data object.
            Implementations are responsible for converting the data object into ICopyPasteItem instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteDataObjectProcessor.CanHandleDataObject(System.Object,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider)">
            <summary>
            Checks whether or not the processor can handle this data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="dropTarget">The tree item that will accept new project items.</param>
            <param name="currentProvider">The current tree provider of the drop target.</param>
            <returns>True if the processor can process the data object for pasting to the specified node, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteDataObjectProcessor.QueryDropEffect(System.Object,System.Int32,System.Boolean)">
            <summary>
            Returns the type of drop effect needed for this data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="grfKeyState">Key state.</param>
            <param name="draggedFromThisProject"><c>true</c> if the drag originated from this project; <c>false</c> otherwise.</param>
            <returns>The drop effect desired by the caller. Null indicates that the default behavior is desired by the caller.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteDataObjectProcessor.ProcessDataObjectAsync(System.Object,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects)">
            <summary>
            Processes the data object with the given effect (e.g. copy, move, link).
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="dropTarget">The tree item that will accept new project items.</param>
            <param name="currentProvider">The current tree provider of the drop target.</param>
            <param name="effect">The type of operation to perform.</param>
            <returns>A list of copy paste items if successful (and the source project should clean up), null otherwise.</returns>
            <remarks>All items returned should be of the same type. Redundant items will be filtered out by the paste handler afterwards.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteDataObjectProcessor.ProcessPostFilterAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem})">
            <summary>
            Does any necessary reprocessing of items after any redundant items have been filtered out by the paste handler.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler">
            <summary>
            An interface that may be MEF exported by components that want to handle
            ICopyPasteItem instances. Implementations are responsible for handling
            the items by, for example, copying the files and adding them to the
            project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler.CanHandleItem(System.Type)">
            <summary>
            Checks whether or not the handler can handle this type of copy/paste item.
            </summary>
            <param name="itemType">The type of ICopyPasteItem that needs to be handled.</param>
            <returns>True if the handler can handle items of the specified type, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler.FilterItemList(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects)">
            <summary>
            Filters an item list by marking any redundant ones as cancelled.
            </summary>
            <param name="items">The full list of items being pasted.</param>
            <param name="effect">The type of operation to perform.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler.ValidateItemListAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects)">
            <summary>
            Checks an item list for any errors.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
            <param name="effect">The type of operation to perform.</param>
            <returns>A list of localized errors, if any.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler.PromptForAnyOverwrites(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects@)">
            <summary>
            Prompts the user to accept or cancel any items that will cause overwrites.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
            <param name="effect">The type of operation to perform.</param>
            <returns>True to continue the paste operation, false to abort.</returns>
            <remarks>
            Must be called on the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler.PasteItemsAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects)">
            <summary>
            Performs the actual pasting of the items. Run after all filtering and validation.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
            <param name="effect">The intended paste/drop effect.</param>
            <returns>The result of the paste operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult">
            <summary>
            Describes the result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IPasteHandler.PasteItemsAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Designers.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult.#ctor(System.Boolean,Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult.#ctor(System.Boolean,Microsoft.VisualStudio.ProjectSystem.Designers.DropEffects,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult.Success">
            <summary>
            Gets a value indicating whether the paste was completed successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult.ActualEffect">
            <summary>
            The actual effect that was applied by the paste operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.PasteItemsResult.TotalDropItems">
            <summary>
            Total number of items dropped.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription">
            <summary>
            A description of a set of changes made to the project within the project subset described by a Rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription.Before">
            <summary>
            A snapshot of the project subset described by a Rule from before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription.Difference">
            <summary>
            A description of the differences betwen <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription.Before"/> and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription.After"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDescription.After">
            <summary>
            A snapshot of the project subset described by a Rule from after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff">
            <summary>
            An immutable description of the difference between two <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff.AddedItems">
            <summary>
            Gets the collection of the names of items that were introduced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff.RemovedItems">
            <summary>
            Gets the collection of the names of items that were removed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff.ChangedItems">
            <summary>
            Gets the collection of the names of items whose metadata were changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff.RenamedItems">
            <summary>
            Gets the collection of the before and after names of renamed items.
            </summary>
            <value>A dictionary where the keys are the old item names and the values are the new item names.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff.ChangedProperties">
            <summary>
            Gets the collection of names of properties whose values were changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeDiff.AnyChanges">
            <summary>
            Gets a value indicating whether any differences were observed between the two <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeFileHint">
            <summary>
            Describes a project change having to do with a file operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeFileHint.Files">
            <summary>
            Gets the full paths of the affected files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint">
            <summary>
            An immutable description of a project change that provides additional semantic meaning
            that may be useful to someone trying to understand the nature of a project change.
            </summary>
            <remarks>
            Implementations of this interface must be thread-safe and should be immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint.Kind">
            <summary>
            Gets a unique identifier for the kind of hint this represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint.ChangeAlreadyOccurred">
            <summary>
            Gets a value indicating whether the change being hinted has already occurred.
            </summary>
            <remarks>
            A <c>true</c> value here suggests that the hint-author is helping to "catch up" to changes made
            by a third party. Therefore if this is <c>true</c>, IVsTrackProjectDocument events should not be raised
            when processing hints whose value for this property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint.UnconfiguredProject">
            <summary>
            Gets the project that was changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver">
            <summary>
            An interface exported by UnconfiguredProject-level parts to receive project change hint notifications.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver.HintingAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint)">
            <summary>
            Invoked under a project write lock before a change is actually applied.
            </summary>
            <param name="hint">The hint that is being submitted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintReceiver.HintedAsync(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint}})">
            <summary>
            Invoked as or after a write lock is released, describing all the hints submitted
            over the course of that write lock.
            </summary>
            <param name="hints">A map of hints, keyed by their type.</param>
            <returns>The task that respresents the asynchronous work done by this method.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintSubmissionService">
            <summary>
            A service that captures semantic descriptions of project changes.
            </summary>
            <devremarks>
            Dev15 TODO: Merge this interface into the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintService"/>.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintSubmissionService.HintAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint)">
            <summary>
            Supplies a semantic meaning behind some project change that is about to be made.
            </summary>
            <param name="changeHint">The semantic description of the project change.</param>
            <remarks>
            This method must be called while holding the project write lock responsible
            for making the change.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintSubmissionService.ProcessHintsAsync">
            <summary>
            Returns a task that completes after all pending hints have been processed,
            and allows access to the main thread as necessary if the caller has it.
            </summary>
            <returns>A task that completes when all currently pending hints have been processed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHintSubmissionService.CancelHints(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeHint})">
            <summary>
            Suppresses hints from being forwarded to hint subscribers
            after the project write lock is released.
            </summary>
            <param name="hints">The hints to cancel; or <c>null</c> to cancel them all.</param>
            <remarks>
            This method must be called while holding the project write lock responsible
            for making the change.
            This covers the scenario of changes that had been planned and thus hinted,
            that were later rolled back, thus making the original hints inappropriate.
            Note that the synchronous stage of hint forwarding has already occurred and
            thus cannot be canceled.  Thus this method only cancels the asynchronous
            after-write-lock stage of hinting.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot">
            <summary>
            An immutable snapshot of a portion of the project defined by a set of Rule objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot.RuleName">
            <summary>
            Gets the name of the rule that was used to initialize this snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot.Items">
            <summary>
            Gets a dictionary of items, where the key is the item name (evaluated include) and the value
            is a dictionary of item metadata.
            </summary>
            <value>A read only, order preserving dictionary.</value>
            <remarks>
            An enumeration of this dictionary will reliably generate the project items
            in the order in which they appear in the project file.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectRuleSnapshot.Properties">
            <summary>
            Gets the project properties from the project whose names match names of properties in the included rule.
            </summary>
            <value>A read only dictionary.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableHintableProjectTreeProvider">
            <summary>
            A project tree provider that supports user-invoked refresh and hints for
            when refresh is disabled. The hints are useful for keeping the tree
            up-to-date when auto refresh is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableHintableProjectTreeProvider.MostRecentHintVersion">
            <summary>
            Gets the data source version number that represents the work of the most recently hinted project directory change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableHintableProjectTreeProvider.HintFileChanged(System.String)">
            <summary>
            Hints to the tree provider that a file change has occured.
            </summary>
            <param name="path">The path to the changed file. This can either be a full path or a path relative to the project.</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableHintableProjectTreeProvider.HintFileCreated(System.String)">
            <summary>
            Hints to the tree provider that a file was created.
            </summary>
            <param name="path">The path to the created file. This can either be a full path or a path relative to the project.</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableHintableProjectTreeProvider.HintFileDeleted(System.String)">
            <summary>
            Hints to the tree provider that a file was deleted.
            </summary>
            <param name="path">The path to the deleted file. This can either be a full path or a path relative to the project.</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableHintableProjectTreeProvider.HintFileRenamed(System.String,System.String)">
            <summary>
            Hints to the tree provider that a file rename has occured.
            </summary>
            <param name="oldPath">The path to the renamed file before the rename. This can either be a full path or a path relative to the project.</param>
            <param name="newFileName">The file's new name (leaf only).</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult">
            <summary>
            Describes the result of hinting to a tree provider that a file system event has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult.DataSourceVersionIncludingChange">
            <summary>
            Gets the minimum version number that the tree provider will publish when this hint has been accounted for in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult.op_Equality(Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult,Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult)">
            <summary>
            Returns true if result1 == result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult.op_Inequality(Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult,Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult)">
            <summary>
            Returns true if result1 != result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult.Equals(System.Object)">
            <summary>
            Returns true if obj equals this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.HintedTreeResult.GetHashCode">
            <summary>
            Returns the hashcode for the reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IValidProjectReferenceChecker">
            <summary>
            An interface that extensions can export into the UnconfiguredProject scope to indicate whether or
            not other projects can reference them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IValidProjectReferenceChecker.CanAddProjectReferenceAsync(System.Object)">
            <summary>
            Check if this project can add a reference to a specific project.
            </summary>
            <param name="referencedProject">The IUnknown interface of the referenced project (project to be added).</param>
            <returns>A SupportedCheckResult value indicating whether or not the project reference is supported.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IValidProjectReferenceChecker.CanAddProjectReferencesAsync(System.Collections.Immutable.IImmutableSet{System.Object})">
            <summary>
            Check if this project can add the set of referenced projects.
            </summary>
            <param name="referencedProjects">An immutable set of IVsProjectReference objects.</param>
            <remarks>This is called when the user clicks Add in the reference manager.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IValidProjectReferenceChecker.CanBeReferencedAsync(System.Object)">
            <summary>
            Check if a specific project can reference this project.
            </summary>
            <param name="referencingProject">The IUnknown interface of the project wanting to reference this project.</param>
            <returns>A SupportedCheckResult value indicating whether or not the project reference is supported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.CanAddProjectReferencesResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IValidProjectReferenceChecker.CanAddProjectReferencesAsync(System.Collections.Immutable.IImmutableSet{System.Object})"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.CanAddProjectReferencesResult.#ctor(System.Collections.Immutable.IImmutableDictionary{System.Object,Microsoft.VisualStudio.ProjectSystem.Designers.SupportedCheckResult},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.CanAddProjectReferencesResult"/> struct.
            </summary>
            <param name="individualResults">A map of references to SupportedCheckResult values.</param>
            <param name="errorMessage">An error message to show to the user. Set to null or String.Empty to show no error message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.CanAddProjectReferencesResult.IndividualResults">
            <summary>
            Gets a map of references to SupportedCheckResult values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.CanAddProjectReferencesResult.ErrorMessage">
            <summary>
            Gets an error message to show to the user; null or String.Empty to show no error message.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableProjectTreeProvider">
            <summary>
            A project tree provider that supports user-invoked refresh.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableProjectTreeProvider.GetAutoRefreshAsync">
            <summary>
            Gets a value indicating whether the tree provider automatically updates itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableProjectTreeProvider.SetAutoRefreshAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether the tree provider automatically updates itself.
            </summary>
            <param name="value">
            <c>true</c> if this tree provider will automatically publish updates
            when the underlying data changes;
            <c>false</c> if it should not or cannot due to the underlying data store not supporting push notifications.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableProjectTreeProvider.CanAutoRefreshAsync">
            <summary>
            Gets a value indicating whether this project tree supports auto refresh.
            </summary>
            <remarks>
            Project tree providers that support auto refresh generally may still depend on their
            underlying data stores (i.e. file system) supporting push notification for changes.
            If a project is on a non-supporting data store, this value may be <c>false</c> to indicate
            that auto refresh cannot be set to <c>true</c>, and that <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableProjectTreeProvider.RefreshAsync(System.Threading.CancellationToken)"/> must
            be imperatively called periodically.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IRefreshableProjectTreeProvider.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Begins an asynchronous refresh of the tree.
            </summary>
            <returns>A task whose result is the new tree.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectChangeNotificationEventArgs">
            <summary>
            The event argument included when raising project change notification events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectChangeNotificationEventArgs.ProjectChanges">
            <summary>
            Gets a dictionary of rules and project change descriptions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider">
            <summary>
            An UnconfiguredProject-level service that provides access to the ConfiguredProject that the host considers to be the active one.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider.Changed">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider.ActiveConfiguredProject"/> changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider.ActiveConfiguredProject">
            <summary>
            Gets the configured project that belongs to the host's active solution configuration,
            if it has already been loaded.
            </summary>
            <value>The active configured project.  May be null if the host has not yet selected an active configuration.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider.ActiveConfiguredProjectBlock">
            <summary>
            Gets a block that broadcasts the currently active configured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider.ActiveProjectConfiguration">
            <summary>
            Gets the project configuration that is active given the active solution configuration.
            </summary>
            <returns>An existing ProjectConfiguration defined in the project, or <c>null</c> if no active project configuration is available.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IActiveConfiguredProjectProvider.ConfigurationActiveCancellationToken">
            <summary>
            Gets a token that is cancelled when the active project configuration changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveConfigurationChangedEventArgs">
            <summary>
            Event arguments sepcifying a before and after activation change for a ConfiguredProject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveConfigurationChangedEventArgs.PreviouslyActive">
            <summary>
            Gets the previously active ConfiguredProject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.ActiveConfigurationChangedEventArgs.NowActive">
            <summary>
            Gets the ConfiguredProject that is now active.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider">
            <summary>
            Services for working with the default project of a project system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider.DefaultProjectConfiguration">
            <summary>
            Gets the default project configuration to use as a default when no other ProjectConfiguration
            is defined in the project.
            </summary>
            <value>Never null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider.DefaultProjectTemplate">
            <summary>
            Project template content to use for defaults or "projectless state"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider.GetDefaultUnconfiguredProjectAsync">
            <summary>
            Gets the default unconfigured project.
            </summary>
            <value>The default unconfigured project.  Or null if it could not be created.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider.GetDefaultConfiguredProjectAsync">
            <summary>
            Gets the default configured project.
            </summary>
            <value>The default configured project.  Or null if it could not be created.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider.GetTargetsPathAsync">
            <summary>
            Gets the default targets path for the project system.
            </summary>
            <value>An absolute file system path.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IDefaultProjectProvider.GetToolsVersionAsync">
            <summary>
            Gets the tools version for this version of MSBuild tools.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IFileSaveListener">
            <summary>
            An interface that may be MEF exported by components that want to execute code whenever a project is saved.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IFileSaveListener.OnFileWriteAsync(System.String)">
            <summary>
            Invoked whenever the UnconfiguredProject is about to be saved.
            </summary>
            <param name="fullPath">The path to the project.</param>
            <returns>An object that will be disposed after saving the project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider">
            <summary>
            A project tree provider that adds Show All Files functionality.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.ShowAllFiles">
            <summary>
            Gets or sets a value indicating whether files in the project folder but not in the project are visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.CanIncludeItems(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Checks whether a given set of (excluded) nodes can be included into the project.
            </summary>
            <param name="nodes">The set of nodes that might be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.IncludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})"/></param>
            <returns><c>true</c> if these nodes can be included as project items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.IncludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Includes a given set of nodes as project items.
            </summary>
            <param name="nodes">The set of nodes to "upgrade" to project items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.CanExcludeItems(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Checks whether a given set of nodes can be excluded from the project.
            </summary>
            <param name="nodes">The set of nodes that might be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.ExcludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})"/></param>
            <returns><c>true</c> if these nodes can be removed from the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IShowAllFilesProjectTreeProvider.ExcludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree})">
            <summary>
            Removes the given set of nodes from the project.
            </summary>
            <param name="nodes">The nodes to downgrade from included to excluded items.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.INewProjectInitializationProvider">
            <summary>
            An extensibility point components may export to execute when a new project is being created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.INewProjectInitializationProvider.InitializeNewProject">
            <summary>
            Invoked when a new project is being created.
            </summary>
            <remarks>
            Dev14 TODO: make this an async method.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree">
            <summary>
            A node that represents a project item in the tree view of a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.IsLinked">
            <summary>
            Gets a value indicating whether this node is grafted into the tree from an otherwise unnatural location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.Item">
            <summary>
            Gets the description of where the item this tree node describes is.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.PropertySheet">
            <summary>
            Gets the property sheet that contains this item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetProperties(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            update properties of this item to given value.
            null means using existing value as it is
            resetXXX parameter will reset its corresponding property value to its default(T).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetCaption(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Caption"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Icon"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetExpandedIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.ExpandedIcon"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetVisible(System.Boolean)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Visible"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.BrowseObjectProperties"/> property is set to a new value.
            </summary>
            <param name="browseObjectProperties">The new value to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetCapabilities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.AddCapability(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property includes some new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.AddCapability(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property includes some new value(s).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.RemoveCapability(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property excludes some value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.RemoveCapability(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property excludes some value(s).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetIsLinked(System.Boolean)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.IsLinked"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetItem(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Returns a new tree where this node represents some project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.SetPropertySheet(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.PropertySheet"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree.ClearItem">
            <summary>
            Returns a new tree where this node no longer represents a project item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectSnapshotService">
            <summary>
            Provides access to an immutable snapshot representing the current state of the project
            without holding a project lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree">
            <summary>
            A node in the tree view of a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Parent">
            <summary>
            Gets the immediate parent of this node.
            </summary>
            <value>The parent; or <c>null</c> if this node is the root of the tree.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Root">
            <summary>
            Gets the root of the tree this node belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Children">
            <summary>
            Gets this node's children.
            </summary>
            <value>An immutable list of nodes.  Never null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Caption">
            <summary>
            Gets the display name for this node.
            </summary>
            <value>A non-empty string.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.FilePath">
            <summary>
            Gets the file path for this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Icon">
            <summary>
            Gets the icon to display when this node is not expanded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.ExpandedIcon">
            <summary>
            Gets the icon to display when this node is expanded.
            </summary>
            <value>A value of <c>null</c> is appropriate when the node can never be expanded, or the icon should be the same as <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Icon"/>.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Visible">
            <summary>
            Gets a value indicating whether this node or subtree should be visible to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.IsFolder">
            <summary>
            Gets whether this node is a folder. This is a faster way to check the Folder capability.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities">
            <summary>
            Gets the set of capabilities this node possesses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.BrowseObjectProperties">
            <summary>
            Gets the properties to display in the properties tool window when this tree is selected.
            </summary>
            <value>
            May be null if no properties are available for this object.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Identity">
            <summary>
            Gets the identity of this node.
            </summary>
            <value>A non-recycled value that persists across mutations of this node as long as its identity is intact.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Size">
            <summary>
            The total number of nodes in the whole subtree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Add(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Adds the described node that represents an MSBuild project item to a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to add under this node.</param>
            <returns>
            The added node, as a member of a new immutable tree.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Add(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree)">
            <summary>
            Adds the described node that represents an MSBuild project item to a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to add under this node.</param>
            <returns>
            The added node, as a member of a new immutable tree.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Remove(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Removes the specified node from a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to remove.</param>
            <returns>
            A new instance of this node with the modification made.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Remove">
            <summary>
            Removes this node from a new instance of its containing tree.
            </summary>
            <returns>The removed node's parent in the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Replace(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Replaces this node in a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to replace this tree with.</param>
            <returns>
            A new instance of this node with the modification made.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Replace(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree)">
            <summary>
            Replaces this node in a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to replace this tree with.</param>
            <returns>
            A new instance of this node with the modification made.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetProperties(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            update properties of this item to given value.
            null means using existing value as it is
            resetXXX parameter will reset its corresponding property value to its default(T).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetCaption(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Caption"/> property is set to a new value.
            </summary>
            <param name="caption">The new caption to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Icon"/> property is set to a new value.
            </summary>
            <param name="icon">The new icon to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetExpandedIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.ExpandedIcon"/> property is set to a new value.
            </summary>
            <param name="expandedIcon">The new icon to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetVisible(System.Boolean)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Visible"/> property is set to a new value.
            </summary>
            <param name="visible">The new value to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.BrowseObjectProperties"/> property is set to a new value.
            </summary>
            <param name="browseObjectProperties">The new value to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetCapabilities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property is set to a new value.
            </summary>
            <param name="capabilities">The capabilities to set on the new node, completely replacing the existing set of capabilities.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.AddCapability(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property includes some new value.
            </summary>
            <param name="capability">The capability to add to this node's set of capabilities.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.AddCapability(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property includes some new value(s).
            </summary>
            <param name="capabilities">The capabilities to add to this node's set of capabilities.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.RemoveCapability(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property excludes some value.
            </summary>
            <param name="capability">The capability to remove from this node's set of capabilities.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.RemoveCapability(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property excludes some value(s).
            </summary>
            <param name="capabilities">The capabilities to remove from this node's set of capabilities.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.SetItem(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Boolean)">
            <summary>
            Returns a new tree where this node represents some project item.
            </summary>
            <param name="context">The description of the project item that this node represents.</param>
            <param name="propertySheet">The property sheet from which this item was obtained.</param>
            <param name="isLinked">A value indicating whether this item represents a linked item in the project.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Contains(System.IntPtr)">
            <summary>
            Determines whether a node with a given <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Identity"/> exists among this node's descendents.
            </summary>
            <param name="nodeId">The ID of the node of interest.</param>
            <returns>
            <c>true</c> if the identified node is among this node's descendents; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Find(System.IntPtr)">
            <summary>
            Finds the node with the given value for <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Identity"/> among this node and its descendents.
            </summary>
            <param name="nodeId">The ID of the node to find.</param>
            <returns>The node with the given node ID.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no node by this ID exists in the tree.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.TryFind(System.IntPtr,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree@)">
            <summary>
            Finds the node with the given value for <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Identity"/> among this node and its descendents.
            </summary>
            <param name="nodeId">The ID of the node to find.</param>
            <param name="subtree">Receives the node with the given node ID, or <c>null</c> if no match was found.</param>
            <returns><c>true</c> if the node was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.TryFindImmediateChild(System.String,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree@)">
            <summary>
            Finds the node with the given value for <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Caption"/> among this node's immediate children.
            </summary>
            <param name="caption">The caption of the child to find.</param>
            <param name="subtree">Receives the node with the given caption, or <c>null</c> if no match was found.</param>
            <returns><c>true</c> if the node was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.ChangesSince(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets the net effectual changes that were made from a prior version of this tree to this version.
            </summary>
            <param name="priorVersion">The earlier version of this tree to consider changes since then.</param>
            <returns>
            The chronological sequence of changes made that transformed the earlier version of this tree to its present form.
            </returns>
            <remarks>
            The roots of this tree and the given <paramref name="priorVersion"/> instance are the basis of comparison rather than
            any sub-branches that the specific instances provided may refer to.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind">
            <summary>
            The kind of change that took place.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind.Added">
            <summary>
            A node was added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind.Replaced">
            <summary>
            A node's own properties were changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind.Removed">
            <summary>
            A node was removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty">
            <summary>
            The properties on a node that were changed when <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff.Change"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind.Replaced"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.None">
            <summary>
            No change was made to the node.  It was either entirely added or removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.PositionUnderParent">
            <summary>
            The node's position within its parent's list of children changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.Caption">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Caption"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.Icon">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Icon"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.ExpandedIcon">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.ExpandedIcon"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.Visible">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Visible"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.Capabilities">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree.Capabilities"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangedProperty.All">
            <summary>
            All flags in this enum.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff">
            <summary>
            A description of a change made to an instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff.Change">
            <summary>
            Gets the kind of change made to the alterered node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff.NodeIdentity">
            <summary>
            Gets the leaf node impacted by this change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff.NodeChange">
            <summary>
            Gets the kinds of changes made to node if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeDiff.Change"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectTreeChangeKind.Replaced"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory">
            <summary>
            Creates new <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory.NewTree(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="filePath">The full file path for the node.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeFactory.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="capabilities">The capabilities.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeModifier">
            <summary>
            Extensibility point that allows for arbitrary changes to a project tree after a tree provider creates it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeModifier.ApplyModifications(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider)">
            <summary>
            Transforms a tree in some way (perhaps customizing icons or menus).
            </summary>
            <param name="tree">The tree or node as it comes from a tree provider or another modifier.</param>
            <param name="projectTreeProvider">The project tree provider that created the initial tree node.</param>
            <returns>The modified tree, or the original tree if no changes were appropriate.  It node's identity must match the one passed in.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider">
            <summary>
            Transforms project data into a hierarchical tree structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.Tree">
            <summary>
            Gets the source block for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.FindByPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.String)">
            <summary>
            Efficiently finds a descendent with the given path in the given tree.
            </summary>
            <param name="root">The root of the tree.</param>
            <param name="path">The absolute or project-relative path to the item sought.</param>
            <returns>The item in the tree if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.GetPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets the path to a given node that can later be provided to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.FindByPath(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.String)"/> to locate the node again.
            </summary>
            <param name="node">The node whose path is sought.</param>
            <returns>A non-empty string, or <c>null</c> if searching is not supported.  For nodes that represent files on disk, this is the project-relative path to that file.  The root node of a project is the absolute path to the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets a value indicating whether the given node is allowed to be renamed.
            </summary>
            <param name="node">The node that might be renamed.</param>
            <returns><c>true</c> if the node can be renamed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.RenameAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.String)">
            <summary>
            Alters the project file and/or other files as necessary to effectively change a given node's caption.
            </summary>
            <param name="node">The node to rename.</param>
            <param name="value">The desired new name.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)"/> would return <c>false</c> for this operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.CanCopy(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree,System.Boolean)">
            <summary>
            Gets a value indicating whether a given set of nodes can be copied or moved underneath some given node.
            </summary>
            <param name="nodes">The set of nodes the user wants to copy or move.</param>
            <param name="receiver">
            The target node where <paramref name="nodes"/> should be copied or moved to.
            May be <c>null</c> to determine whether a given set of nodes could allowably be copied anywhere (not necessarily everywhere).
            </param>
            <param name="deleteOriginal"><c>true</c> for a move operation; <c>false</c> for a copy operation.</param>
            <returns><c>true</c> if such a move/copy operation would be allowable; <c>false</c> otherwise.</returns>
            <remarks>
            Even if CanCopy returns true, a copy packager needs to exist before the Copy will succeed in CPS-VS. If CanCopy
            returns false, then the copy packagers will not even be queried.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.CanRemove(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Gets a value indicating whether deleting a given set of items from the project, and optionally from disk, would be allowed.
            </summary>
            <param name="nodes">The nodes that should be deleted.</param>
            <param name="deleteOptions">A value indicating whether the items should be deleted from disk as well as from the project file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.RemoveAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Deletes items from the project, and optionally from disk.
            </summary>
            <param name="nodes">The nodes that should be deleted.</param>
            <param name="deleteOptions">A value indicating whether the items should be deleted from disk as well as from the project file.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.CanRemove(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)"/> would return <c>false</c> for this operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTreeProvider.GetAddNewItemDirectory(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree)">
            <summary>
            Gets the directory that new files should be saved and added to the project under
            when the user initiates an Add New Item operation on a particular node in the tree.
            </summary>
            <param name="target">The node in the tree that is the receiver of the Add New Item operation.</param>
            <returns>
            The project-relative path under which to save the new items (empty string when the project directory itself is to be used);
            or <c>null</c> if the target node is not allowed to receive new items.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ISpecialFileProvider">
            <summary>
            An interface that extensions can export to indicate they know
            how to find special files.
            </summary>
            <remarks>This component exists on the ConfiguredProject level.
            It's expected that implementations provide Minimum and Maximum
            SpecialFiles metadata. Use the ExportSpecialFileProviderAttribute
            attribute to do this.</remarks>
            <example>See CustomProjectSpecialFiles.cs within CustomProject for an example implementation.</example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.ISpecialFileProvider.GetFileAsync(Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles,Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFileFlags,System.Threading.CancellationToken)">
            <summary>
            Allows for querying the project for special files and optionally create them or check the out from source control.
            </summary>
            <param name="fileId">The special file type.</param>
            <param name="flags">Flags for the file.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>The file name of the special file. Providers should always return the full path to the file; or <c>null</c> if no qualified file exists.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity">
            <summary>
            An indication of the expected severity of a fault.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity.Recoverable">
            <summary>
            The fault is expected to be one after which the user may resume work.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity.Crippling">
            <summary>
            The fault is expected to cause certain features to deactivate until the process is restarted or the project reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity.NotRecoverable">
            <summary>
            The fault is expected to reflect internal state has been corrupted, and that the user should save whatever possible and restart.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService">
            <summary>
            A service that can provide host-specific error handling for faulted tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService.RegisterFaultHandler(System.Threading.Tasks.Task,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Attaches error handling to a task so that if it throws an unhandled exception, the error will be reported to the user.
            </summary>
            <param name="task">The task to attach error handling to.</param>
            <param name="watsonReportSettings">If not <c>null</c>, a Watson report will be filed if this task faults.</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService.RegisterFaultHandler``1(System.Threading.Tasks.Task{``0},Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Attaches error handling to a task so that if it throws an unhandled exception, the error will be reported to the user.
            </summary>
            <typeparam name="TResult">The type of value returned by the task.</typeparam>
            <param name="task">The task to attach error handling to.</param>
            <param name="watsonReportSettings">If not <c>null</c>, a Watson report will be filed if this task faults.</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerService.HandleFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Immediately handles the specified fault.
            </summary>
            <param name="ex">Exception containing the fault information.</param>
            <param name="watsonReportSettings">If not <c>null</c>, a Watson report will be filed.</param>
            <param name="severity">The severity of the failure.</param>
            <param name="project">The project related to the failure, if applicable.</param>
            <returns>A task that is complete when all fault handlers have responded.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerServiceInternal">
            <summary>
            Expose more properties for internal tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerServiceInternal.IsWatsonReportEnabled">
            <summary>
            Enable/disable the watson report.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectFaultHandlerServiceInternal.MinimumWatsonReportSubmissionInterval">
            <summary>
            The minimum interval that must pass between individual error submissions for the same failed component.
            The default value is 1 hour.
            </summary>
            <remarks>
            Please ensure the WER server is redirected to the private server before changing this value.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVetoProjectLoad">
            <summary>
            An interface that allows an extension to prevent a specific project
            from loading.
            </summary>
            <remarks>This component exists on the UnconfiguredProject level.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVetoProjectLoad.AllowProjectLoadAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks whether the project should be allowed to load.
            </summary>
            <param name="isNewProject">A value indicating whether the project is being newly created; <c>false</c> indicates we are loading an existing project.</param>
            <param name="cancellationToken">A token whose cancellation token that signals lost interest in the result of this call.</param>
            <returns>A task whose result is true if the project is allowed to load; false otherwise.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">May also be thrown to reject a project load with a specific error.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFileFlags">
            <summary>
            Defines all flags for getting special files.
            </summary>
            <remarks>Matches the __PSFFLAGS and __PSFFLAGS2 enums.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFileFlags.CreateIfNotExist">
            <summary>
            Create the file if it doesn't exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFileFlags.FullPath">
            <summary>
            Filename includes the full path. This flag is handled by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFileFlags.CheckoutIfExists">
            <summary>
            If the file exists, check it out of SCC. This flag is handled by CPS.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles">
             <summary>
             Defines all the types of special files.
             </summary>
             <remarks>We'll eventually want to remove this enum and use the VS one.
             We can't right now because our single "contracts" assembly isn't allowed
             to reference VS assemblies.  But when we split it up into two, we'll be
             allowed to make ISpecialFileProvider a VS-specific interface.
            
             This enum matches the __PSFFILEID enums in Visual Studio.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AppConfig">
            <summary>
            AppConfig files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.Licenses">
            <summary>
            Licenses.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.WebSettings">
            <summary>
            WebSettings file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AppManifest">
            <summary>
            AppManifest file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AppDesigner">
            <summary>
            AppDesigner file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AppSettings">
            <summary>
            App Settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AssemblyResource">
            <summary>
            Assembly Resource file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AssemblyInfo">
            <summary>
            Assembly info.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AppXaml">
            <summary>
            AppXaml files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.WcfServiceReferencesConfig">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SpecialFiles.AppxManifest">
            <summary>
            Appx manifest file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.SupportedCheckResult">
            <summary>
            Enum for results about whether or not something is supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SupportedCheckResult.Unknown">
            <summary>
            We don't care about the action or cannot make a decision.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SupportedCheckResult.NotSupported">
            <summary>
            The action is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.SupportedCheckResult.Supported">
            <summary>
            The action is supported
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IAsyncCommandGroupHandler">
            <summary>
            An interface that extensions can export to indicate that they support
            handling a specific group of commands. CPS extensions can export as
            many command group handlers as needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IAsyncCommandGroupHandler.GetCommandStatusAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},System.Int64,System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus)">
            <summary>
            Check if a specific command is supported and enabled.
            </summary>
            <param name="nodes">The project nodes being queried.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandText">The default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.</param>
            <param name="progressiveStatus">The query result thus far (as default, or as handed off from previous handler).</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IAsyncCommandGroupHandler.TryHandleCommandAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Designers.IProjectTree},System.Int64,System.Boolean,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Indicates that the user wants to execute a specific command.
            </summary>
            <param name="nodes">The project nodes to execute on.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandExecuteOptions">Values describe how the object should execute the command.</param>
            <param name="variantArgIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="variantArgOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>true if the extension has handled execution for this command and should prevent other handlers from processing the command. false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource`1">
            <summary>
            A source of versioned data.
            </summary>
            <typeparam name="T">The type of data being published.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource`1.DataSourceKey">
            <summary>
            Gets the data source key that is unique to this data source, if applicable; otherwise <see cref="F:System.Guid.Empty"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource`1.DataSourceVersion">
            <summary>
            Gets the current version of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IProjectValueDataSource`1.SourceBlock">
            <summary>
            Gets a block that broadcasts the project-versioned values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus">
            <summary>
            Defines the status of the command being queried
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus.NotSupported">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus.Supported">
            <summary>
            The command is supported
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus.Enabled">
            <summary>
            The command is enabled
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus.Latched">
            <summary>
            The command is toggled on
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus.Ninched">
            <summary>
            The command is toggled off (the opposite of LATCHED).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Designers.CommandStatus.Invisible">
            <summary>
            The command is invisible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext">
            <summary>
            Provides information regarding what project properties are to be displayed for a context object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext.UnconfiguredProject">
            <summary>
            Gets the unconfigured project that owns the object whose properties are to be displayed.
            </summary>
            <value>The unconfigured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext.ConfiguredProject">
            <summary>
            Gets the configured project that owns the object whose properties or items are to be displayed.
            </summary>
            <value>The configured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext.PropertySheet">
            <summary>
            Gets the property sheet whose properties or items are to be displayed.
            </summary>
            <remarks>
            Although the path to the property sheet is also available in <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext.ProjectPropertiesContext"/>,
            the property sheet object itself is interesting because it includes properties that are determined
            through the route by which the object is obtained.  For example, whether a given property sheet
            is a read only "system" property sheet depends on where its import was found in the project,
            rather than simply by its filename.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext.ProjectPropertiesContext">
            <summary>
            Gets the context of the item within the project being explored.
            </summary>
            <value>The project properties context.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContextProvider">
            <summary>
            A service that can transform a VS-given context object into one that is useful to CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContextProvider.GetContextObject(System.Object)">
            <summary>
            Gets the object that implements <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext"/> for a given object
            passed to IPropertyPage.SetObjects.
            </summary>
            <param name="value">The value whose property pages are being pulled up for.</param>
            <returns>An object that implements the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsBrowseObjectContext"/>, or <c>null</c> if unable to produce one.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService">
            <summary>
            Visual Studio specific semantics for unconfigured projects.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService.ActiveProjectConfigurationChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService.ActiveProjectConfiguration"/> property value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService.ProjectTypeGuid">
            <summary>
            Gets the project type GUID that was used in the creation of this project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService.SuggestedInitialActiveConfiguration">
            <summary>
            Gets or sets the project configuration in use at the end of the last session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService.ActiveProjectConfiguration">
            <summary>
            Gets the project configuration that is active given the active solution configuration.
            </summary>
            <returns>An existing ProjectConfiguration defined in the project, or <c>null</c> if no active project configuration is available.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.UnconfiguredProjectActiveConfigurationChangedEventArgs">
            <summary>
            Event arguments specifying that the active configuration has changed and whether or not it has changed to
            an invalid value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.UnconfiguredProjectActiveConfigurationChangedEventArgs.InvalidConfiguration">
            <summary>
            If true, the active configuration is now invalid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices">
            <summary>
            Provides common shell services in an agnostic manner
            </summary>
            <remarks>
            This contract defines the boundary between the VS shell system
            and the consumer to help avoid taking unnecessary assembly dependencies
            in the client.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.OnUIThread">
            <summary>
            Gets a value indicating whether the caller is executing on the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.InstallDirectory">
            <summary>
            Returns the installation directory for Visual Studio
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.SolutionFilePath">
            <summary>
            Full path to solution file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.RegistryRoot">
            <summary>
            Return the root registy location for the current VS process
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.VSHelpService">
            <summary>
            Returns the SVsHelp interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.BuildOutputWindowPane">
            <summary>
            Gets the build output window pane in Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.ProductSku">
            <summary>
            Returns the Product SKU (AppId) for this running version of VS.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildManagerPresent">
            <summary>
            Gets whether the Solution Build Manager is present and would therefore need to be coordinated with for builds.
            </summary>
            <remarks>
            Although we may be in VS, in the devenv.exe /upgrade scenario, now SBM is present,
            which is useful to know because we need to run design-time builds during upgrade.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSynchronousSolutionOperationInProgress">
            <summary>
            Gets a value indicating whether a synchronous solution operation (i.e. a build) is in progress.
            </summary>
            <remarks>
            The implementation is free threaded, as necessary due to callers needing to use this while on background threads.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsBuildInProgress">
            <summary>
            Determines if an MSBuild-based build is in progress in the shell (design-time or solution build).
            </summary>
            <value><c>true</c> if MSBuild-based projects are building either in-proc or out of proc.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildInProgress">
            <summary>
            Gets a value indicating whether the Solution Build Manager is currently executing a solution build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.BuildMaxNodeCount">
            <summary>
            Gets the number of nodes to use when building.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsLaunchInProgress">
            <summary>
            Gets a value indicating whether a launch (debug or no-debug) is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildManagerBusy">
            <summary>
            Gets a value indicating whether the Solution Build Manager is building or preparing to build.
            </summary>
            <value><c>true</c> if any projects are building and involving the solution build manager (full builds, out of proc).</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsInCommandLineMode">
            <summary>
            Gets a value indicating whether VS is running in command-line mode.
            </summary>
            <remarks>
            This has a free-threaded implementation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsInExperimentalMode">
            <summary>
            Gets a value indicating whether VS was launched with the "/rootsuffix" command line switch.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.UseEnvironment">
            <summary>
            Indicates whether the /useenv argument was passed to the VS startup
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.LogProjectLoadMessage(System.String)">
            <summary>
             Logs a message using IVsSolutionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.LogProjectLoadWarning(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Logs a warning using IVsSolutionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.LogProjectLoadError(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Logs an error using IVsSolutionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.EnsureBuildManagerAccessorIsLoaded">
            <summary>
            Forces the MSBuild build manager accessor package to load if it has not been loaded already.
            </summary>
            <remarks>
            Every MSBuild-based project system must call this method at load time, prior to any
            design-time or full builds running because if the SBM fires a build event before the build manager
            accessor loads (and registers listeners for build events), it will be out of sync and cause failed builds.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.GetDialogFont(System.Boolean)">
            <summary>
            Return the font used by the shell dialogs.
            </summary>
            <param name="bold">True if the font should be forced to be bold, false is to take it as it is.</param>
            <returns>The dialog font, or null if not found.  The caller must dispose of this object when done using it.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.ShowHelpFromF1Keyword(System.String)">
            <summary>
            Shows a help page from an F1 keyword.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.ShowHelpFromUrl(System.String)">
            <summary>
            Shows a help page from a URL.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.ShowHelpFromId(System.String,System.Int32)">
            <summary>
            Shows a help page from a help file and context id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.GetDialogParentHandle">
            <summary>
            See IVsUIShell
            </summary>
            <returns>Returns the HWND that can be used to parent modal dialogs.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.EnableModeless(System.Boolean)">
            <summary>
            Enables or disables a frame's modeless dialog box.
            </summary>
            <param name="enable">True to enable modeless mode, false to disable.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.CreatePropertyGrid">
            <summary>
            Creates a property grid control for the property browser.
            </summary>
            <returns>An instance of the property grid control, or null if unable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.UpdatePropertyGrid">
            <summary>
            Forces a refresh of the property grid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.RegisterLogger(System.Int32,Microsoft.Build.Framework.ILogger)">
            <summary>
            Registers loggers for a particular build submission.
            </summary>
            <param name="submissionId">The submission for which the loggers should be registered.</param>
            <param name="logger">The logger to register.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.UnregisterLoggers(System.Int32)">
            <summary>
            Unregisters all loggers for the specified submission.
            </summary>
            <param name="submissionId">The submission id.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.UpdateCommandUI(System.Boolean)">
            <summary>
            Forces Visual Studio to flush any caches regarding which commands are available.
            </summary>
            <param name="immediate">A value indicating whether the refresh must occur immediately.  Use <c>false</c> to allow the command recalculation to be done on the next idle event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.UpdateDebugTargets">
            <summary>
            Hints to the debug target toolbar control that a change has been made.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.StartIgnoringFiles(System.String)">
            <summary>
            Ignores the specified file until the returned value is disposed.
            </summary>
            <param name="file">The file to ignore change notifications on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.StartIgnoringFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ignores the specified files until the returned value is disposed.
            </summary>
            <param name="files">The files to ignore change notifications on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildManagerPresentAsync">
            <summary>
            Async version of <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildManagerPresent"/> to get whether the Solution Build Manager is present.
            </summary>
            <returns>Task whose result is <c>true</c> if the Solution Build Manager is present; otherwise, <c>false</c>.</returns>
            <remarks>
            The difference comparing to <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildManagerPresent"/> is this async method will switch to main thread
            asynchronously if the internal cache has not been initialized, while <see cref="P:Microsoft.VisualStudio.ProjectSystem.Designers.IVsShellServices.IsSolutionBuildManagerPresent"/> must be
            called on main thread always.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFileSystemErrorMessageProvider">
            <summary>
            Exported to the UnconfiguredProject scope to provide more descriptive error messages for
            some exceptions/OS error codes instead of actual exception/error message.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFileSystemErrorMessageProvider.CanProvideCustomErrorMessage(Microsoft.VisualStudio.ProjectSystem.Designers.IProjectChangeFileHint,System.Int32,System.String@)">
            <summary>
            Provides a way to show more descriptive error messages to user when some IO related
            operations failed.
            </summary>
            <param name="hint">Hints what IO operation it was</param>
            <param name="nativeErrorCode">Win32 IO error code</param>
            <param name="formattedMessage">If handled by extension, contains a message that user should see</param>
            <returns>True if extension handled specified error, false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesKeyPropertiesProvider">
            <summary>
            Provides project capability insights from some project context for use in project composition.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesKeyPropertiesProvider.GetKeyPropertiesAsync">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <value>A task which returns a sequence that is possibly empty but never <c>null</c>.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProject`1">
            <summary>
            An export available to the UnconfiguredProject scope that provides access to a ConfiguredProject export.
            </summary>
            <typeparam name="T">The export from the active configured project scope to import into the UnconfiguredProject.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProject`1.Value">
            <summary>
            Gets the ConfiguredProject exported value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject">
            <summary>
            The ConfiguredProject represents the set of components that are available
            for a given set of project capabilities, as defined by the MSBuild project
            instance provided and the configuration under which the project is evaluated.
            </summary>
            <remarks>
            Implementing classes must be multi-threaded safe.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectUnloading">
            <summary>
            An event raised after background tasks have completed (or timed out) but before the MEF container is disposed of.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectChanged">
            <summary>
            Occurs after any write lock is released that caused a change to this project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectChangedSynchronous">
            <summary>
            Occurs as any write lock is about to be released that caused a change to this project.
            </summary>
            <remarks>
            This event is raised while the write lock is still held, but on another thread.
            Handlers of this event therefore cannot get any access to the project.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectVersion">
            <summary>
            Gets a value which may be used to identify the current version of the project
            in data sources of other values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectVersionBlock">
            <summary>
            Gets a broadcast block that publishes the project version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectConfiguration">
            <summary>
            The ProjectConfiguration used for the evaluation of this ConfiguredProject
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.Capabilities">
            <summary>
            Gets the collection of project capabilities that apply to the unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.UnconfiguredProject">
            <summary>
            The unconfigured instance of the loaded project that created this configured instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.Services">
            <summary>
            Gets an accessor to the well known services and arbitrary extensions published to this configured project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions">
            <summary>
            Options for dealing with cached values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.None">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.InvalidateOnAllGlobalPropertyChanges">
            <summary>
            Always invalidate the cache if a property in <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.GlobalProperties" />
            is changed, even if the property is specifically set in such a way to not normally
            invalidate the project evaluation state.
            </summary>
            <remarks>
            Some global properties changes specifically do NOT affect the evaluation counter
            (the solution configuration XML blob, for example).
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.ValueFactoryRequiresUpgradeableRead">
            <summary>
            Indicates the value factory performs in-context project reads, which currently requires
            write locks on occasion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.DoNotHoldLockForValueFactoryCompletion">
            <summary>
            This flag avoids holding a project read lock around the invocation
            of the value factory.
            This flag is incompatible with the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.ValueFactoryRequiresUpgradeableRead"/> flag.
            </summary>
            <devremarks>
            In Dev12+1, we should probably remove this flag and make the ConfiguredProjectCache always behave as if it were set.
            </devremarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices">
            <summary>
            An interface that provides access to common configured project scoped services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.OutputGroups">
            <summary>
            Gets the output groups service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.Build">
            <summary>
            Gets the build service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.BuildSupport">
            <summary>
            Gets the build support service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.AssemblyReferences">
            <summary>
            Gets the assembly references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ComReferences">
            <summary>
            Gets the COM references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.SdkReferences">
            <summary>
            Gets the SDK references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.WinRTReferences">
            <summary>
            Gets the WinRT references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectReferences">
            <summary>
            Gets the project references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.SourceItems">
            <summary>
            Gets the source items service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectPropertiesProvider">
            <summary>
            Gets a service that can read and write properties to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.UserPropertiesProvider">
            <summary>
            Gets a service that can read and write properties to the user file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectAsynchronousTasks">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.AdditionalRuleDefinitions">
            <summary>
            Gets the additional rule definition service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.PropertyPagesCatalog">
            <summary>
            Gets the provider of property Rule files.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectSubscription">
            <summary>
            Gets the project subscription service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectSnapshotService">
            <summary>
            Gets the project snapshot service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.HostObject">
            <summary>
            Gets a host-specific object associated with this configured project.
            </summary>
            <value>May be null if this service is not available for this project.</value>
            <remarks>
            Inside Visual Studio, this object implements IVsProjectCfg.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.ILocalDebuggerPathContributor">
            <summary>
            An interface extensions can export to add directories to the PATH environment variable in debuggee's processes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debuggers.ILocalDebuggerPathContributor.AdditionalDirectoriesForSearchPath">
            <summary>
            Gets the set of directories to add to a debuggee's process when launched.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDeployedProjectItemMappingProvider">
            <summary>
            Optionally implemented by <see cref="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider"/> implementations to provide a
            mapping from deployed files back to the local project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDeployedProjectItemMappingProvider.TryGetProjectItemPathFromDeployedPath(System.String,System.String@)">
            <summary>
            Attempts to translate a given path seen by the debugger to the local full path of the equivalent item
            in the project's source directory.
            </summary>
            <param name="deployedPath">The path (or URL) of the item as seen by the debugger.</param>
            <param name="localPath">
            Receives the absolute path to the local project item, if such a translation can be made.
            May be <c>null</c> if the Provider cannot translate the <paramref name="deployedPath"/> to a valid
            local path.
            </param>
            <returns>
            A value indicating whether this extension can speak authoritatively for the given
            <paramref name="deployedPath"/>.  A <c>false</c> result indicates that this extension
            does not recognize the format of the deployed string.
            A <c>true</c> result indicates that <paramref name="localPath"/> is correctly initialized,
            or that if <paramref name="localPath"/> is <c>null</c> that this implementation is stating
            that this deployed item is definitely <i>not</i> in this project.
            </returns>
            <remarks>
            Implementations that have no implementation should return <c>false</c> rather than throwing
            <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.ImageClrType">
            <summary>
            The various purities of native or managed code that is in a debuggee's process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.ImageClrType.Native">
            <summary>
            The debuggee is pure native code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.ImageClrType.Mixed">
            <summary>
            The debuggee contains a mix of native and managed code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.ImageClrType.Managed">
            <summary>
            The debuggee contains nothing but managed code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService">
            <summary>
            A service a project system may offer to provide insight as to whether the built
            application is managed or native.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService.TargetImageClrType">
            <summary>
            Gets the project system's best guess as to whether the built application
            is managed or native.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService.PackageMoniker">
            <summary>
            see VsAppPackageLaunchInfo
            </summary>
            <remarks>
            TODO: remove this property in Dev12+1
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService.AppUserModelID">
            <summary>
            see VsAppPackageLaunchInfo
            </summary>
            <remarks>
            TODO: remove this property in Dev12+1
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService.GetIs64BitAsync">
            <summary>
            Gets a value indicating whether the built application is 64-bit.
            </summary>
            <value><c>true</c> if the image is 64-bit; <c>false</c> if it is 32-bit.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebuggerImageTypeService.GetIsConsoleAppAsync">
            <summary>
            Gets whether the project will compile to a console app.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions">
            <summary>
            Debugging flags. The managed equivalent of VSDBGLAUNCHFLAGS.
            </summary>
            <remarks>
            The members of this enum have values that match the native VSDBGLAUNCHFLAGS structure to allow direct copying.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.Silent">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.LocalDeploy">
            <summary>
            passed to IVsDebuggableProjectCfg::Launch to allow optimizations
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.NoDebug">
            <summary>
            launch without attaching a debugger
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.DetachOnStop">
            <summary>
            Detach instead of terminate when debugging stopped.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.Selected">
            <summary>
            launch selected project instead of startup project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.StopDebuggingOnEnd">
            <summary>
            When this process ends, debugging is stopped.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.WaitForAttachComplete">
            <summary>
            When DLO_LaunchByWebServer, wait for the attach to finish before continuing to launch other targets
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.MergeEnvironment">
            <summary>
            provided environment should be merged with system environment
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.DesignTimeExpressionEvaluation">
            <summary>
            launched for design-time expression evaluation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.StopAtEntryPoint">
            <summary>
            Stop at the entrypoint (step-into)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.CannotDebugAlone">
            <summary>
            this process cannot be debugged alone -- stop debugging when only processes with this flag remain
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.WaitForEvent">
            <summary>
            Debugger should wait for a named event to become signaled after launching the first debug target and before launching more targets
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.UseDefaultBrowser">
            <summary>
            Debugger should use the Default Web Browser; this flag used in conjunction with DLO_LaunchBrowser.
            The default browser is obtained via IVsUIShellOpenDocument:: GetFirstDefaultPreviewer().
            The bstrEXE in VsDebugTargetInfo2 points to the URL to be launched. Web Site projects will use
            this for Silverlight projects. This allows, for example, Firefox to be used which is single
            instance and so has to be handled differently on launch. Other project systems (e.g. C++) that
            currently use DLO_LaunchBrowser will continue to use that and IE will get launched as before.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.PrepForDebug">
            <summary>
            We will eventually debug this process, so allow the debugger to perform additional setup
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.TerminateOnStop">
            <summary>
            Terminate the debuggee when debugging is stopped. It is an error to specify both this and DBGLAUNCH_DetachOnStop
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.BreakOneProcess">
            <summary>
            Disable 'Break all processes when one process breaks' debugger option for the debugging session; this option is ignoring if debugging has already started.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.BlockCredentialsDialog">
            <summary>
            Blocks the credentials dialog from being shown on authentication errors
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.BlockWWSDialog">
            <summary>
            Blocks the WWS install dialog from being shown
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.StartInSimulator">
            <summary>
            For DLO_AppPackageDebug, debugger should launch the application (or expect the application to start) in the simulator
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.AllowEventsAfterStopped">
            <summary>
            Allow stopping events in break-mode
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.Force32BitDebug">
            <summary>
            Force use of the 32-bit debugger (currently used only for DLO_CreateProcess)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.Force64BitDebug">
            <summary>
            Force use of the 64-bit debugger (currently used only for DLO_CreateProcess)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.ContainsStartupTask">
            <summary>
            Use Startup Task activator (currently used only for DLO_AppPackageDebug)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions.Profiling">
            <summary>
            Launch process for profiling
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider">
            <summary>
            A contract that debuggers implement for integration with Visual Studio.
            </summary>
            <remarks>
            <para>Implementations should be thread-safe.</para>
            <para>
            Only one instance of each implementation of this interface will be instantiated by the project system.
            Instances should therefore be stateless.  If multiple projects in a solution are configured as
            startup projects, these projects will each be launched through successive calls to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider.CanLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            Gets whether the debugger can launch in the current configuration.
            </summary>
            <param name="launchOptions">
            The launch options that would be passed to a subsequent call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>.
            </param>
            <remarks>
            This method may be called at any time and the implementation should be fast enough to
            perform well if called every time the UI is updated (potentially several times per second).
            Implementers SHOULD NOT rely on this method being called directly before a call to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/>.  No state should be saved within this method to be used
            by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debuggers.DebugLaunchOptions)">
            <summary>
            Launches the project's target executable (or some other configured process)
            and optionally attaches a debugger to it.
            </summary>
            <param name="launchOptions">
            A set of default launch options given by the IDE.
            These options may be customized by the particular debug launch implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if the debugger cannot start.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProviderValidation">
            <summary>
            Interface definition for MPI Cluster Debugger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debuggers.IDebugLaunchProviderValidation.ValidatePropertiesAsync">
            <summary>
            Validate the properties, return false if invalid properties exist.
            </summary>
            <remarks>
            This method is called by the MPI Cluster Debugger.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent">
            <summary>
            The kind of consent already obtained from the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.NotAsked">
            <summary>
            Allows the error reporting infrastructure to decide whether to ask the user based on their previously established consent level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.Approved">
            <summary>
            The user has already approved the submission of this error report through another means.
            </summary>
            <remarks>
            This value should not be used without first obtaining approval from mailto:ddwattac.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.Denied">
            <summary>
            Indicates the user has denied permission to submit the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.AlwaysPrompt">
            <summary>
            Causes UI to appear to ask the user before submitting the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.Max">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType">
            <summary>
            The level of detail and size of the dump to submit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.MicroDump">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.MiniDump">
            <summary>
            By default, a dump that includes callstacks for all threads is submitted.
            If http://watson has been configured to ask for more information, this can be
            automatically upgraded to a heap dump.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.HeapDump">
            <summary>
            Produces a much larger CAB that includes the heap.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.Max">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportType">
            <summary>
            The severity of the error being reported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Noncritical">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Critical">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.ApplicationCrash">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.ApplicationHang">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Kernel">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Invalid">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorFileType">
            <summary>
            The type of files that can be added to the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Microdump">
            <summary>
            A limited minidump that contains only a stack trace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Minidump">
            <summary>
            A minidump file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Heapdump">
            <summary>
            An extended minidump that contains additional data such as the process memory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.UserDocument">
            <summary>
            The document in use by the application at the time of the event. The document is added only if the server asks for this type of document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Other">
            <summary>
            Any other type of file. This file will always get added to the cab (but only if the server asks for a cab).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags">
            <summary>
            Flags that can be specified when adding a file to the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags.DeleteWhenDone">
            <summary>
            Delete the file once WER is done
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags.AnonymousData">
            <summary>
            This file does not contain any PII
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags">
            <summary>
            Flags that can be specified when submitting a report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.HonorRecovery">
            <summary>
            Honor any recovery registration for the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.HonorRestart">
            <summary>
            Honor any restart registration for the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.Queue">
            <summary>
            Add the report to the WER queue without notifying the user.
            The report is queued only—reporting (sending the report to Microsoft) occurs later based on the user's consent level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ShowDebug">
            <summary>
            Show the debug button.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.AddRegisteredData">
            <summary>
            Add the data registered by WerSetFlags, WerRegisterFile, and WerRegisterMemoryBlock to the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.OutOfProcess">
            <summary>
            Spawn another process to submit the report. The calling thread is blocked until the function returns.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.NoCloseUI">
            <summary>
            Do not display the close dialog box for the critical report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.NoQueue">
            <summary>
            Do not queue the report. If there is adequate user consent the report is sent to Microsoft immediately;
            otherwise, the report is discarded. You may use this flag for non-critical reports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.NoArchive">
            <summary>
            Do not archive the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.StartMinimized">
            <summary>
            The initial UI is minimized and flashing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.OutOfProcessAsync">
            <summary>
            Spawn another process to submit the report and return from this function call immediately.
            Note that the contents of the pSubmitResult parameter are undefined and there is no way to query when the reporting completes or the completion status.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ByPassDataThrottling">
            <summary>
            Bypass data throttling for the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ArchiveParameters_Only">
            <summary>
            Archive only the parameters; the cab is discarded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ReportMachineID">
            <summary>
            Always send the unique, 128-bit computer identifier with the report, regardless of the consent with which the report was submitted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType">
            <summary>
            Enumeration for the Error Report UI element (for Critical Reports only).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.AdditionalDataDialogHeader">
            <summary>
            The instructions for the additional data dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.IconFilePath">
            <summary>
            The icon to be displayed in the consent dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.ConsentDialogHeader">
            <summary>
            The main instructions for the consent dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.ConsentDialogBody">
            <summary>
            The contents of the consent dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.OnlineSolutionCheckText">
            <summary>
            The text for the link to check for a solution when online.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.OfflineSolutionCheckText">
            <summary>
            The text for the link to check for a solution when offline.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseText">
            <summary>
            The text for the link to just terminate the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseDialogHeader">
            <summary>
            The main instructions for the close dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseDialogBody">
            <summary>
            The contents of the close dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseDialogButtonText">
            <summary>
            The text for the button in the close dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CustomActionButtonText">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings">
            <summary>
            An immutable description of the type of error report to submit.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.#ctor(Microsoft.VisualStudio.ProjectSystem.ErrorDumpType,Microsoft.VisualStudio.ProjectSystem.ErrorReportType,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile},Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags,System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType,System.String}},Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.DumpType">
            <summary>
            Gets the type of information to include in the error report.
            </summary>
            <value>The default value is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.MiniDump"/>.</value>
            <remarks>
            This value should typically be left at its default unless you first check with
            mailto:ddwattac
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ReportType">
            <summary>
            Gets the type of report being
            </summary>
            <value>The default value is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Noncritical"/>.</value>
            <remarks>
            This value should typically be either <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Noncritical"/> or <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Critical"/>
            unless you first check with mailto:ddwattac
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.Component">
            <summary>
            Gets the logical component where the failure occurred.
            </summary>
            <value>
            A non-localized constant value.
            If <c>null</c> the default component name is used in the report.
            </value>
            <remarks>
            This value should not contain any parameterized values so that a single Watson bucket collects all instances of this failure.
            Its value will be used to assist in matching a failure to the team that owns the feature.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.EventName">
            <summary>
            Gets the value that will appear as "Event Name" in the Windows Application Log and in the Watson error report.
            </summary>
            <value>
            A non-localized constant value.
            If <c>null</c> the default component name is used in the report.
            </value>
            <remarks>
            This value should not contain any parameterized values so that a single Watson bucket collects all instances of this failure.
            Generally it should be left at <c>null</c> so that the product's reserved event name can be used.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.Files">
            <summary>
            Gets the files being added to report.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.SubmitFlags">
            <summary>
            Gets the submit flags.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.SubmitUIOptions">
            <summary>
            Gets the customized UI options for the submit consent dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.PreferredBucketParameters">
            <summary>
            Gets the preferred bucket parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.AddErrorFile(Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings" /> instance which has the input error file being added.
            </summary>
            <param name="errorFile">The error file that needs be added into the cab.</param>
            <returns>The new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings" /> instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile">
            <summary>
            Encapsulate the info required to add a file to report.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.ErrorFileType,Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.Path">
            <summary>
            Gets the file path being added to report
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.Type">
            <summary>
            Gets the type of the file being added to report.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.Flags">
            <summary>
            Gets the flags of the file being added to report.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters">
            <summary>
            Bucket parameters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ModuleName">
            <summary>
            Gets or sets the module name (without the file extension).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ModuleVersion">
            <summary>
            Gets or sets the module version (i.e. 14.0.12345.1).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ModuleTimestamp">
            <summary>
            Gets or sets the module timestamp.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.MethodDef">
            <summary>
            Gets or sets the token to identify the method in module.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.Offset">
            <summary>
            Gets or sets the offset of instruction in the method that threw the exception.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ExceptionType">
            <summary>
            Gets or sets the exception type that caused the error.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IClonePlatformFixup">
            <summary>
            Interface for components that provide post-platform cloning property fix ups.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IClonePlatformFixup.ShouldElementBeCloned(Microsoft.Build.Construction.ProjectPropertyElement,System.String@)">
            <summary>
            Called before an element is cloned to find out whether it is appropriate
            to clone the element for the target platform.
            </summary>
            <param name="propertyElement">The property element being cloned.</param>
            <param name="alternativeValue">
            A value that should be used for the cloned element rather than the original value.
            The default value is <c>null</c>, which indicates that a <c>true</c> return value should use the existing value.
            A value set on this parameter will only take effect if <c>true</c> is returned.
            </param>
            <returns>
            <c>true</c> if the element should be cloned; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IClonePlatformFixup.ShouldElementBeCloned(Microsoft.Build.Construction.ProjectMetadataElement,System.String@)">
            <summary>
            Called before an element is cloned to find out whether it is appropriate
            to clone the element for the target platform.
            </summary>
            <param name="metadataElement">The metadata element being cloned.</param>
            <param name="alternativeValue">
            A value that should be used for the cloned element rather than the original value.
            The default value is <c>null</c>, which indicates that a <c>true</c> return value should use the existing value.
            A value set on this parameter will only take effect if <c>true</c> is returned.
            </param>
            <returns>
            <c>true</c> if the element should be cloned; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IClonePlatformFixupFactory">
            <summary>
            Interface for components that provide post-platform cloning property fix ups.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IClonePlatformFixupFactory.CreateCloneFixup(System.String,System.String)">
            <summary>
            Prepares for a platform cloning operation.
            </summary>
            <param name="templatePlatform">The template platform.</param>
            <param name="newPlatform">The platform being cloned to.</param>
            <returns>A fixup dedicated to a single cloning operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ICriticalPackageService">
            <summary>
            An interface exported on CPS-VS MEF parts that must be initialized with the package.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ICriticalPackageService.Initialize">
            <summary>
            Invoked on the UI thread during CPS package creation to allow this MEF part to initialize.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCache`1">
            <summary>
            Maintains some cached value, automatically refreshing it when called upon if the project has changed at all.
            </summary>
            <typeparam name="T">The type of value being cached.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCache`1.GetValueAsync">
            <summary>
            Gets the current cache value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCache`1.Invalidate">
            <summary>
            Invalidates any previously cached value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheFactory">
            <summary>
            Constructs objects that manage cache invalidation policies for some value whose calculation requires something from
            the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/> scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheFactory.Create``1(System.Func{System.Threading.Tasks.Task{``0}},Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions)">
            <summary>
            Constructs an object that calculates some value and manages its caching invalidation policy.
            </summary>
            <typeparam name="T">The type of value to be cached.</typeparam>
            <param name="cacheUpdateDelegate">The function that calculates the value.</param>
            <param name="options">Flags that alter normal caching behavior.</param>
            <returns>The cache value handling instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheFactory.Create``2(System.Func{``0,System.Threading.Tasks.Task{``1}},Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions)">
            <summary>
            Constructs an object that calculates some value and manages its caching invalidation policy.
            </summary>
            <typeparam name="TKey">The type of key into the caching table.</typeparam>
            <typeparam name="TValue">The type of cached value</typeparam>
            <param name="valueProvider">The delegate that generates a value for a given key.</param>
            <param name="options">Flags that alter normal caching behavior.</param>
            <returns>The cache value handling instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheTable`2">
            <summary>
            Provides a cache for objects that are intensive to generate and should only exist until the project is changed.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheTable`2.GetValueAsync(`0)">
            <summary>
            Gets the value for a given key, first checking the cache and passing through to the value generator if necessary.
            </summary>
            <param name="key">The key.</param>
            <returns>Some object created by the value generator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IEnvironmentConfigProvider">
             <summary>
             Provides environment-driven configuration information.
             </summary>
             <remarks>
             In many cases, the project configuration that should be used is
             not defined within the project, but instead is taken from the
             environment (env. vars for example) in which the project is running.
             This contract allows plugins to override the project information.
            
             This contract can exist at the ProjectService or UnconfiguredProject
             level, depending on whether the environment has different settings
             for different project types. It is recommended, as always, to live
             at the highest layer possible.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IEnvironmentConfigProvider.IsEnvironmentActive">
            <summary>
            Returns true if the provider finds the environment defining
            the necessary information to drive the configuration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IEnvironmentConfigProvider.ActiveProjectConfiguration">
            <summary>
            Returns the project configuration active in the environment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService">
            <summary>
            A service used by any and all CPS components that interface directly with the
            MSBuild object model of a project to notify interested parties of changes made.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService.FireProjectChangeEventsAsync(System.Object,System.EventArgs,Microsoft.VisualStudio.Threading.AsyncEventHandler,Microsoft.VisualStudio.Threading.AsyncEventHandler,Microsoft.VisualStudio.Threading.AsyncEventHandler)">
            <summary>
            Invokes event handlers notifying of a project change.
            </summary>
            <param name="sender">The sender of the event.  May be null if handlers are prepared for it.</param>
            <param name="eventArgs">The <em>immutable</em> event arguments to pass to each event handler.  May be null if handlers are prepared for it.</param>
            <param name="changingHandlers">Event handlers to invoke immediately, on this thread.
            May be null.
            These handlers may make cascading changes as the result of the change causing this event to fire.
            Handlers should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Handlers should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.</param>
            <param name="changedWritingHandlers">These handlers are invoked when the write lock is about to be released.</param>
            <param name="changedHandlers">Event handlers to invoke after the write lock has been released.
            May be null.
            <para>Clients should expect be invoked on any thread.</para>
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService.FireProjectChangeEventsAsync``1(System.Object,``0,Microsoft.VisualStudio.Threading.AsyncEventHandler{``0},Microsoft.VisualStudio.Threading.AsyncEventHandler{``0},Microsoft.VisualStudio.Threading.AsyncEventHandler{``0})">
            <summary>
            Invokes event handlers notifying of a project change.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:System.EventArgs"/> type being provided to the handlers.</typeparam>
            <param name="sender">The sender of the event.  May be null if handlers are prepared for it.</param>
            <param name="eventArgs">The <em>immutable</em> event arguments to pass to each event handler.  May be null if handlers are prepared for it.</param>
            <param name="changingHandlers">Event handlers to invoke immediately, on this thread.
            May be null.
            These handlers may make cascading changes as the result of the change causing this event to fire.
            Handlers should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Handlers should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.</param>
            <param name="changedWritingHandlers">These handlers are invoked when the write lock is about to be released.</param>
            <param name="changedHandlers">Event handlers to invoke after the write lock has been released.
            May be null.
            <para>Clients should expect be invoked on any thread.</para>
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService.CancelPendingChangedEvents">
            <summary>
            Clears any pending events in this particular write lock from the queue
            so they will not be fired when a write lock is released.
            </summary>
            <remarks>
            This method is useful when a bulk operation ends up failing, the changes are rolled back,
            and the OnChanged events that have been queued up for invocation after the write lock is
            released should not be fired.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IMainThreadPublisher">
            <summary>
            An interface exported for purposes of sharing a reference to the main thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMainThreadPublisher.MainThread">
            <summary>
            Gets the main thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the main thread is not yet known.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMainThreadPublisher.JoinableTaskContext">
            <summary>
            Gets the context to use for all joinable jobs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService">
            <summary>
            A service that assists in managing project-related background tasks.
            </summary>
            <remarks>
            Imports of this interface should generally *not* be Lazy&lt;T&gt; imports to avoid ObjectDisposedExceptions
            from MEF while trying to access lazily initialize imports of this service when the project has already unloaded,
            particularly when such use of this service was to determine whether the project has already unloaded and/or to
            avoid timing issues with project unload.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken">
            <summary>
            Gets a token that is cancelled when the project is unloaded.
            </summary>
            <remarks>
            Any handlers registered via <see cref="M:System.Threading.CancellationToken.Register(System.Action)" /> may be executed
            while background tasks are still running.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)">
            <summary>
            Prevents a project unload from beginning until a given task has completed.
            </summary>
            <param name="joinableTask">
            The asynchronous task to wait on in the event of a project unload.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
            <remarks>
            To reduce the impact of deadlocks and to ensure reasonable project unload times, a timeout may expire and result in project unload resuming before the task is completed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Prevents a project unload from beginning until a given task has completed.
            </summary>
            <param name="task">
            The asynchronous task to wait on in the event of a project unload.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
            <remarks>
            To reduce the impact of deadlocks and to ensure reasonable project unload times, a timeout may expire and result in project unload resuming before the task is completed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation,System.Boolean)">
            <summary>
            Prevents project critical operations (e.g. unload, save, build, rename) from beginning until a given task has completed.
            </summary>
            <param name="joinableTask">
            The asynchronous task to wait on in the event of a critical project operation.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="operationFlags">An enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> indicating the critical project operation.</param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterCriticalAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)">
            <summary>
            Prevents a project unload or other critical operations (e.g. save, build, rename) from beginning until a given task has completed.
            </summary>
            <param name="joinableTask">
            The asynchronous task to wait on in the event of a project unload.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
            <remarks>
            To reduce the impact of deadlocks and to ensure reasonable project unload times, a timeout may expire and result in project unload resuming before the task is completed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.DrainTaskQueueAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Joins and waits on any pending asynchronous work relevant to this project.
            </summary>
            <param name="drainCurrentQueueOnly">A value indicating whether the returned task
            should be completed when all the currently queued tasks are completed;
            use <c>false</c> to fully drain the queue (including of tasks that are registered after this call).</param>
            <param name="throwExceptions">A value indicating whether the returned task should fault if
            any registered async tasks fault.</param>
            <param name="cancellationToken">A token whose cancellation signals the caller's lost interest in waiting for tasks to complete.</param>
            <returns>A task, that may fault if any queued tasks fault.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.DrainCriticalTaskQueueAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Joins and waits on any pending asynchronous work relevant to this project.
            </summary>
            <param name="drainCurrentQueueOnly">A value indicating whether the returned task
            should be completed when all the currently queued tasks are completed;
            use <c>false</c> to fully drain the queue (including of tasks that are registered after this call).</param>
            <param name="throwExceptions">A value indicating whether the returned task should fault if
            any registered async tasks fault.</param>
            <param name="cancellationToken">A token whose cancellation signals the caller's lost interest in waiting for tasks to complete.</param>
            <returns>A task, that may fault if any queued tasks fault.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.DrainTaskQueueAsync(Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Joins and waits on any pending asynchronous work relevant to this project.
            </summary>
            <param name="operation">An enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> indicating the critical operation that
            the tasks are associated with; only a single flag is allowed here.</param>
            <param name="drainCurrentQueueOnly">A value indicating whether the returned task
            should be completed when all the currently queued tasks are completed;
            use <c>false</c> to fully drain the queue (including of tasks that are registered after this call).</param>
            <param name="throwExceptions">A value indicating whether the returned task should fault if
            any registered async tasks fault.</param>
            <param name="cancellationToken">A token whose cancellation signals the caller's lost interest in waiting for tasks to complete.</param>
            <returns>A task, that may fault if any queued tasks fault.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.IsTaskQueueEmpty(Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation)">
            <summary>
            Detects if any tasks with the enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> exist.
            </summary>
            <param name="projectCriticalOperation">An enum flag indicating the critical project operation.</param>
            <returns>True if there's any task with the enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> exist.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider">
            <summary>
            Provides project capability insights from some project context for use in project composition.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider.GetCapabilitiesAsync">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <value>A task which returns a sequence that is possibly empty but never <c>null</c>.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider">
            <summary>
            A project capability provider that checks for the presence of a capability on-demand.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider.Changed">
            <summary>
            Occurs when the set of project capabilities may have changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider.Version">
            <summary>
            Gets a value that increments when the <see cref="E:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider.Changed"/> event is about to be raised.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilityCheckProvider.IsProjectCapabilityPresent(System.String)">
            <summary>
            Checks whether a specific project capability is defined for this project.
            </summary>
            <param name="projectCapability">The project capability to check for.</param>
            <returns><c>true</c> if <paramref name="projectCapability"/> is defined by this project; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService">
            <summary>
            A service that provides insight into the available project configurations for an UnconfiguredProject.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.Added">
            <summary>
            Occurs at the conclusion of a project write lock, after a project configuration is added to the project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.Removed">
            <summary>
            Occurs at the conclusion of a project write lock, after a project configuration is removed from the project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.Changed">
            <summary>
            Occurs at the conclusion of a project write lock, after a project configuration is renamed or changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.SuggestedProjectConfiguration">
            <summary>
            Gets the suggested project configuration to use for this project, taking into account
            the active configuration, last known active configuration, any already loaded configurations,
            the default configuration for the project type, and an ultimate fallback configuration.
            </summary>
            <value>Never null.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.GetKnownProjectConfigurationsAsync">
            <summary>
            Returns the list of project configurations that the project knows about. This list is
            read from the project manifest.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.GetProjectConfigurationAsync(System.String)">
            <summary>
            Gets the project configuration with a given name.
            </summary>
            <param name="name">The name of the desired project configuration.</param>
            <returns>The matching ProjectConfiguration.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no matching project configuration can be found.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.AddKnownProjectConfigurationAsync(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Adds a project configuration to the list of known project configurations.
            </summary>
            <param name="name"> The name of the project configuration. Cannot be null or empty. </param>
            <param name="dimensionNameValuePairs"> The list of configuration dimensions name-value pairs that make up this project configuration. Cannot be null or empty. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.AddProjectConfigurationsByExistingDimensionAsync(System.String,System.String,System.Func{System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.String})">
            <summary>
            Creates empty project configurations that have a given property name and value.
            </summary>
            <param name="dimensionName">The project configuration property name.</param>
            <param name="dimensionValue">The project configuration property value.</param>
            <param name="getConfigurationName">A delegate that will calculate a unique name for a new project configuration.</param>
            <remarks>
            If a project already has these project configurations:
              Debug|Win32
              Release|Win32
              Debug|x86
              Release|x86
            Then calling this method with "Configuration", "Foo" would add these project configurations:
              Foo|Win32
              Foo|x86
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.RemoveKnownProjectConfigurationAsync(System.String,System.Boolean)">
            <summary>
            Removes a project configuration from the list of known project configurations based on its full name.
            If specified, it also removes all msbuild project elements that are conditioned by only and all of the
            project configuration dimensions.
            Logs a message if duplicate project configurations are found but continues with deleting all.
            Logs a message if the project configuration is not found in the known project configurations list and returns.
            </summary>
            <param name="name"> The full name of the project configuration. Cannot be null or empty. </param>
            <param name="removeConditionedElements"> Specifies whether the method should remove all the msbuild project elements
            that are conditioned on the project configuration. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.RemoveProjectConfigurationDimensionAsync(System.String,System.String,System.Boolean)">
            <summary>
            Removes all project configurations from the list of known project configurations
            which contain the specified dimension.
            If specified, it also removes all msbuild project elements that are conditioned by only this dimension.
            Logs a message if no project configuration is found in the known project configurations list and returns.
            </summary>
            <param name="dimensionName"> The name of the project configuration dimension. Cannot be null or empty. </param>
            <param name="dimensionValue"> The value of the project configuration dimension. Cannot be null or empty. </param>
            <param name="removeConditionedElements"> Specifies whether the method should remove all the msbuild project elements
            that are conditioned on the project configuration dimension. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.RenameProjectConfigurationDimensionAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Changes the dimension value for all known project configurations that contain it.
            If specified, it also updates project element conditions that are based on at least the old value of the dimension.
            Logs a message if the renaming operation results in duplicate project configurations but continues with the renaming process.
            Logs a message if no project configuration is found in the known project configurations list
            that contains the dimension and returns.
            </summary>
            <param name="dimensionName"> The dimension name. Cannot be null or empty. </param>
            <param name="oldValue"> The old value. Cannot be null or empty. </param>
            <param name="newValue"> The new value. Cannot be null or empty. </param>
            <param name="renameConditionedElements"> Specifies whether the method should update conditions for all affected elements. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.CloneKnownProjectConfigurationAsync(System.String,System.String)">
            <summary>
            Clones all project elements conditioned by at least all project configuration dimensions.
            Logs a message and returns if either the template or the clone project configuration is missing
            from the list of known project configurations or is having a duplicate.
            </summary>
            <param name="templateName"> Full name of the project configuration used as cloning template (e.g. "Debug|AnyCPU") </param>
            <param name="cloneName"> Name of the clone project configuration. Cannot be null or empty. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.CloneKnownProjectConfigurationAsync(System.String,System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Creates the clone project configuration if it doesn't exist already.
            Clones all project elements conditioned by at least all project configuration dimensions.
            Logs a message and returns if the template project configuration is missing or having a duplicate.
            Logs a message and returns if the clone project configuration is identical with the template project configuration.
            Logs a message and returns if the clone project configuration is found
            with different metadata than passed with cloneMetadata parameter.
            </summary>
            <param name="templateName"> Name of the project configuration used as cloning template. Cannot be null or empty. </param>
            <param name="cloneName"> Name of the clone project configuration. Cannot be null or empty. </param>
            <param name="cloneMetadata"> Dimensions names and values of the clone configuration. Cannot be null or empty. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.CloneProjectConfigurationDimensionAsync(System.String,System.String,System.String)">
            <summary>
            Clones all project elements conditioned by at least this configuration dimension.
            Logs a message and returns if there is no project configuration in the list of known project configurations
            that would contain the dimension name with the old and new values.
            Logs a message if the number of project configurations with dimension name = oldValue is different than
            the number of project configurations with dimension name = newValue, but continues with the cloning operation.
            </summary>
            <param name="dimensionName"> The dimension name. Cannot be null or empty. </param>
            <param name="oldValue"> The old value. Cannot be null or empty. </param>
            <param name="newValue"> The new value. Cannot be null or empty. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsServiceInternal">
            <summary>
            Internal methods on the ProjectConfigurationsService that must be reachable from CPS-VS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsServiceInternal.GetSuggestedProjectConfiguration(System.Boolean)">
            <summary>
            Gets the best ProjectConfiguration to load when we don't know what to load, but would prefer
            to load one that is already loaded or that probably will be.
            </summary>
            <param name="queryActiveConfiguration">
            A value indicating whether to dare ask the system for the active project configuration.
            Doing so is usually a good idea -- but not when it is the query for active project configuration
            that is asking US the question already (leading to recursive loop) or querying VS has already taken place.
            </param>
            <returns>The best project configuration to load.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectContext">
            <summary>
            An interface that may appear on various other CPS scoped services to provide access
            to other components of CPS.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectContext.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectContext.UnconfiguredProject">
            <summary>
            Gets the unconfigured project to which this service applies, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectContext.ConfiguredProject">
            <summary>
            Gets the configured project to which this service applies, if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectErrorReporting">
            <summary>
            Describes a service that can submit Watson reports for non-fatal errors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectErrorReporting.SubmitReportOnFailure(System.Action,System.Func{System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings})">
            <summary>
            Executes a delegate and files a Watson report if an exception is thrown.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="reportExceptionCheck">
            An optional delegate that will examine a thrown exception and return report settings
            if a Watson report should be submitted, or <c>null</c> if no report should be filed.
            If the delegate is not provided, all exceptions will generate a Watson report using the default settings.
            </param>
            <remarks>
            If the <paramref name="action"/> throws an exception, it will propagate to the caller of this method,
            whether or not a Watson report is submitted.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectErrorReporting.SubmitErrorReport(System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent)">
            <summary>
            Submits a Watson report for a given exception.
            </summary>
            <param name="exception">The exception to file a report for.</param>
            <param name="settings">Customizes what is included in the error report.</param>
            <param name="consentGiven">Indicates the level of consent that was given by the user.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService">
            <summary>
            Service for reading/writing arbitrary "project extension" data to a project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.ContainsKeyAsync(System.String)">
            <summary>
            Tests for the presence of some extension data under a given key.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <returns><c>true</c> if this key is defined in the project extensions area.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.GetDataAsync(System.String)">
            <summary>
            Gets the data previously stored using <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetDataAsync(System.String,System.String)"/> under a given key.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <returns>The value previously stored, or the empty string if the key was not found in the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.GetXmlAsync(System.String)">
            <summary>
            Retrieves a snapshot of well-formed XML from a project previously stored with <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetXmlAsync(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})"/>.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <returns>A sequence of elements; an empty sequence if no data under the given key was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetXmlAsync(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Stores well-formed XML in the project.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <param name="elements">The element(s) to store.</param>
            <remarks>
            Data previously stored under the given key, if any, will be replaced with the new data.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetDataAsync(System.String,System.String)">
            <summary>
            Sets arbitrary data under a given key in the project.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <param name="value">The value to store, which may be an empty string but must not be null.</param>
            <remarks>
            Data previously stored under the given key, if any, will be replaced with the new data.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.DeleteAsync(System.String)">
            <summary>
            Deletes the data or XML stored under a given key, if any exists.
            </summary>
            <param name="key">The key to delete from the project extension storage area.</param>
            <returns><c>true</c> if the key was present and was removed; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectGlobalPropertiesProvider">
            <summary>
            A MEF exportable interface whereby components may add global properties to
            the MSBuild evaluation of one or all projects.
            </summary>
            <remarks>
            When exported via the default contract name, a MEF part must belong to the UnconfiguredProject scope.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectGlobalPropertiesProvider.GetGlobalPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the set of global properties that should apply to the project(s) in this scope.
            </summary>
            <value>
            A map whose keys are case insensitive. Never null, but may be empty.
            The values should be escaped by the <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Escape(System.String)"/> method when it is necessary.
            </value>
            <remarks>
            This member is retained for backward compatibility with VC++ that does not opt into the CPS subscription services in general.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags">
            <summary>
            Flags that modify default lock behavior.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.None">
            <summary>
            The default behavior applies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.StickyWrite">
            <summary>
            Causes an upgradeable reader to remain in an upgraded-write state once upgraded,
            even after the nested write lock has been released.
            </summary>
            <remarks>
            This is useful when you have a batch of possible write operations to apply, which
            may or may not actually apply in the end, but if any of them change anything,
            all of their changes should be seen atomically (within a single write lock).
            This approach is preferable to simply acquiring a write lock around the batch of
            potential changes because it doesn't defeat concurrent readers until it knows there
            is a change to actually make.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.SkipInitialEvaluation">
            <summary>
            Skips a step to make sure that a project is initially evaluated when retrieved using <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)"/>.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.SuppressReevaluation">
            <summary>
            Suppresses MSBuild evaluation of projects while a write lock is held even if
            <see cref="M:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary"/> is called.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockService">
            <summary>
            Exposes the lock which protects access to the MSBuild object model behind projects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsAnyLockHeld">
            <summary>
            Gets a value indicating whether any kind of lock is held by the caller.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsAnyPassiveLockHeld">
            <summary>
            Gets a value indicating whether any kind of lock is held by the caller without regard
            to the lock compatibility of the caller's context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a read lock.
            </summary>
            <remarks>
            This property returns <c>false</c> if any other lock type is held, unless
            within that alternate lock type this lock is also nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsPassiveReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a read lock, even if it is
            currently hidden due to the caller's thread type or current SynchronizationContext.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsUpgradeableReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds an upgradeable read lock.
            </summary>
            <remarks>
            This property returns <c>false</c> if any other lock type is held, unless
            within that alternate lock type this lock is also nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsPassiveUpgradeableReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds an upgradeable read lock, even if it is
            currently hidden due to the caller's thread type or current SynchronizationContext.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsWriteLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a write lock.
            </summary>
            <remarks>
            This property returns <c>false</c> if any other lock type is held, unless
            within that alternate lock type this lock is also nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsPassiveWriteLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a write lock, even if it is
            currently hidden due to the caller's thread type or current SynchronizationContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.ReadLockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains a read lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.UpgradeableReadLockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains an upgradeable read lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.UpgradeableReadLockAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags,System.Threading.CancellationToken)">
            <summary>
            Obtains a read lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="options">Modifications to normal lock behavior.</param>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.WriteLockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains a write lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.WriteLockAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags,System.Threading.CancellationToken)">
            <summary>
            Obtains a write lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="options">Modifications to normal lock behavior.</param>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.HideLocks">
            <summary>
            Prevents use or visibility of the caller's lock(s) until the returned value is disposed.
            </summary>
            <returns>The value to dispose to restore lock visibility.</returns>
            <remarks>
            This can be used by a write lock holder that is about to fork execution to avoid
            two threads simultaneously believing they hold the exclusive write lock.
            The lock should be hidden just before kicking off the work and can be restored immediately
            after kicking off the work.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal">
            <summary>
            Exposes the lock that protects the MSBulid object model behind loaded projects, with additional CPS-internal methods.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.ReleasedWriteLock">
            <summary>
            Occurs when a top-level write lock is about to be released.
            </summary>
            <remarks>
            <para>
            Event handlers are invoked on threadpool threads, are invoked
            sequentially and complete before the write lock is released.
            Event handlers MUST NOT attempt to acquire any kind of project lock
            or the writer thread and the event handler's thread will deadlock.
            </para>
            <para>
            One use for this event is for event dispatchers that want to track
            which events get fired by which write locks.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.ReleasingWriteLock">
            <summary>
            Occurs when a top-level write lock is about to be released.
            Event handlers are fired within the write lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.CurrentWriteLockTask">
            <summary>
            A task that is completed when the outermost write lock held by the caller is released.
            </summary>
            <remarks>
            The task is always complete when no write lock is held by the calling thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.SuppressWriteLockCheck(System.String)">
            <summary>
            Suppresses write lock check enforcement for a ProjectRootElement with a given full path temporarily.
            This method should be called as the expression of a C# <c>using</c> clause to ensure proper disposal.
            </summary>
            <param name="projectRootElementFullPath">The value of <see cref="P:Microsoft.Build.Construction.ProjectRootElement.FullPath"/> to allow to be marked dirty without throwing a missing write lock exception if no write lock is present.</param>
            <returns>An object whose disposal will end the temporary write lock suppression for this file.</returns>
            <remarks>
            Write lock enforcement is *very* important.  Please use this method with extreme care and caution.
            For instance, this method should only be used by a caller who has the only reference to the named ProjectRootElement,
            and even then write locks should be obtained whenever possible.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.OnBeforeWriteLockReleased(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Registers a callback to be invoked when the write lock held by the caller is
            about to be ultimately released (outermost write lock).
            </summary>
            <param name="action">
            The asynchronous delegate to invoke.
            Access to the write lock is provided throughout the asynchronous invocation.
            </param>
            <remarks>
            This supports some scenarios VC++ has where change event handlers need to inspect changes,
            or follow up with other changes to respond to earlier changes, at the conclusion of the lock.
            This method is safe to call from within a previously registered callback, in which case the
            registered callback will run when previously registered callbacks have completed execution.
            If the write lock is released to an upgradeable read lock, these callbacks are fired synchronously
            with respect to the writer who is releasing the lock.  Otherwise, the callbacks are invoked
            asynchronously with respect to the releasing thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.RegisterLockHoldingMainThreadJoinableIfApplicable(Microsoft.VisualStudio.Threading.JoinableTask)">
            <summary>
            Registers the caller, who is waiting for the Main thread, as a project lock holder if applicable.
            </summary>
            <param name="joinable">The joinable being used to switch to the Main thread.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.UnregisterLockHoldingMainThreadJoinable(Microsoft.VisualStudio.Threading.JoinableTask)">
            <summary>
            Unregisters the caller's Main thread joinable as a pending Main thread awaiter with a project lock.
            </summary>
            <param name="joinable">The joinable previously supplied to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.RegisterLockHoldingMainThreadJoinableIfApplicable(Microsoft.VisualStudio.Threading.JoinableTask)"/>.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser">
            <summary>
            Provides services to the lock structures associated with the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockService"/> so that their implementations
            can remain simple in this contract assembly by forwarding the implementation to a unified implementation assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.ProjectCollection">
            <summary>
            Gets the project collection protected by the lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.WritableFiles">
            <summary>
            Gets the set of files checked out under the current write lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetAwaiter(Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable,Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable)">
            <summary>
            Gets the awaiter for a given awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetAwaiter(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable,Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable)">
            <summary>
            Gets the awaiter for a given awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.IsCompleted(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter)">
            <summary>
            Returns a value for the awaiter's IsCompleted property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnCompleted(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter,System.Action)">
            <summary>
            Queues a continuation delegate for execution after the awaiter's job is finished.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild Project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectXmlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild ProjectRootElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.CheckoutAsync(System.String)">
            <summary>
            Checks a file out of source control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.CheckoutAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks files out of source control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.RenameAsync(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser,System.String,System.String)">
            <summary>
            Renames a project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnDispose(Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnDispose(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnReleaseAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnReleaseAsync(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.SetAllResourcesToUnknownState">
            <summary>
            Sets all resources to unknown state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable">
            <summary>
            A value that can be "awaited" while a project lock isn't immediately available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.awaitable">
            <summary>
            The underlying lock's awaitable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable">
            <summary>
            A value that can be "awaited" while a project lock isn't immediately available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.awaitable">
            <summary>
            The underlying lock's awaitable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter">
            <summary>
            The awaiter for an asynchronous project lock request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.awaiter">
            <summary>
            The underlying lock's awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the lock has been issued.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the delegate to execute when the lock is available.
            </summary>
            <param name="continuation">The delegate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.GetResult">
            <summary>
            Applies the issued lock to the caller and returns the value used to release the lock.
            </summary>
            <returns>The value to dispose of to release the lock.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter">
            <summary>
            The awaiter for an asynchronous project write lock request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.awaiter">
            <summary>
            The underlying lock's awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the lock has been issued.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the delegate to execute when the lock is available.
            </summary>
            <param name="continuation">The delegate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.GetResult">
            <summary>
            Applies the issued lock to the caller and returns the value used to release the lock.
            </summary>
            <returns>The value to dispose of to release the lock.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser">
            <summary>
            The result of acquiring a project lock, providing various under-lock services and a means to release the lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.CompletedTask">
            <summary>
            A singleton completed task.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.releaser">
            <summary>
            The underlying lock's releaser.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser"/> struct.
            </summary>
            <param name="releaser">The underlying reader-writer lock releaser.</param>
            <param name="helper">The instance that receives forwarded method calls.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.ProjectCollection">
            <summary>
            Gets the MSBuild project collection.  This should only be used or referenced while holding the lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.LockReleaser">
            <summary>
            Gets the underlying lock's releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project evaluation model for the specified project.
            </summary>
            <param name="configuredProject">The configured project whose underlying MSBuild object model is required.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.GetProjectXmlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project construction model for the specified file.
            </summary>
            <param name="projectFile">The project file (or import) that is reqiured.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the <see cref="T:Microsoft.Build.Construction.ProjectRootElement"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.Dispose">
            <summary>
            Disposes this lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.ReleaseAsync">
            <summary>
            Disposes this lock.
            </summary>
            <returns>A task that must be awaited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser">
            <summary>
            The result of acquiring a project write lock, providing various under-lock services and a means to release the lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.releaser">
            <summary>
            The underlying lock's releaser.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.ProjectCollection">
            <summary>
            Gets the MSBuild project collection.  This should only be used or referenced while holding the lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.WritableFiles">
            <summary>
            Gets the set of files previously checked out using source control within this write lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.LockReleaser">
            <summary>
            Gets the underlying lock's releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.GetProjectAsync(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project evaluation model for the specified project.
            </summary>
            <param name="configuredProject">The configured project whose underlying MSBuild object model is required.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.GetProjectXmlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project construction model for the specified file.
            </summary>
            <param name="projectFile">The project file (or import) that is reqiured.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the <see cref="T:Microsoft.Build.Construction.ProjectRootElement"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.CheckoutAsync(System.String)">
            <summary>
            Checks a file out for editing from source control.
            </summary>
            <param name="file">The file to edit.</param>
            <returns>A task whose successful completion signals approval to edit the file, or whose faulting completion signals rejection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.CheckoutAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks a file out for editing from source control.
            </summary>
            <param name="files">The files to edit.</param>
            <returns>A task whose successful completion signals approval to edit the file, or whose faulting completion signals rejection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.RenameAsync(System.String,System.String)">
            <summary>
            Updates a ProjectRootElement.FullPath property for a matching ProjectRootElement if it is loaded.
            </summary>
            <param name="oldFullPath">The current value of the <see cref="P:Microsoft.Build.Construction.ProjectRootElement.FullPath"/> property.</param>
            <param name="newFullPath">The intended new value of the <see cref="P:Microsoft.Build.Construction.ProjectRootElement.FullPath"/> property.</param>
            <returns>A task that completes when the work is finished.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.Dispose">
            <summary>
            Disposes this lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.ReleaseAsync">
            <summary>
            Disposes this lock.
            </summary>
            <returns>A task that must be awaited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.SetAllResourcesToUnknownState">
            <summary>
            Sets all resources to unknown state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression">
            <summary>
            A value to dispose to terminate the suppression of the visibility and automatic propagation of a held lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression.suppression">
            <summary>
            The underlying lock's suppression value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterLock.Suppression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression.Dispose">
            <summary>
            Ends the suppression of the project lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ReleasingWriteLockEventArgs">
            <summary>
            Arguments to supply to the <see cref="E:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.ReleasingWriteLock"/> event handlers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReleasingWriteLockEventArgs.WrittenProjectXmlPaths">
            <summary>
            Gets the set of paths to MSBuild files that were just changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReleasingWriteLockEventArgs.RenamedProjectXmlPaths">
            <summary>
            Gets a map of old to new full paths of project files that were renamed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices">
            <summary>
            An interface that provides access common project services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices.ExportProvider">
            <summary>
            Gets the ExportProvider for this scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectReloader">
            <summary>
            A ProjectService scoped service that can reload a given project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectReloader.ReloadIfCapabilitiesChangedAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Boolean)">
            <summary>
            Causes the project to reload if its project capabilities have been changed since it was loaded.
            </summary>
            <param name="unconfiguredProject">The project to consider reloading.</param>
            <param name="promptUserBeforeReload">A value indicating whether the user should be prompted before a reload if one should occur.</param>
            <returns>
            A task that completes after the project is determined to not need a reload, or after the project has been reloaded.
            The result of the task indicates whether a reload actually occurred.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService">
            <summary>
            An UnconfiguredProject-level service that describes the current security state of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsBuildEnabled">
            <summary>
            Gets a value indicating whether building this project is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsDebugEnabled">
            <summary>
            Gets a value indicating whether debugging this project is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsDeployEnabled">
            <summary>
            Gets a value indicating whether deploying this project is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsPublishEnabled">
            <summary>
            Gets a value indicating whether publishing this project is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.ResolveSecurityIssues">
            <summary>
            Invokes a dialog to present any security issues to the user
            and offer the opportunity to resolve those issues.
            </summary>
            <returns>
            A task that is completed after the user dismisses the dialog
            and (if applicable) any user actions have been applied.
            </returns>
            <remarks>
            Invoking this method does not ensure that any security issues have
            actually been resolved (as they may be up to user discretion).
            After the returned task is completed, callers
            should requery the properties on this interface to ascertain current status.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel">
            <summary>
            Threading models supports by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel.Multithreaded">
            <summary>
            All project access is allowed only on MTA threads, events are often raised concurrently, and all CPS services are available.
            All project types except Visual C++ uses this threading model.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectServiceAccessor">
            <summary>
            An interface that can be used to obtain a specified version of the Common Project System.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectServiceAccessor.GetProjectService(Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel)">
            <summary>
            Gets a specified version of the Common Project System.
            </summary>
            <param name="threadingModel">Determines the threading model used by the CPS instance to obtain.</param>
            <returns>The CPS service instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectServices">
            <summary>
            An interface that provides access to common project service scoped services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.ThreadingPolicy">
            <summary>
            Gets the thread handling policy for this project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.FaultHandler">
            <summary>
            Gets the project fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.ProjectReloader">
            <summary>
            Gets the project reloader service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ISourceCodeControlIntegration">
            <summary>
            An interface that source code control providers can implement to influence
            project systems policy decisions and process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISourceCodeControlIntegration.CanChangeProjectFilesAsync(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Invoked before any change is made to a project file or one of its imports.
            </summary>
            <param name="projectFullPaths">The full paths to the files about to be changed.</param>
            <returns>
            A value indicating whether the given file(s) can be written to according to
            the source code control system's policies.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions">
            <summary>
            These flags qualify the nature of a delete/remove operation. These flags are used to control sending the correct hints which affect notifications to SCC.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions.None">
            <summary>
            No flag specified; indicates the file/folder should be removed from project only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions.DeleteFromStorage">
            <summary>
            Indicates that the file/folder should be deleted from disk/storage. Absence of this flag indicates the file/folder should be removed from project only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions.DeleteIsPartOfMoveOperation">
            <summary>
            Indicates that this delete operation is completing a move/rename operation within a single project (e.g. Cut/Paste or Drag/Drop).
            In this case we do not want to send any RemovedFile/Folder hints because we would have already sent out RenamedFile/Folder hints.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager">
            <summary>
            Provides services for adding, removing and renaming source item folders in the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager.IncludeFolderInProjectAsync(System.String,System.Boolean)">
            <summary>
            Ensures that a folder with the given path shows up in a logical tree view of the project.
            </summary>
            <param name="path">The absolute or project-relative path to the folder.</param>
            <param name="recursive">A value indicating whether to recursively add subfolders of the path specified.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager.IncludeFolderInProjectAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Ensures that a folder with the given path shows up in a logical tree view of the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the folders to add.</param>
            <param name="recursive">A value indicating whether to recursively add subfolders of the paths specified.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager.RemoveFolderFromProjectAsync(System.String,Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes a folder and all its contents from the project.
            </summary>
            <param name="path">The absolute or project-relative path to the folder.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            The folder on disk is <em>not</em> deleted.
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager.RemoveFolderFromProjectAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes a folder and all its contents from the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the folders to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            The folder on disk is <em>not</em> deleted.
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager.RenameFolderAsync(System.String,System.String)">
            <summary>
            Renames a file system folder, and updates all folder and item references in the project file.
            </summary>
            <param name="oldPath">The absolute or project-relative path to rename.</param>
            <param name="newPath">The new absolute or project-relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IFolderManager.RenameFolderInProjectAsync(System.String,System.String)">
            <summary>
            Renames a project folder, similar to RenameFolderAsync but without updating physical folder
            </summary>
            <param name="oldPath">The absolute or project-relative path to rename.</param>
            <param name="newPath">The new absolute or project-relative path.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectFolderItemProviderExtension">
            <summary>
            Interface to access and manage project folder items not directly present in the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectFolderItemProviderExtension.CheckFolderItemOwnershipAsync(System.String)">
            <summary>
            Returns true if this extension manages the folder item.
            </summary>
            <param name="evaluatedInclude">Item name.</param>
            <returns>True if this extension manages the folder item, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectFolderItemProviderExtension.AddOwnedFolderItemsAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}})">
            <summary>
            Adds the folder items that the extension owns to the appropriate project file(s).
            </summary>
            <param name="items">Dictionary of folder <c>Include</c> values and their metadata. These values may contain macros and will not be escaped.</param>
            <returns>Collection of folder items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectFolderItemProviderExtension.RemoveOwnedFolderItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes the folder items that the extension owns from the appropriate project file(s).
            </summary>
            <param name="projectItems">Collection of <c>IProjectItem</c> folder items to remove.</param>
            <param name="deleteOptions">The delete options.</param>
            <returns>Collection of folder items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectFolderItemProviderExtension.RenameOwnedFolderItemAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,System.String)">
            <summary>
            Renames the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem"/> folder item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="projectItem">The item to rename.</param>
            <param name="newValue">New name of the folder item.</param>
            <returns>The renamed <c>ProjectItem</c> instance if the item was renamed, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemByFileProvider">
            <summary>
            An accessor for project items backed by a specific project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemByFileProvider.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Adds a new item to the specified project.
            </summary>
            <param name="itemType">The item type for the new MSBuild item.</param>
            <param name="include">The unevaluated include value for the new item.</param>
            <param name="metadata">Dictionary of metadata to apply to the item. May be <c>null</c>.</param>
            <param name="projectFileToChange">The backing store of the item.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="itemType"/>
            is not one that is managed by this provider.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemByFileProvider.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}},System.String)">
            <summary>
            Adds new items to the specified project.
            </summary>
            <param name="items">
            A sequence of items to add. The tuple is made up of the item type, the (unevaluated) item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <param name="projectFileToChange">The backing store of the items.</param>
            <returns>The sequence of added items.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension">
            <summary>
            Interface to access and manage project source items not directly present in the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.CheckSourceItemOwnershipAsync(System.String,System.String)">
            <summary>
            Returns true if this extension manages the source item.
            </summary>
            <param name="itemType">Msbuild item type.</param>
            <param name="evaluatedInclude">Item name.</param>
            <returns>True if this extension manages the source item, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.CheckProjectFileOwnershipAsync(System.String)">
            <summary>
            Returns true if this extension manages the project file.
            </summary>
            <param name="projectFilePath">Full path to the project file.</param>
            <returns>True if this extension manages the project file, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.AddOwnedSourceItemsAsync(System.Collections.Generic.IReadOnlyCollection{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Adds the source items that the extension owns to the appropriate project file(s).
            </summary>
            <param name="items">Dictionary of source <c>Include</c> values and their metadata. These values may contain macros and will not be escaped.</param>
            <returns>Collection of source items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.TryAddSourceItemsToOwnedProjectFileAsync(System.Collections.Generic.IReadOnlyCollection{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}},System.String)">
            <summary>
            Adds the source items to the project file if this extension manages the project file.
            </summary>
            <param name="items">Dictionary of source <c>Include</c> values and their metadata.</param>
            <param name="projectFilePath">Full path to the project file.</param>
            <returns>True if the items were added to the project file, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.RemoveOwnedSourceItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItem},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes the source items that the extension owns from the appropriate project file(s).
            </summary>
            <param name="projectItems">Collection of <c>IProjectItem</c> source items to remove.</param>
            <param name="deleteOptions">The delete options.</param>
            <returns>Collection of source items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.RenameOwnedSourceItemAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,System.String)">
            <summary>
            Renames the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem"/> source item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="projectItem">The item to rename.</param>
            <param name="newValue">New name of the source item.</param>
            <returns>The renamed <c>ProjectItem</c> instance if the item was renamed, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItemProviderExtension.SetItemTypeOfOwnedSourceItemAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,System.String)">
            <summary>
            Sets the item type of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem"/> source item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="projectItem">The item to rename.</param>
            <param name="newItemType">New item type of the source item.</param>
            <returns>The renamed <c>ProjectItem</c> instance if the item was renamed, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema">
            <summary>
            A snapshot of the recognized item types for a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.FallbackContentType">
            <summary>
            Gets the fallback content type that is used for unknown files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetContentTypeAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem)">
            <summary>
            Get the content type schema that is associated with a given project item
            </summary>
            <param name="item"> a project item</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetContentType(System.String)">
            <summary>
            Get the content type schema by name
            </summary>
            <param name="contentTypeName">The content type name.</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetDefaultContentTypeForFile(System.String,System.Boolean)">
            <summary>
            Get default content type for a given filename
            </summary>
            <param name="fileName">file name</param>
            <param name="allowFallback">whether or not to allow a fallback content type for unrecognized extensions.</param>
            <returns>content type</returns>
            <remarks>Never returns null if allowFallback is true.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetDefaultContentTypeForItemType(System.String)">
            <summary>
            Get default content type for a given item type.
            </summary>
            <param name="itemType">The item type.</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetItemType(System.String)">
            <summary>
            Get the item type schema by name
            </summary>
            <param name="itemType">The item type.</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetItemType(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem)">
            <summary>
            Get the item type schema for a given project item
            </summary>
            <param name="item"> a project item</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetKnownContentTypes">
            <summary>
            Get all known content types (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetKnownFileExtensions">
            <summary>
            Get all known file extensions (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchema.GetKnownItemTypes">
            <summary>
            Get all known content types (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItem">
            <summary>
            Project items that track source items (as opposed to project items that support designers, for example).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectSourceItem.RenameAsync(System.String)">
            <summary>
            Renames the item in the project, moves the file on disk, and updates any related items.
            </summary>
            <param name="newLeafName">The new leaf name for the item.</param>
            <returns>A task for the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.ISourceItemsServiceInternal">
            <summary>
            A unit test support interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ISourceItemsServiceInternal.UnitTestingInitialization">
            <summary>
            List of MSBuild ItemTypes that make up sources for VC projects, used for unit testing
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.ItemEventArgs`1">
            <summary>
            Event arguments for item-related events.
            </summary>
            <typeparam name="T">The type of project item the event is regarding.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemEventArgs`1.Item">
            <summary>
            Gets the project item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IContentType">
            <summary>
            item content type definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IContentType.Name">
            <summary>
            Name of the content type. Non-localizable sting
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IContentType.DisplayName">
            <summary>
            Display name, localizable string describing the type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IContentType.ItemType">
            <summary>
            Name of the MSbuild item type collection used for this ItemType
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IContentType.DefaultContentTypeForItemType">
            <summary>
            true if this content type is the default for the items that are stored in ItemType collection in MSBuild
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IContentType.Metadata">
            <summary>
            Gets the list of content metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IContentType.GetMetadata(System.String)">
            <summary>
            Content metadata. This would include all behavior properties that can be related to the item content type such as Editor support, icons, etc
            If there is no metadata with "metadataName" it will return null.
            </summary>
            <param name="metadataName">the name of the metadata - case insensitive</param>
            <returns>metadata value</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs">
            <summary>
            Arguments for the ItemIdentityChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.Item">
            <summary>
            Gets the project item that was changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.PropertySheet">
            <summary>
            The evaluated full path of the property sheet/project manifest
            that contains this item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.OldItemType">
            <summary>
            The old item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.NewItemType">
            <summary>
            The new item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.OldUnevaluatedInclude">
            <summary>
            The old unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.NewUnevaluatedInclude">
            <summary>
            The new unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.OldEvaluatedInclude">
            <summary>
            The old evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.NewEvaluatedInclude">
            <summary>
            The new evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.HasItemTypeChanged">
            <summary>
            Indicates if the item type has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.ItemIdentityChangedEventArgs.HasUnevaluatedIncludeChanged">
            <summary>
            Indicates if the unevaluated include has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IItemType">
            <summary>
            Metadata associated with ItemType groups
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IItemType.Name">
            <summary>
            Item Type name (as used in MSBuild)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IItemType.DisplayName">
            <summary>
            User friendly name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IItemType.UpToDateCheckInput">
            <summary>
            files from this itemtype participate in up to date check.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem">
            <summary>
            An item in an MSBuild project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.ItemType">
            <summary>
            Gets the ItemType of the MSBuild item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.UnevaluatedInclude">
            <summary>
            Gets the unevaluated include value of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.EvaluatedInclude">
            <summary>
            Gets the evaluated include value of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.EvaluatedIncludeAsFullPath">
            <summary>
            Gets the (normalized) full path to the item on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.EvaluatedIncludeAsRelativePath">
            <summary>
            Gets the (normalized) path to this item, relative to the project directory.
            </summary>
            <remarks>
            There may not be any relative relationship between the project root and this item.
            For example, the project may be at c:\proj\feature.proj and the item may be at d:\readme.txt.
            In these cases, RelativePath will equal FullPath..
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.PropertiesContext">
            <summary>
            Gets the context of this item, allowing it to be addressed for properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.SetItemTypeAsync(System.String)">
            <summary>
            Sets the item type for this project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.SetUnevaluatedIncludeAsync(System.String)">
            <summary>
            Sets the value that appears in the MSBuild project file as the item name (the literal string in the Include attribute.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes the item from the project file.
            </summary>
            <param name="deleteOptions">A value indicating the nature of the delete operation the caller is performing.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider">
            <summary>
            An accessor for reading, writing and removing project items.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.ItemIdentityChanging">
            <summary>
            Event that is fired on the writer thread when an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            <para>This event is not fired when the evaluated include
            changes without a change in the unevaluated include.
            It is also not fired when the metadata under an item changes. </para>
            <para>Clients should attach handlers to this event if they may need to make
            cascading changes as the result of the change causing this event to fire.
            Clients should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Clients should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.ItemIdentityChangedOnWriter">
            <summary>
            Event that is fired on the writer thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.ItemIdentityChanged">
            <summary>
            Event that is fired on a background thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            <para>This event is not fired when the evaluated include
            changes without a change in the unevaluated include.
            It is also not fired when the metadata under an item changes. </para>
            <para>Clients should expect be invoked on any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemTypesAsync">
            <summary>
            Gets the set of item types this Provider works with.
            </summary>
            <remarks>
            This collection MAY be read only.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetExistingItemTypesAsync">
            <summary>
            Returns item types that exist in the current project. This is a subset of <see cref="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemTypesAsync"/>.
            </summary>
            <returns>Item types that have at least one item in current project</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a new item to the MSBuild project.
            </summary>
            <param name="itemType">The item type for the new MSBuild item.</param>
            <param name="include">The unevaluated include value for the new item.  If no MSBuild expressions are believed to be in this value, it should be passed through <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Escape(System.String)"/> before being provided to this method.</param>
            <param name="metadata">Optional dictionary of metadata to apply to the item.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="itemType"/>
            is not one that is managed by this provider.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Adds new items to the MSBuild project.
            </summary>
            <param name="items">
            A sequence of items to add.  The tuple is made up of the item type, the (unevaluated) item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <returns>The sequence of added items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.AddAsync(System.String)">
            <summary>
            Adds an item to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="path">The absolute or project-relative path to the file to add to the project. This value will be MSBuild-escaped.</param>
            <returns>The project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.AddAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the files to add to the project. The paths will be MSBuild-escaped.</param>
            <returns>The project items actually added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.RemoveAsync(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
            <param name="itemType">The itemtype of the item to remove.</param>
            <param name="include">The name of the item to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem,Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.RemoveAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Items.IProjectItem},Microsoft.VisualStudio.ProjectSystem.Items.DeleteOptions)">
            <summary>
            Removes items from the MSBuild project.
            </summary>
            <param name="items">The items to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemsAsync">
            <summary>
            Gets all the project items that are managed by this provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemsAsync(System.String)">
            <summary>
            Gets project items that are managed by this provider of a given item type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemsAsync(System.String,System.String)">
            <summary>
            Returns an item with the given <paramref name="itemType"/> and <paramref name="evaluatedInclude"/>.
            </summary>
            <param name="itemType">The itemType to match on.  Case insensitive.</param>
            <param name="evaluatedInclude">
            The evaluated value of the Include attribute on the item.  Case insensitive.  Wildcards allowed.
            </param>
            <returns>
            All items that match the given criteria.  Never null.
            If the given <paramref name="itemType"/> is not included in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemTypesAsync"/> collection,
            the item is not sought for and an empty sequence is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.FindItemByNameAsync(System.String)">
            <summary>
            Gets any source item that matches a given evaluated name.
            </summary>
            <param name="evaluatedInclude">The evaluated item name to find.</param>
            <returns>The item, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemProvider.GetItemAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Gets the first item that matches the given context or <c>null</c> for no match.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchemaService">
            <summary>
            Central entry point for content type data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Items.IProjectItemSchemaService.GetSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the latest schema.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ForkOptions">
            <summary>
            Special treatment options for forked execution.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.Fork(System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.ForkOptions)"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.None">
            <summary>
            No special treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.SuppressRelevance">
            <summary>
            Any <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/> relevance inherited from the caller is suppressed in the fork.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.HideLocks">
            <summary>
            Any project locks not propagated to the fork.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.NoAssistanceMask">
            <summary>
            A mask of all flags that indicate that the caller does not wish to assist the fork in its execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnMainThread">
            <summary>
            Ensures that the fork begins execution on the main thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnThreadPool">
            <summary>
            Ensures that the fork begins execution on a threadpool thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.CancelOnUnload">
            <summary>
            Allows not executing the delegate if the project context is being disposed of before it would otherwise start execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.IsCriticalTask">
            <summary>
            Registers the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/> with
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterCriticalAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)"/>
            rather than
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)"/>.
            When this flag is set, a project context must be supplied.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.Default">
            <summary>
            The recommended behaviors for fire and forget forked execution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IThreadHandling">
            <summary>
            Describes a CPS service that can apply various threading techniques depending on the threading model CPS is running in.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.JoinableTaskContext">
            <summary>
            Gets the joinable task context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.AsyncPump">
            <summary>
            Gets the AsyncPump instance for the importing service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.IsOnMainThread">
            <summary>
            Gets a value indicating whether the caller is on the Main thread of the host app.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.SwitchToUIThread(System.Runtime.CompilerServices.StrongBox{System.Boolean})">
            <summary>
            Gets an awaitable whose completion will execute on the UI thread, mitigating deadlocks and unwanted reentrancy.
            </summary>
            <param name="yielded">If provided, a value set to <c>true</c> if the caller was not previously on the UI thread.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.ExecuteSynchronously(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes some work synchronously.  When executed on the UI thread, allowing for related work to come back to the UI thread.
            </summary>
            <param name="asyncAction">The delegate to execute.</param>
            <example>
            ThreadHandling.ExecuteSynchronously(async delegate {
                // Still on UI thread.
                await SomeWorkAsync();
                // Still on UI thread
                await Task.Run(() => /*background thread work*/);
                // Still on UI thread
            });
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.ExecuteSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes some work synchronously.  When executed on the UI thread, allowing for related work to come back to the UI thread.
            </summary>
            <typeparam name="T">The type of value returned by <paramref name="asyncAction"/></typeparam>
            <param name="asyncAction">The delegate to execute.</param>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.VerifyOnUIThread">
            <summary>
            Throws an exception if not called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IThreadHandling.Fork(System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.Designers.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.ForkOptions)">
            <summary>
            Executes the specified delegate in a safe fire-and-forget manner.
            </summary>
            <param name="asyncAction">The async delegate to invoke. It is invoked asynchronously with respect to the caller.</param>
            <param name="factory">The factory to use for creating the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/>. May be <c>null</c> to use the default.</param>
            <param name="unconfiguredProject">The unconfigured project which the delegate operates on, if applicable. Optional if <paramref name="configuredProject"/> is specified.</param>
            <param name="configuredProject">The configured project which the delegate operates on, if applicable.</param>
            <param name="watsonReportSettings">Whether and how non-fatal Watson reports are filed when the delegate fails.</param>
            <param name="faultSeverity">Suggests to the user how severe the fault is if the delegate throws.</param>
            <param name="options">Influences the environment in which the delegate is executed.</param>
            <remarks>
            The delegate is executed in the same context as the caller unless either <see cref="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnMainThread"/> or <see cref="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnThreadPool"/> are specified.
            For example if the caller is on the main thread, the delegate is invoked on the main thread.
            If the caller is on a threadpool thread, the delegate will also be invoked on the threadpool.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectInternalServices">
            <summary>
            Gets internal services of the UnconfiguredProject scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectInternalServices.VsUnconfiguredProjectIntegrationService">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Designers.IVsUnconfiguredProjectIntegrationService"/> service instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices">
            <summary>
            An interface that provides access to common unconfigured project scoped services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ActiveConfiguredProjectSubscription">
            <summary>
            Provides cross-sectional views of the project's evaluation and post design-time build states.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ActiveConfiguredProjectProvider">
            <summary>
            Gets the active configured project provider.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ProjectAsynchronousTasks">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ProjectConfigurationsService">
            <summary>
            Gets the project configurations service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.HostObject">
            <summary>
            Gets a host-specific object associated with this configured project.
            </summary>
            <value>May be null if this service is not available for this project.</value>
            <remarks>
            Inside Visual Studio, this object implements IVsProject and IVsHierarchy.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation">
            <summary>
            Describes the critical project operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.None">
            <summary>
            Indicates no operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Build">
            <summary>
            Indicates build operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Save">
            <summary>
            Indicates project save operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Rename">
            <summary>
            Indicates project rename operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Unload">
            <summary>
            Indicates project unload operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker">
            <summary>
            This type matches the definition of its corresponding interop type from
            Microsoft.VisualStudio.Image.Interop.14.0.DesignTime, and was created to
            facilitate high performance comparison.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Guid">
            <summary>
            Gets the GUID for the image moniker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Id">
            <summary>
            Gets the ID for the image moniker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.op_Equality(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Overrides the == operator to perform a value equality check.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.op_Inequality(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Overrides the != operator to perform a value inequality check.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Equals(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute">
            <summary>
            Specify the scope and constraints of a project system MEF contract.
            </summary>
            <remarks>
            When this attribute is applied to a type or member and <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractType"/> is <c>null</c>
            its default value should be considered to be the type identity that would be determined by MEF.
            When this attribute is applied to an assembly and <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractType"/> is <c>null</c>
            its default value should be considered to be *TODO*.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope,Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractType">
            <summary>
            Gets or sets the type identity of this contract.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractName">
            <summary>
            Gets or sets an explicit name of this contract, when applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Provider">
            <summary>
            Gets or sets a value indicating who may export this contract.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Scope">
            <summary>
            Gets or sets the deepest MEF scope where this contract may be exported.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Cardinality">
             <summary>
             Gets or sets a description of the number of exports an import site should be prepared for.
             </summary>
             <remarks>
             When <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Provider"/> is set to <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Host"/> or
             <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.System"/> the default value for this property is
             <see cref="F:Microsoft.VisualStudio.Composition.ImportCardinality.ExactlyOne"/>;
             otherwise the default is <see cref="F:Microsoft.VisualStudio.Composition.ImportCardinality.ZeroOrMore"/>.
            
             If <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Provider"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Extension"/>
             then this property MUST be set to <see cref="F:Microsoft.VisualStudio.Composition.ImportCardinality.ZeroOrMore"/>.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider">
            <summary>
            Identifies possible exporters of a project system MEF contract.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.System">
            <summary>
            The contract is provided exclusively by the core project system.
            Third parties should not export this contract.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Host">
            <summary>
            The contract is provided by the project system host.
            Exports of these contracts are often mandatory for full project system functionality.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Extension">
            <summary>
            Third parties may export this contract.
            A default may also be provided by the core project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Private">
            <summary>
            A private contract for certain features only. An extension should not use it unless they define the contract.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope">
            <summary>
            Identifies the MEF scopes into which project system contracts may be exported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope.ProjectService">
            <summary>
            The global scope that is shared across all projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope.UnconfiguredProject">
            <summary>
            A unique scope for each loaded project.
            For example SomeUserProject.csproj and SomeOtherProject.csproj would have unique instances of this scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope.ConfiguredProject">
            <summary>
            A unique scope for each loaded project configuration.
            For example SomeUserProject.csproj may have a Debug and a Release configuration, each of which would unique
            instances of this scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleAwareProjectProperties">
            <summary>
            Project property accessor that may take into account the Rule from which it came.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleAwareProjectProperties.SetRuleContext(Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Provides the Rule that will be driving this instance.
            </summary>
            <param name="rule">A Rule behind the construction of this instance.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectExtensions">
            <summary>
            Visual Studio specific project extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectExtensions.GetUserPropertiesAsync">
            <summary>
            Gets a dictionary of properties.
            </summary>
            <returns>A task whose result is the map of properties.</returns>
            <remarks>
            Values in this dictionary are persisted in the project file under Project/ProjectExtensions/VisualStudio/UserProperties as @key="value" attributes.
            Keys and values are automatically XML encoded so that any non-empty key and non-null value may be stored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectExtensions.SetUserPropertiesAsync(System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Sets the map of properties on the project.
            </summary>
            <param name="properties">A map of properties.</param>
            <returns>A task that completes when the async operation has completed.</returns>
            <remarks>
            Values in this dictionary are persisted in the project file under Project/ProjectExtensions/VisualStudio/UserProperties as @key="value" attributes.
            Keys and values are automatically XML encoded so that any non-empty key and non-null value may be stored.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitions">
            <summary>
            A snapshot of additional rule definitions defined in a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitions.AdditionalRuleDefinitionsFromFiles">
            <summary>
            Gets the additional rule definitions for this project.
            </summary>
            <returns>The map of additional rule definitions (key: path, value: context) to apply to the project.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitions.AdditionalRuleDefinitions">
            <summary>
            Gets the additional rule definitions for this project.
            </summary>
            <returns>The map of additional rule definitions (key: rule, value: context) to apply to the project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IContextUpdatingRule">
            <summary>
            An interface applied to "DM2" property objects (such as IRule and IProperty)
            that wish to receive notifications when item types or names have changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextUpdatingRule.OnItemIdentityChanged(System.String,System.String,System.String,System.String)">
            <summary>
            Invoked to notify this instance that an item type and/or item name has changed.
            </summary>
            <param name="oldItemType">The old item type.</param>
            <param name="oldItemName">The old item name.</param>
            <param name="newItemType">The new item type.</param>
            <param name="newItemName">The new item name.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider">
            <summary>
            Components implementing this interface will provide a property storage data source
            </summary>
            <remarks>
            Implementers of this interface should export metadata with key "Name" to identify the property storage medium.
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetCommonProperties(Microsoft.Build.Execution.ProjectInstance)">
            <summary>
            Get "project level" properties.
            </summary>
            <param name="projectInstance">The project instance from which to read properties.</param>
            <returns>Collection of common properties "PropertyGroup" section in msbuild</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetItemTypeProperties(Microsoft.Build.Execution.ProjectInstance,System.String)">
            <summary>
            Get properties specific to a given item type.
            </summary>
            <param name="projectInstance">The project instance from which to read properties.</param>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <returns>Collection of properties common for all MSBUILD items from given type (ItemDefinitionGroup section)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetItemProperties(Microsoft.Build.Execution.ProjectInstance,System.String,System.String)">
            <summary>
            Get properties specific to a given item.
            </summary>
            <param name="projectInstance">The project instance from which to read properties.</param>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <param name="itemName">The evaluated include on the project item to match, if selected.</param>
            <returns>Collection of properties from item's metadata</returns>
            <remarks>
            The item must be present in the project file itself -- not imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetItemProperties(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Get properties specific to a given item.
            </summary>
            <param name="taskItem">The project instance item from which to read properties.</param>
            <returns>Collection of properties from item's metadata</returns>
            <remarks>
            The item must be present in the project file itself -- not imported.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties">
            <summary>
            Reads and writes properties in a specific context as opposed to the entire project.
            A context is defined by an MSBuild file.
            </summary>
            <remarks>
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.IsDefinedInContextAsync(System.String)">
            <summary>
            Retruns true if and only if there is at least one true-evaluating  definition of
            the property in the current context.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> True if and only if it is defined in context. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.GetPropertyValueInContextAsync(System.String,System.String)">
            <summary>
            Gets the value of the last true-evaluating definition of this property in a particular
            MSBuild file. If there is no true-evaluating definition of the property in the file, then
            it returns the value of the last true-evaluating definition in all of the imports before
            the insertion location of this property. The insertion location is obtained based on the
            project definition order. The notion of "before" after is defined based on the lexical order of
            an element in the logical project (i.e. the project manifest with all the imports inlined).
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <param name="groupLabel"> The label of the MSBuild group to which the property belongs to. This information is
            only used if the property doesn't already exist in context. This information is used to bookmark the insertion
            location of the property and then return the value of an immediately preceding definition.
            For a common property, it refers to the property group label whereas for an item definition metadata, it refers
            to the item definition group label. For an item metadata, this parameter is ignored since the item has to
            exist. This parameter can only be null for item properties. Empty string is allowed in all cases and refers to
            the default group (with no name). </param>
            <returns>The property, including unevaluated, evaluated and search result details.  Never <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.ComputeAllPrecedingEvaluatedDefinitionValuesAsync(System.String,System.String)">
            <summary>
            Get the values of all preceding definitions of this property (that evaluated to true during project evaluation).
            If the property is not present in this context, we use the location where it would be added according to
            project ordering specification as the bookmark.
            </summary>
            <param name="propertyName"> Name of the property. </param>
            <param name="groupName"> The label of the MSBuild group to which the property belongs to. This information is
            only used if the property doesn't already exist in context. This information is used to bookmark the insertion
            location of the property and then return the value of an immediately preceding definigion.
            For a common property, it refers to the property group label whereas for an item definition metadata, it refers
            to the item definition group label. For an item metadata, this parameter is ignored since the item has to
            exist. This parameter can only be null for item properties. Empty string is allowed in all cases and refers to
            the default group (with no name). </param>
            <returns> An ordered (evaluation order) list of (unevaluated value, evaluated value) of the preceding definitions. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.ComputeBuildMacrosAsync(System.String,System.String)">
            <summary>
            Get the list of all "build macros" i.e. the list of all properties, item metadata definition and item metadata
            that can be used to define a new value of this property. For a common property (properties in a property group),
            this is the list of all properties whose definitions occur before this property definition and whose name
            doesn't start with an underscore plus environment variables, toolset properties and global properties whose name
            doesn't start with an underscore. If there are more than one definition of a particular property, we use the
            final definition (preceding the current property). For an item definition metadata, it is the list of all properties
            in the entire project whose name doesn't start with an underscore, plus the list of item definition metadata whose
            definition occur before the property. For an item metadata, it is the list of all properties in the entire project
            which don't start with an underscore, plus the list of all item definition metadata, plus the list of all
            metadata for the same item which occur before it.
            The above rules for getting build macros result from the evaluation algorithm used by MSBuild where all properties
            are evaluated in the first pass, then all item definitions in the second pass and then items in the final pass.
            </summary>
            <param name="propertyName"> Name of the property. </param>
            <param name="groupName"> The label of the MSBuild group to which the property belongs to. This information is
            only used if the property doesn't already exist in context. This information is used to bookmark the insertion
            location of the property and then return the value of an immediately preceding definigion.
            For a common property, it refers to the property group label whereas for an item definition metadata, it refers
            to the item definition group label. For an item metadata, this parameter is ignored since the item has to
            exist. This parameter can only be null for item properties. Empty string is allowed in all cases and refers to
            the default group (with no name). </param>
            <returns> A dictionary of (unevaluated value and evaluated value) of build macros keyed by build macro name. The build macro
            name is enclosed in $() for properties and %() for metadata. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.SetPropertyValueInContextAsync(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets the unevaluated value of a property in context. If the property is not defined in context, it is created along with
            its group at the location suggested by the project definition order.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <param name="groupLabel">The label of the property group in which to set the property.</param>
            <param name="unevaluatedPropertyValue"> The value used to set the property. </param>
            <param name="dimensionalConditions"> If a new property is created, then it is attached a condition that matches with the
            current configuration. That condition is constructed based on the dimensions passed in here. For e.g. passing
            {("Configuration", "Debug"), ("Platform", "Win32")} results in a condition "'$(Configuration)|$(Platform)' == 'Debug|Win32'"</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.DeletePropertyInContextAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Equivalent to calling the other overload except that the property in context is deleted only
            if its condition matches the condition that is naturally contructable from the given dimensions.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <param name="dimensionalConditions"> If a new property is created, then it is attached a condition that matches with the
            current configuration. That condition is constructed based on the dimensions passed in here. For e.g. passing
            {("Configuration", "Debug"), ("Platform", "Win32")} results in a condition "'$(Configuration)|$(Platform)' == 'Debug|Win32'"</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet">
            <summary>
            A property sheet. The project itself is considered to be a property sheet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.UnevaluatedPath">
            <summary>
            The unevaluated full path of this property sheet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.IsSystemPropertySheet">
            <summary>
            Tells whether this is a property sheet or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.HasUnsavedChangesAsync">
            <summary>
            Gets whether the property sheet has unsaved changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetEvaluatedFullPathAsync">
            <summary>
            Gets the evaluated full path of the property sheet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetImportedSystemPropertySheetsAsync">
            <summary>
            Returns the ordered list of system property sheets imported by this property sheet. Only
            property sheets whose condition evaluated to true during project evaluation are considered.
            </summary>
            <returns> Ordered list of system property sheets. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetImportedUserPropertySheetsAsync">
            <summary>
            Returns the ordered list of user property sheets imported by this property sheet. Only
            property sheets whose condition evaluated to true during project evaluation are considered.
            </summary>
            <returns> Ordered list of the user property sheets. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetImportedPropertySheetsAsync">
            <summary>
            Returns the ordered list of system property sheets and user property sheets imported by this
            property sheet. Only property sheets whose condition evaluated to true during project
            evaluation are considered. By definition, the system property sheets occur before the user
            property sheets.
            </summary>
            <returns> Ordered list of all the property sheets (system + user). </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String)">
            <summary>
            Adds an import for a property sheet. Appends it to the end of the property sheets import group.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String,System.String)">
            <summary>
            Adds an import for a property sheet with the specific condition. Appends it to the end of the property sheets import group.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <param name="condition"> Condition to add to the new property sheet.</param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds an import for a property sheet. Appends it to the end of the property sheets import group with the given dimensional condition.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Cannot be null. </param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String)">
            <summary>
            Adds an import for a property sheet with the specified condition. Appends it to the end of the property sheets import group with the given dimensional condition.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Cannot be null. </param>
            <param name="condition"> Condition to add to the new property sheet.</param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveBeforePropertySheetAsync(System.String,System.String)">
            <summary>
            Moves an existing property sheet before another existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import before which we need to move the other import. Can contain macros. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveBeforePropertySheetAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Moves an existing property sheet before another existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import before which we need to move the other import. Can contain macros. </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Can be null. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveAfterPropertySheetAsync(System.String,System.String)">
            <summary>
            Moves an existing property sheet before after existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import after which we need to move the other import. Can contain macros. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveAfterPropertySheetAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Moves an existing property sheet before after existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import after which we need to move the other import. Can contain macros. </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Can be null. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.RemovePropertySheetAsync(System.String)">
            <summary>
            Removes all property sheets with the given name and present in a property sheets import group with no condition.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the property sheet which will be imported.  It can contains macros,
            in which case it must be identical to what was passed when it was added using AddPropertySheet(). </param>
            <returns> True, if the property sheet(s) was removed. Else, false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.RemovePropertySheetAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Removes all property sheets with the given name and present in a property sheet import group with the given dimensional condition
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the property sheet which will be imported.  It can contains macros,
            in which case it must be identical to what was passed when it was added using AddPropertySheet(). </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Cannot be null. </param>
            <returns> True, if the property sheet(s) was found. Else, false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.SaveAsync">
            <summary>
            Saves the property sheet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper">
            <summary>
            Provides a readonly, evaluated-only view of metadata.
            </summary>
            <remarks>
            This is a thread-safe class.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.properties">
            <summary>
            The internal collection used for storing the properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.PropertyKind">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.FileFullPath">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Context">
            <summary>
            See IProjectProperties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.GetPropertyValueAsync(System.String)">
            <summary>
            Gets the value of a named property/metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.GetPropertyNamesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.GetDirectPropertyNamesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#GetUnevaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#SetPropertyValueAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#DeletePropertyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#IsValueInheritedAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#DeleteDirectPropertiesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot">
            <summary>
            Provides a snapshot glance at a property's value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.PropertyName">
            <summary>
            Gets the name of the project property or item metadata.
            </summary>
            <value>A valid MSBuild property name.  Never <c>null</c> or empty.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.EvaluatedValue">
            <summary>
            Gets the evaluated value of the property.
            </summary>
            <value>The property value as evaluated by MSBuild.  Never <c>null</c>, but may be empty.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.UnevaluatedValue">
            <summary>
            Gets the unevaluated value of the property.
            </summary>
            <value>The property value as stored in the MSBuild file, after XML unescaping.  Never <c>null</c>, but may be empty.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.IsDefinedInContext">
            <summary>
            Gets a value indicating whether this property was defined in the
            context from which it was queried.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheetService">
            <summary>
            A service that provides access to property sheets in the system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheetService.GetPropertySheet(System.String)">
            <summary>
            Get the property sheet whose path is given.
            </summary>
            <param name="unevaluatedFullPath">
            The full path of the property sheet. Can contain macros.
            Passing in a null or the empty string or the manifest path retrieves the property sheet that is the
            manifest (yes, the manifest is also considered as a property sheet).
            The file need not exist.  An IPropertySheet will still be returned.
            </param>
            <returns> An object implementing <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet"/>. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheetService.GetPropertySheetByLabelAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Gets the path to a property sheet with a given value for its Label attribute on the specific Import element.
            </summary>
            <param name="projectToSearch">
            The full path of the property sheet or project to search for an import with a matching label.
            If <c>null</c> or empty, the project manifest file will be searched.
            </param>
            <param name="label">The label that must be present on the resulting property sheet's import element.</param>
            <param name="dimensionNameValuePairs">
            The conditions under which to aggressively look for the import in the event that the import doesn't appear in the evaluation model.
            </param>
            <returns>The property sheet if one is found; otherwise <c>null</c>.</returns>
            <remarks>
            The search for a matching import is NOT a recursive search in imported projects.  Only the project
            given by <paramref name="projectToSearch"/> is searched.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind">
            <summary>
            The various types of properties that exist in MSBuild files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind.PropertyGroup">
            <summary>
            A project property that appears in a PropertyGroup.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind.ItemDefinitionGroup">
            <summary>
            Item Definition metadata found in an ItemDefinitionGroup.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind.ItemGroup">
            <summary>
            Item metadata
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties">
            <summary>
            Project property collection, provides mechanism to access and modify properties from a property storage.
            Applies to project properties, item metadata and item definition metadata.
            </summary>
            <remarks>
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.Context">
            <summary>
            Gets the context under which this instance was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.FileFullPath">
            <summary>
            Gets the full path to the project file actually to be changed when writing properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.PropertyKind">
            <summary>
            Gets the kind of properties being get/set using this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetPropertyNamesAsync">
            <summary>
            Allows enumeration over all defined properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetDirectPropertyNamesAsync">
            <summary>
            Allows enumeration over all properties defined directly on an element.
            Excludes inherited or imported metadata or properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            Gets a value of a single property which is evaluated (all macros expanded) against the current
            context, or the empty string if the property does not exist.
            </summary>
            <param name="propertyName">property name</param>
            <returns>Evaluated value for a property, or the empty string if the property does not exist.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetUnevaluatedPropertyValueAsync(System.String)">
            <summary>
            Gets the "raw" value for a property - i.e. the string that is written in the file.
            </summary>
            <param name="propertyName">property name</param>
            <returns>raw property value; or <c>null</c> if the property is not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.SetPropertyValueAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets a property value.
            </summary>
            <param name="propertyName">property name</param>
            <param name="unevaluatedPropertyValue">The "raw" (unevaluated) value to set.  Cannot be null.</param>
            <param name="dimensionalConditions">propery value will be set only for the configuration context</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.DeletePropertyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            remove a property value
            equivalent to void SetPropertyValue(propertyName, propertyValue, true);
            </summary>
            <param name="propertyName">property name</param>
            <param name="dimensionalConditions">propery value will be removed only for the configuration context</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.IsValueInheritedAsync(System.String)">
            <summary>
            Check if the the property is defined in the context scope, or its value
            comes via an inheritance mechanism.
            </summary>
            <returns>True if property value is inherited.  False if it is defined in scope (or not defined at all?).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.DeleteDirectPropertiesAsync">
            <summary>
            Removes all explicit properties/metadata from a project element.
            Inherited properties will remain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider">
            <summary>
            Components implementing this interface will provide a property storage data source
            </summary>
            <remarks>
            Implementers of this interface should export metadata with key "Name" to identify the property storage medium.
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.ProjectPropertyChanging">
            <summary>
            Event that is fired when a project property has been added, removed or changed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.ProjectPropertyChangedOnWriter">
            <summary>
            Event that is fired after a project property has been added, removed or changed, on the writer thread.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.ProjectPropertyChanged">
            <summary>
            Event that is fired after a project property has been added, removed or changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.DefaultProjectPath">
            <summary>
            Gets the path to the project file, .user file, or whatever the default context is (non-property sheet)
            for this particular provider.
            </summary>
            <value>Never null or empty.</value>
            <devremarks>Dev14: make this async, as the path may be a special import which takes a project lock to calculate.</devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetCommonProperties">
            <summary>
            Get "project level" properties.
            </summary>
            <returns>Collection of common properties "PropertyGroup" section in msbuild</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetItemTypeProperties(System.String)">
            <summary>
            Get properties specific to a given item type.
            </summary>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <returns>Collection of properties common for all MSBUILD items from given type (ItemDefinitionGroup section)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetItemProperties(System.String,System.String)">
            <summary>
            Get properties specific to a given item.
            </summary>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <param name="item">The evaluated include on the project item to match, if selected.</param>
            <returns>Collection of properties from item's metadata</returns>
            <remarks>
            The item must be present in the project file itself -- not imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetProperties(System.String,System.String,System.String)">
            <summary>
            generic version of Property container for given context.
            </summary>
            <param name="file">The path to the project file or property sheet to which this context applies.</param>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <param name="item">project item if selected.</param>
            <returns>Collection of properties common for all MSBUILD items from given type (ItemDefinitionGroup section)</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs">
            <summary>
            Arguments for the project change request event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs"/> class
            for a single MSBuild property change.
            </summary>
            <param name="propertySheet">Filename of the property sheet, or null/empty if none.</param>
            <param name="propertyName">The name of the MSBuild property that has changed, cannot be null or empty string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs"/> class
            for a single MSBuild item definition change.
            </summary>
            <param name="propertySheet">Filename of the property sheet, or null/empty if none.</param>
            <param name="propertyName">The name of the MSBuild property that has changed, cannot be null or empty string.</param>
            <param name="itemType">The item type of the source, if the source is an item or item definition.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs"/> class
            for a single MSBuild item metdata change.
            </summary>
            <param name="propertySheet">Filename of the property sheet, or null/empty if none.</param>
            <param name="propertyName">The name of the MSBuild property that has changed, cannot be null or empty string.</param>
            <param name="itemInclude">The evaluated item include of the source.</param>
            <param name="itemType">The item type of the source.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.PropertyName">
            <summary>
            The name of the MSBuild property that was modified. Cannot be null or empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.PropertySheet">
            <summary>
            Filename of the property sheet, or null if none.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemInclude">
            <summary>
            The item's evaluated include, if the event is from an item, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemType">
            <summary>
            The item's type, if the event is from an item or item definition, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.PropertySheetEvent">
            <summary>
            Returns true if the event is from a property sheet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ProjectPropertyEvent">
            <summary>
            Returns true if the event is for a project property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemPropertyEvent">
            <summary>
            Returns true if the event is for an item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemDefinitionPropertyEvent">
            <summary>
            Returns true if the event is for an item definition.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider">
            <summary>
            Property pages discovery component.
            </summary>
            <remarks>
            Rename to IProjectCatalogSnapshotService and move to Designers namespace.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider.GetCatalogAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the catalog of the given name.
            </summary>
            <param name="name">The context name used to identify the catalog of pages to work with.  Typically one of: PropertySheet, Project, File, BrowseObject, or String.Empty.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The catalog of the given name - including the "all contexts" entries, or the catalog of only "all contexts" entries if the name is not recognized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider.GetCatalogsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a map of all catalogs indexed by their names.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary where the keys are names of catalogs and the values are the catalogs.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider.GetMemoryOnlyCatalog(System.String)">
            <summary>
            Gets a catalog for the specified context, that only contains rules added to this service as instances (not file paths).
            </summary>
            <param name="context">The context of the catalog to return. For example: "ProjectFile" or "PropertySheet".</param>
            <returns>A catalog. May be empty, but not null.</returns>
            <remarks>
            The catalog returned here does *not* include rules from the project file.
            This method is synchronous so that it can satisfy catalog demands from code-generated rule properties,
            which may have "fallback" rules to load on-demand without an asynchronous code path.
            Async code paths in this case are incompatible because the code generated rule properties often run
            within the context of an upgradeable read or write lock, which do not permit running async code synchronously.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext">
            <summary>
            Captures the context needed to read properties from a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.IsProjectFile">
            <summary>
            Returns true if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.File">
            <summary>
            Gets the full path to the project file or property sheet the properties are stored in.
            </summary>
            <value>An absolute path; never <c>null</c>.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemType">
            <summary>
            Gets the  type whose definition (if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/> is null)
            stores the properties or (if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/> is not null) the
            item type of the specific item that stores the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName">
            <summary>
            Gets the evaluated include value of the item.
            Null indicates an item type definition stores the properties,
            or project properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument">
            <summary>
            Represents an argument to a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
            <remarks>
            Functionally, it is simply a reference to another <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.PropertyName">
            <summary>
            Name of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> this argument refers to.
            </summary>
            <remarks>
            Its value must point to a valid <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>. This field is culture invariant
            and is never null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.IsRequired">
            <summary>
            Tells if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> pointed to by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.PropertyName"/> must be defined for the definition
            of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> owning this argument to make sense.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.Separator">
            <summary>
            The string used to separate this argument value from the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> switch in the command line.
            </summary>
            <remarks>
            This field is culture invariant.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty">
            <summary>
            Represents a bool property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty.ReverseSwitch">
            <summary>
            Represents the logical negation of a boolean switch.
            </summary>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c>. To
            disable whole program optimization, you need to pass the ReverseSwitch, which is <c>GL-</c>.
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty.GetValueAsBoolAsync">
            <summary>
            Returns the value of this property as a bool?.
            </summary>
            <remarks>
            Returns <c>null</c> if the value was not set at the data source or
            if the value at the data source cannot be converted to a bool value using <c>System.Convert.ToBoolean(object)</c>
            method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty.SetValueAsBoolAsync(System.Nullable{System.Boolean})">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory">
            <summary>
            Represents a category to which an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> can belong to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
            <remarks>
            This field is culture invariant.
            This field will never return null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.DisplayName">
            <summary>
            The UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
            <remarks>
            The value returned by this field is generally localized. However, when the value of this field is not set
            (e.g. in the XAML property page), it is initialized to the (non-localized) value of <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Name"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Description">
            <summary>
            The (localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Subtype">
            <summary>
            Subtype of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>. Is either <c>Grid</c> (default) or <c>CommandLine</c>.
            </summary>
            <remarks>
            It helps the UI display this category in an appropriate form. E.g. non command line category
            properties are normally displayed in the form of a property grid.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.HelpString">
            <summary>
            (Localized) help information for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>. Maybe used to specify a help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Schema">
            <summary>
            The underlying schema for the category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Order">
            <summary>
            Defines the order of the category as it apears under property page viewer
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource">
            <summary>
            Represents a property persistence - ItemType and type of file where it is stored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.Persistence">
            <summary>
            The storage location for this data source.
            </summary>
            <remarks>
            This field is mandatory and is culture invariant.
            The string value for this property should be one that is understood by an IProjectPropertiesProvider
            component. Current accepted values are <c>ProjectFile</c>
            and <c>UserFile</c>. <c>ProjectFile</c> causes the property value to be writted to and read from
            the project manifest file or the property sheet (depending on which node in the solution explorer/property manager
            window is used to spawn the property pages UI). <c>UserFile</c> causes the property value to be written to and
            read from the .user file.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.PersistedName">
            <summary>
            Gets the property name as it is actually persisted to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.SourceType">
            <summary>
            The data type of the source.  Generally one of <c>Item</c>, <c>ItemDefinition</c>, or <c>Property</c>.  Among other things
            this governs how the data is treated during build.
            </summary>
            <example>
            A value of <c>Item</c> for this property indicates that this property is actually
            an item array - the list of all items with the item type specified by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.ItemType"/>.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.SourceOfDefaultValue">
            <summary>
            Gets a value indicating where the default value for this property can be found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.Label">
            <summary>
            The label of the MSBuild property group/item definition group to which
            a property/item definition metadata belongs to. Default value is the
            empty string.
            </summary>
            <example> A VC++ property that exists in the project manifest
            in the MSBuild property group with label <c>Globals</c> would have this
            same value for this field. </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.ItemType">
            <summary>
            If the property owning this data source is an item definition metadata or item metadata, this field
            specified the item type of the item definition or the item, respectively. For common properties
            this field must not be set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.HasConfigurationCondition">
            <summary>
            Indicates if a property is configuration-dependent as indicated by the presence of a configuration
            condition attached to the property definition at its persistence location.
            </summary>
            <remarks>
            This field is optional and has the default value of <c>true</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.GetPersistedFileAsync">
            <summary>
            Gets the path to the file where a new property value would be written.
            </summary>
            <value>A full path to a file on the filesystem.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue">
            <summary>
            Represents an admissible value of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>. This field is culture invariant and is never null
            or the empty string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.DisplayName">
            <summary>
            The (localized) UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Description">
            <summary>
            (Localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.HelpString">
            <summary>
            (Localized) help information for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>. May contain a help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Switch">
            <summary>
            When the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> represents a tool parameter, each possible value for
            this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> can have an associated switch representation. This field
            represents that information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.SwitchPrefix">
            <summary>
            When the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> represents a tool parameter, each possible value for
            this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> can have an associated switch prefix representation. This field
            represents that information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.IsDefault">
            <summary>
            Tells if this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> is the default value for the associated
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Arguments">
            <summary>
            List of arguments for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty">
            <summary>
            Represents an enumeration property.
            </summary>
            <remarks> The input for the setter for the Value property can be an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> or
            the (string) <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Name"/> of one of the elements of <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetAdmissibleValuesAsync"/>.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetAdmissibleValuesAsync">
            <summary>
            The list of possible values for this property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetValueAsIEnumValueAsync">
            <summary>
            Returns the value of this property as a IEnumValue. Returns "null" if the value was not set at the data source or
            if the value at the data source does not correspond to the name of any element of <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetAdmissibleValuesAsync"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.SetValueAsIEnumValueAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue)">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty">
            <summary>
            Represent an integer property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MinValue">
            <summary>
            Minimum allowed value for this property. It returns null when this property is not set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MaxValue">
            <summary>
            Maximum allowed value for this property. It returns null when this property is not set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.GetValueAsIntAsync">
            <summary>
            Returns the value of this property as an int?. Returns "null" if the value was not set at the data source
            if the value at the data source cannot be converted to an int value using <c>System.Convert.ToInt32(object)</c>
            method. The setter throws an exception if the value is not within range as defined by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MinValue"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MaxValue"/>, assuming one or both are defined.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.SetValueAsIntAsync(System.Nullable{System.Int32})">
            <summary>
            Sets the value of this property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty">
            <summary>
            A property that supports the concept of EvaluatedValue and UnevaluatedValue. For example,
            $(ProgramFiles) might be the UnevaluatedValue whereas the EvaluatedValue might be @"C:\Program Files".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.InheritingToken">
            <summary>
            Gets the token that can be included in the unevaluated property value
            in order to include the inherited value in a locally defined value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetUnevaluatedValueAtEndAsync">
            <summary>
            The unevaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> obtained by evaluating the entire project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetEvaluatedValueAtEndAsync">
            <summary>
            The evaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> obtained by evaluating the entire project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetUnevaluatedValueAsync">
            <summary>
            The unevaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> as present at the data source location.
            The getter returns null if the value is uninitialized at the data source. The setter
            throws an exception if the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsReadOnly"/> property is set. No validation of any kind is
            done while getting or setting the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetEvaluatedValueAsync">
            <summary>
            The evaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> as present at the data source location.
            The getter returns null if the value is uninitialized at the data source. Validation is done for get or set
            to ensure that it is of the proper type. No validation of any kind is done in the getter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.SetUnevaluatedValueAsync(System.String)">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.ComputeAllPrecedingEvaluatedDefinitionValuesAsync">
            <summary>
            Get the values of all preceding definitions of this property (that
            evaluated to true during project evaluation).
            </summary>
            <returns> A evaluation-ordered list of (unevaluated value, evaluated value) of the preceding definitions. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.ComputeBuildMacrosAsync">
            <summary>
            Get the list of all "build macros" i.e. the list of all properties, item metadata definition and item metadata
            that can be used to define the value of this property. For a common property (properties in a property group),
            this is the list of all properties whose definitions occur before this property definition and whose name
            doesn't start with an underscore. If there are more than one definition of a particular property, we use the
            final definition before the current property. For an item definition metadata, it is the list of all properties
            in the entire project whose name doesn't start with an underscore, plus the list of item definition metadata whose
            definition occur before the property. For an item metadata, it is the list of all properties in the entire project
            which don't start with an underscore, plus the list of all item definition metadata, plus the list of all
            metadata for the same item which occur before it.
            The above rules for getting build macros follow the evaluation method used by MSBuild where all properties
            are evaluated in the first pass, then all item definitions in the second pass and then items.
            </summary>
            <returns> A list of macroName and its (unevaluated value, evaluated value). </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty">
            <summary>
            Represents an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> property.
            </summary>
            <remarks>
            Supplies read-only schema information as well as allows read-write access to its value from the
            property's data source.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
            <remarks>
            This field is culture invariant and is never null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DisplayName">
            <summary>
            The UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
            <remarks>
            The value returned by this field is generally localized. However, when the value of this field is not set
            (e.g. in the XAML property page), it is initialized to the (non-localized) value of <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Name"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Description">
            <summary>
            (Localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword">
            <summary>
            The keyword that is used to open the help page for this property.
            </summary>
            <remarks>
            This form of specifying help takes precedence over <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/> + <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/>.
            This field is optional and is culture insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl">
            <summary>
            The URL of the help page for this property that will be opened when the user hits F1.
            </summary>
            <remarks>
            This property is higher in priority that <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/> + <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/>
            (i.e., these two properties are ignored if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>
            is specified), but lower in priority than <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword"/>.
            This field is optional and is culture insensitive.
            </remarks>
            <example> <c>ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.VisualStudio.v80.en/dv_vstoc/html/06ddebea-2c83-4a45-bb48-6264c797ed93.htm</c> </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile">
            <summary>
            The help file to use when the user hits F1. Must specify <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/> along with this.
            </summary>
            <remarks>
            This property goes along with <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/>. <seealso cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/>. This
            form of specifying the help page for a property takes lower precedence than both <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>.
            This field is optional and is culture insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext">
            <summary>
            The help context to use when the user hits F1. Must specify <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/> along with this.
            </summary>
            <remarks>
            This property uses the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/> property to display the help context of the specified
            help file. This field is optional. This
            form of specifying the help page for a property takes lower precedence than both <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Category">
            <summary>
            The name of the category to which this property belongs to.
            </summary>
            <remarks>
            The category refers to an
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/> contained in the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. This field is
            culture invariant and is never null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Subcategory">
            <summary>
            The sub category to which this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsReadOnly">
            <summary>
            Tells if this property is a read-only property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Switch">
            <summary>
            The switch representation of this property for the case when this property represents a tool parameter.
            </summary>
            <remarks>
            This field is culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c>.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.SwitchPrefix">
            <summary>
            The prefix for the switch representation of this property for the case when this property represents a tool parameter.
            </summary>
            <remarks>
            The value specified here overrides the value specified for the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>'s <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.SwitchPrefix"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c> and its
            switch prefix (inherited from the parent <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.SwitchPrefix"/> since it is not overriden by <c>WholeProgramOptimization</c>)
            is <c>/</c>. Thus the complete switch in the command line for this property would be <c>/GL</c>
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Separator">
            <summary>
            The token used to separate a switch from its value or, when a switch has multiple values, one value from another.
            </summary>
            <remarks>
            The value specified here overrides the value specified for the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>'s <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Separator"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            Example: Consider <c>/D:WIN32</c>. In this switch and value representation, ":" is the separator since its separates the switch <c>D</c>
            from its value <c>WIN32</c>.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Visible">
            <summary>
            A hint to the UI client telling it whether to display this property or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IncludeInCommandLine">
            <summary>
            A hint to the command line constructor whether to include this property in the command line or not.
            </summary>
            <remarks>
            Some properties are used only by the targets and don't want to be included in the command line.
            Others (like task parameters) are included in the command line in the form of the switch/value they emit.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DefaultValue">
            <summary>
            The default value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> not captured by the primary fields.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Arguments">
            <summary>
            List of arguments for this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.ValueEditors">
            <summary>
            The list of possible values for this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.ContainingRule">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> which contains this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DataSource">
            <summary>
            The data source where the current value of this property is stored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Context">
            <summary>
            Gets the property context that this rule reads from and writes to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync">
            <summary>
            Gets the value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> as present at the data source location.
            </summary>
            <remarks>
            <para>
            The getter returns null if the value is uninitialized at the data source. The setter
            throws an exception if the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsReadOnly"/> property is set. The actual type
            of the value passed to the setter can be anything as long as it can be converted to
            the most specific type using <c>System.Convert.ToXxx(object)</c> method.
            </para>
            <para> This is the only property in this class that is not a schema related information. </para>
            <para> If a class implements the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> in addition to this interface, this property
            is assumed to return the evaluatedValue but set the unevaluatedValue. </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.SetValueAsync(System.Object)">
            <summary>
            Sets the value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetDisplayValueAsync">
            <summary>
            A UI friendly string representation of the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsDefinedInContextAsync">
            <summary>
            Gets a value indicating whether the value of this property was defined
            locally for the context this property was created within, as opposed to a value
            inherited from an import or item definition group.
            </summary>
            <example> For a ClCompile item (foo.cpp), the "Optimization" property is inherited from
            the ClCompile group properties if it is not explicitly set. The value of the below property
            will be <c>false</c> in such a case and <c>true</c> it it is explicitly set. </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsValidValueAsync(System.Object)">
            <summary>
            Checks whether a given user-entered string is a valid value for this property.
            </summary>
            <param name="userSuppliedValue">The string the user entered into the property value field.</param>
            <returns>The validity and error message where applicable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DeleteAsync">
            <summary>
            Deletes the property definition from its data source.
            </summary>
            <remarks>
            The property definition is only deleted from the context the
            property is expected to appear within.
            If this property is defined locally, the local definition is deleted and
            the inherited value (if any) defines the property.
            If this property is inherited, the inherited definition is not deleted.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IsValidValueResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsValidValueAsync(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IsValidValueResult.IsValid">
            <summary>
            Gets or sets a value indicating the validity of the user input.
            </summary>
            <value>True if the user-supplied value is a valid value for this property.  False otherwise.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IsValidValueResult.ErrorMessage">
            <summary>
            Gets or sets a human-meaningful description of the error that occurred if applicable and available.
            This MAY be null even if false is returned if no useful message can be produced for the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup">
            <summary>
            Holds a collection of all <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>s belonging to a category. There is a
            one-one correspondence between an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> and an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            Note that it is possible for a property group to have no properties at all, depending
            on how the corresponding XAML schema was defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup.Category">
            <summary>
            The common category to which all <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>s in this bucket belong to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup.Properties">
            <summary>
            The collection of all <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>s in the containing <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> that
            belong to this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>'s <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup.Category"/>. Is never null. But can be
            empty.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService">
            <summary>
            Property pages discovery component.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.AdditionalRuleDefinitions">
            <summary>
            Gets the current set of additional rule definitions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.AddRuleDefinition(System.String,System.String)">
            <summary>
            Adds a rule definition to the project as it is currently loaded (without touching the project file for a persistent change).
            </summary>
            <param name="path">The path to the rule file.  May be absolute or relative to the project file.</param>
            <param name="context">The context to apply to this rule.</param>
            <returns>A value indicating whether this rule was actually added; <c>false</c> if the rule was already added.</returns>
            <remarks>
            This method may be called multiple times with the same rule.  The value of the <paramref name="context"/> parameter
            included with the last method call takes precedence.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.AddRuleDefinition(Microsoft.Build.Framework.XamlTypes.Rule,System.String)">
            <summary>
            Adds a rule definition to the project as it is currently loaded (without touching the project file for a persistent change).
            </summary>
            <param name="rule">Rule to add</param>
            <param name="context">The context to apply to this rule.</param>
            <returns>A value indicating whether this rule was actually added; <c>false</c> if the rule was already added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.RemoveRuleDefinition(System.String)">
            <summary>
            Removes a rule definition from the in-memory list of rules to add to the project.
            </summary>
            <param name="path">The path to the rule file.  May be absolute or relative to the project file.</param>
            <returns>A value indicating whether this rule was actually removed; <c>false</c> if no matching rule definition was found to remove.</returns>
            <remarks>
            This method does NOT remove a rule definition from the project file itself.
            It only affects in-memory additions made using the AddRuleDefinition method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.RemoveRuleDefinition(Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Removes a rule definition from the in-memory list of rules to add to the project.
            </summary>
            <param name="rule">The rule to the rule file.  May be absolute or relative to the project file.</param>
            <returns>A value indicating whether this rule was actually removed; <c>false</c> if no matching rule definition was found to remove.</returns>
            <remarks>
            This method does NOT remove a rule definition from the project file itself.
            It only affects in-memory additions made using the AddRuleDefinition method.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog">
            <summary>
            Property pages discovery component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetPropertyPagesSchemas">
            <summary>
            Return all available schemas.
            </summary>
            <returns>collection of schema names</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetProjectLevelPropertyPagesSchemas">
            <summary>
            Returns all available schemas that apply to the project-level properties,
            such as MSBuild project properties and item definition metadata.
            </summary>
            <returns>A collection of rule names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetPropertyPagesSchemas(System.String)">
            <summary>
            Return all schemas with data source associated to a given item type.
            </summary>
            <param name="itemType">MSBuild item type, for project generic properties pass null</param>
            <returns>collection of schema names</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetPropertyPagesSchemas(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return all schemas generated by the xaml files in the given paths.
            </summary>
            <param name="paths"> A list of absolute paths to xaml files.</param>
            <returns>collection of schema names</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetSchema(System.String)">
            <summary>
            Gets the schema with the given name.
            </summary>
            <param name="schemaName">The name of the rule to retrieve.</param>
            <returns>A rule, or <c>null</c> if no match is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,System.String,System.String,System.String)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="file">The path to the project or property sheet to which the desired context applies.  Null to use the default project file.</param>
            <param name="itemType">The item type of the context, if applicable.</param>
            <param name="itemName">include part of MSbuild item definition</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="context">the context to bind to.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,Microsoft.Build.Execution.ProjectInstance,System.String,System.String)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="itemType">The item (definition) from which to read metadata.  May be null.</param>
            <param name="itemName">The item from which to read metadata.  May be null.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,Microsoft.Build.Execution.ProjectInstance,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="taskItem">The backing task item to get read-only properties from.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule">
            <summary>
            Used to represent both the schema information and instance information for a Custom Build Rule,
            a Tool, a PropertyPage, ItemProperties, etc. The schema information is sourced from a
            Microsoft.VisualStudio.Project.PropertyPages.Schema.Rule
            object which, in turn, gets its data from a XAML file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            <list type="bullet">
            <item><description> This field is never null or empty. </description></item>
            <item><description> This field is culture invariant. </description></item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.DisplayName">
            <summary>
            The (localized) UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Description">
            <summary>
            The (localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.HelpString">
            <summary>
            (Localized) help information for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. Maybe used to specify a help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.PageTemplate">
            <summary>
            The UI renderer template used to display this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. The value of this
            property is assumed to be recognized by an existing or a custom renderer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.SwitchPrefix">
            <summary>
            It defines the character that is a prefix to the switches passed to this tool.
            </summary>
            <example> For the command line "foo.exe /s1:val1 /s2:val2", "/" is the SwitchPrefix. </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Separator">
            <summary>
            It defines the character that seperates the values from the switch names.
            </summary>
            <example> For the command line "foo.exe /s1:val1 /s2:val2", ":" is the Separator. </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Categories">
            <summary>
            The list of categories the various properties in this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> belong to.
            The list includes categories that are directly and indirectly specified in the schema file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Schema">
            <summary>
            The underlying schema instance (Rule). Note that only one
            Rule instance exists per XAML file which is shared by multiple
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> instances.
            </summary>
            <remarks> This reference can be useful to find the intersection of property pages of more than one items/projects/... </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Order">
            <summary>
            Rule order it can be used to define the order different rules shows in propery page viewer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.File">
            <summary>
            Gets the path to the property sheet to use as the context; or <c>null</c> if the default file context should be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.ItemType">
            <summary>
            Gets the item type of the context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.ItemName">
            <summary>
            Gets the name of the item in context, if applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.PropertyGroups">
            <summary>
            List of categorized property buckets. The order of these groups is the same as the order
            of categories specified in the schema file. Note that it is possible for a property
            group to have no properties in it at all, depending on how the corresponding XAML schema was
            defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Properties">
            <summary>
            Gets all the properties in this rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Context">
            <summary>
            Gets the property context that this rule reads from and writes to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.PropertyPagesHidden">
            <summary>
            Should a property page be hidden for this rule or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Item(System.String)">
            <summary>
            Gets the unique <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup"/> corresponding to an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the input parameter does not refer to a valid <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/> in this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.GetProperty(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> for a particular property contained by this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            Returns null if the property is not contained.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> if it exists, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.GetPropertyValueAsync(System.String)">
            <summary>
            Gets the (evaluated) value for the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>A task whose result is the property value. If the property is not defined by this rule, an empty string is the result.</returns>
            <remarks>
            This method serves as a memory optimization over calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.GetProperty(System.String)"/>
            followed by <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync"/> or <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetEvaluatedValueAtEndAsync"/>
            as that sequence allocates several more objects than this method does.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty">
            <summary>
            Represents a list-of-strings property.
            </summary>
            <remarks> The value passed to the setter of the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync"/> property must
            be of type ReadOnlyCollection-string or it must be the string formed
            from concatenating the string elements using the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.RendererValueSeparator"/> string.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.Subtype">
            <summary>
            Similar to the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.Subtype"/> property. Every string in the
            string list is assumed to have the same Subtype.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.CommandLineValueSeparator">
            <summary>
            For <c>Val1;Val2;Val3</c>, if CommandLineValueSeparator is specified (=”,”),
            the command line looks like this: /p:val1,val2,val3
            If not specified, the command line looks like this: /p:val1 /p:val2 /p:val3
            Optional.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.RendererValueSeparator">
            <summary>
            Specified how the property gets parsed when read from the project file and how it gets saved back.
            i.e. for <c>Val1,Val2,Val3</c> the Property Value Editor UI needs to display 3 lines
            Val1
            Val2
            Val3
            In this case the RendererValueSeparator will be ","
            This is independent on how the property gets outputted on the command line, that’s why we need 2 different properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.GetValueAsStringCollectionAsync">
            <summary>
            Gets the constituent strings in the string list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty">
            <summary>
            Represents a string property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.Subtype">
            <summary>
            Qualifies this string property to give it a more specific classification. See example.
            </summary>
            <example> The value of this property can be set to "File", "Folder", "CarModel" etc. to specify
            if this is a file path, folder path, car model name etc. </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.GetValueAsStringAsync">
            <summary>
            Returns the value of this property as a string. Returns "null" if the value was not set at the data source
            if the value at the data source cannot be converted to a bool value using <c>System.Convert.ToString(object)</c>
            method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.SetValueAsStringAsync(System.String)">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException">
            <summary>
            A cancellation exception thrown when the host has rejected a file change request
            due to insufficient permissions or file lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.rejectedFiles">
            <summary>
            List of rejected files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.String,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.RejectedFiles">
            <summary>
            Gets the set of files that source control denied access to.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationChangeEventArgs">
            <summary>
            Describes a project configuration before and after a change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationChangeEventArgs.OldProjectConfiguration">
            <summary>
            Gets the old project configuration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationChangeEventArgs.NewProjectConfiguration">
            <summary>
            Gets the new project configuration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs">
            <summary>
            Arguments for the ProjectRenamed event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs.OldFullPath">
            <summary>
            The old full path to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs.NewFullPath">
            <summary>
            The new full path to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs.OtherRenamedFiles">
            <summary>
            Gets a map of old to new full paths of files that were also renamed as part of the project file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectAccess">
            <summary>
            Signifies the kind of access required on a project when obtaining a lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.None">
            <summary>
            No access is required or granted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.Read">
            <summary>
            Read-only access is required.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.Write">
            <summary>
            Write access is required. Writers may also read the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.UpgradeableRead">
            <summary>
            Read-only access is required, but write access may be required before the read lock is released.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.SkipInitialEvaluation">
            <summary>
            Skips a step to make sure that a project is initially evaluated when retrieved using <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)"/>.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.SuppressReevaluation">
            <summary>
            Suppresses MSBuild evaluation of projects while a write lock is held even if
            <see cref="M:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary"/> is called.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.StickyWrite">
            <summary>
            Causes any write lock taken within this (upgradeable read) lock to implicitly upgrade *this*
            lock, such that the write lock will not be released until *this* lock is released.
            </summary>
            <remarks>
            This is useful when a client is calling several methods that *may* require a write lock, and if so,
            you'd like to do all the work across all the methods within just one write lock rather than across
            several "top level" write locks.  The benefits of just one all-encompassing write lock include
            preventing project change event handlers from obtaining read locks and reevaluating the project
            and raising various events before the entire set of changes are fully applied.  While this is not expected
            to impact accuracy of reported events, it can help eliminate wasted CPU cycles processing changes that are
            incomplete, and keep any other threads from reading your half-updated state.
            This is superior than just taking an outer write lock when the outer code doesn't know for sure whether
            a write lock will be needed or which project files need to be "checked out" from SCC beforehand.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.LockMask">
            <summary>
            The bitmask of all kinds of locks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.OptionMask">
            <summary>
            The bitmask of non-lock type options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration">
            <summary>
            Represents a project configuration - i.e. a collection of configuration dimensions and their values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration.Name">
            <summary>
            The name of this project configuration. Is never null or empty.
            </summary>
            <remarks>
            The name is a general handle for a project configuration for human consumption - there is no guarantee that
            two project configurations of the same name are identical.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration.Dimensions">
            <summary>
            Gets the configuration dimensions contained in this project configuration.
            </summary>
            <remarks>
            Can never be null.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectException">
            <summary>
            Exception class for problems instantiating the project class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class
            for deserialization.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType">
            <summary>
            Signifies the type of rename occuring, if known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.Unknown">
            <summary>
            The type of rename is not known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.Rename">
            <summary>
            The rename event is occuring because the project's file name is changing. The old name will no longer exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.SaveAs">
            <summary>
            The rename event is occuring because the project is being saved to a new location. The old file will still exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.CaseOnly">
            <summary>
            This is a case only rename of an existing file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectService">
            <summary>
            The ProjectService represents the set of projects loaded into the same
            overall project collection so that they can be processed together, such as handling
            project-to-project references.
            </summary>
            <remarks>
            Implementing classes must be multi-threaded safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectService.LoadedUnconfiguredProjects">
            <summary>
            The set of projects that are currently loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectService.Services">
            <summary>
            Gets an accessor to the well known services and arbitrary extensions published to the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectService.ServiceCapabilities">
            <summary>
            Gets the service capabilities for this instance of CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectService.LoadProjectAsync(System.String,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Load an MSBuild project file into the engine.
            </summary>
            <param name="projectLocation">Name and path to the project file.</param>
            <param name="projectCapabilities">Extra project capabilities to inject.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectService.LoadProjectAsync(System.Xml.XmlReader,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Load an MSBuild project into the engine.
            </summary>
            <param name="reader">Xml reader version of the project data.</param>
            <param name="projectCapabilities">Extra project capabilities to inject.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectService.UnloadProjectAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Unloads the project and disposes the composition
            </summary>
            <param name="project">The unconfigured project to unload.</param>
            <remarks>
            Note that this is a ref counted object and therefore the unload only occurs when all
            who have requested a load then unload the project.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1">
            <summary>
            Describes the result of adding a reference.
            </summary>
            <typeparam name="T">The type of reference.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.Reference">
            <summary>
            Gets the added or existing reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.Added">
            <summary>
            Gets a value indicating whether the reference was actually added to the project.
            (as opposed to being detected as already present).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.op_Equality(Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0},Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0})">
            <summary>
            Returns true if result1 == result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.op_Inequality(Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0},Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0})">
            <summary>
            Returns true if result1 != result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.Equals(System.Object)">
            <summary>
            Returns true if obj equals this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.GetHashCode">
            <summary>
            Returns the hashcode for the reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyCircularProjectReferenceDetectionService">
            <summary>
            An interface to the host-specific service that detects potential circular dependencies
            between projects with build dependencies on each other.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyCircularProjectReferenceDetectionService.WouldReferenceToProjectCompleteCycleAsync(System.String)">
            <summary>
            Determines whether adding a project reference directed at a given project would introduce a circular dependency.
            </summary>
            <param name="projectPath">The absolute path to another project, a reference to which is a candidate for addition to the current project.</param>
            <returns><c>true</c> if adding a reference to this project would introduce a circular dependency; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyCircularProjectReferenceDetectionService.WouldReferenceToProjectCompleteCycleAsync(System.Guid)">
            <summary>
            Determines whether adding a project reference directed at a given project would introduce a circular dependency.
            </summary>
            <param name="projectIdentifier">The project identifier to the other project.</param>
            <returns><c>true</c> if adding a reference to this project would introduce a circular dependency; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IManifestReferenceResolver">
            <summary>
            Managed version of the IVsManifestReferenceResolver interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IManifestReferenceResolver.ResolveReferenceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to resolve a deployed manifest file reference to an absolute path on disk.
            </summary>
            <param name="reference">The reference path to resolve.</param>
            <param name="referenceToFile">The path to which the reference is relative.  If <c>null</c>, the reference path is calculated relative to the project root.</param>
            <param name="cancellationToken">The cancellation token that signals the caller has lost interest in the answer.</param>
            <returns>The resolved path or <c>null</c> if the reference could not be resolved.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IReferencesUI">
            <summary>
            Provides services for invoking the user interface that offers reference management.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IReferencesUI.IsNonEmpty">
            <summary>
            Gets a value indicating whether any context providers apply to the Reference Manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReferencesUI.ShowReferenceManagerDialog">
            <summary>
            Shows the add reference dialog and blocks until the dialog is dismissed.
            </summary>
            <remarks>
            Should only be invoked on the UI thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider">
            <summary>
            An interface that IResolvableReferencesService implementations can also implement to indicate
            they can look at a file path and add or remove a reference to it if it applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.SuggestedFileFilters">
            <summary>
            Gets the filters that should appear in an Add File Reference dialog.
            </summary>
            <value>
            A sequence of string pairs.
            The first string in a tuple is a localized caption for the filter.
            The second string in a tuple is a semicolon-delimited list of file patterns to match on.
            For example, first string "Component Files", second string: "*.dll;*.exe".
            Must never be null, but may be empty.  String values must never be null or empty.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.AddIfApplicableAsync(System.String)">
            <summary>
            Adds a reference to a given file if it applies to this project and provider.
            </summary>
            <param name="path">The path to the file to add a reference to.</param>
            <returns>
            A task whose result is the reference to the given file, if it was applicable;
            The result's reference property is <c>null</c> if the file was not applicable.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.AddFileAsync(System.String)">
            <summary>
            Adds a reference to a given file.
            </summary>
            <param name="path">The path to the file to add a reference to.</param>
            <returns>
            A task whose result is the reference to the given file.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.RemoveIfApplicableAsync(System.String)">
            <summary>
            Removes a reference that represents a given file, if it is of a matching reference type.
            </summary>
            <param name="path">The path to the file to add a reference to.</param>
            <returns>A task whose result describes the results of the removal attempt.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ISdkReference">
            <summary>
            Interface definition for resolvable SDK references.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService">
            <summary>
            This component handles the adding and removing of SDK references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            This interface is kept around to add unique assembly reference methods, and to
            facilitate factory creation of an object that will deliver just assembly references.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.AddAsync(System.String)">
            <summary>
            Creates an SDK reference and adds it to the project, or returns the existing reference if it is already present.
            </summary>
            <param name="sdkIdentity">Identity of the SDK.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.GetUnresolvedReferenceAsync(System.String)">
            <summary>
            Gets an unresolved SDK reference.
            </summary>
            <param name="sdkIdentity">The identity of the SDK.</param>
            <returns>A <see name="IUnresolvedSdkReference"/> instance for the reference with the given name, or null if no references were found with that name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.GetResolvedReferenceAsync(System.String)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            </summary>
            <returns>
            Null if the named unresolved reference could not be found or if resolving it failed.
            </returns>
            <param name="sdkIdentity">The identity of the SDK.</param>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.ExpandReferenceAsync(Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedSdkReference)">
            <summary>
            Expands an SDK reference and returns the references it contains.
            </summary>
            <param name="sdkReference">The unresolved reference to expand.</param>
            <returns>The references the SDK reference contains.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.ExpandReferenceAsync(Microsoft.VisualStudio.ProjectSystem.References.ISdkReference)">
            <summary>
            Expands an SDK reference and returns the references it contains.
            </summary>
            <param name="sdkReference">The resolved reference to expand.</param>
            <returns>The references the SDK reference contains.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.CanResolveAsync(System.String)">
            <summary>
            Tests whether an SDK reference could be resolved if it was in this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.ContainsAsync(System.String)">
            <summary>
            Tests whether an SDK reference already belongs to this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.RemoveAsync(System.String)">
            <summary>
            Attempts to remove all unresolved references with the given identity from the SDK.
            </summary>
            <param name="sdkIdentity">The from of the SDK being removed.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="sdkIdentity"/> is null or empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedSdkReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedSdkReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IWinRTReferencesService">
            <summary>
            This component handles the adding and removing of WinRT references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult">
            <summary>
            Describes the result of an attempt to remove a reference from a project by the reference file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult"/> struct.
            </summary>
            <param name="isReferenceApplicable">whether the file type matched the kind of reference this provider supports.</param>
            <param name="wasReferencePresent">whether a matching reference was found in the project.</param>
            <param name="wasReferenceRemoved">whether the matching reference was successfully removed from the project.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.IsReferenceApplicable">
            <summary>
            Gets a value indicating whether the file type matched the kind of reference this provider supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.WasReferencePresent">
            <summary>
            Gets a value indicating whether a matching reference was found in the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.WasReferenceRemoved">
            <summary>
            Gets a value indicating whether the matching reference was successfully removed from the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService">
            <summary>
            This component handles the adding and removing of .NET assembly references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            This interface is kept around to add unique assembly reference methods, and to
            facilitate factory creation of an object that will deliver just assembly references.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.AddAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Creates an assembly reference and adds it to the project, or returns the existing reference if it is already present.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <returns>
            The added unresolved reference, or the existing one if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.GetUnresolvedReferenceAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Gets the unresolved reference with the given assembly name.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <returns>
            Null if the named unresolved reference could not be found.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.GetResolvedReferenceAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <returns>
            Null if the named unresolved reference could not be found or if resolving it failed.
            </returns>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.CanResolveAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Tests whether an assembly reference could be resolved if it was in this project.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <remarks>
            This method does not require a reference to already exist in the project and does not add one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.ContainsAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Tests whether an assembly reference already belongs to this project.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.RemoveAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Attempts to remove all unresolved references with the given name from the project.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <exception cref="T:System.ArgumentException">Thrown when a matching assembly reference cannot be found to remove.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReference">
            <summary>
            Interface definition for resolvable assembly references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReference.GetSpecificVersionAsync">
            <summary>
            Gets a value indicating whether the assembly reference should match only on a specific version.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReference.IsWinMDFileAsync">
            <summary>
            Gets a value indicating whether this reference points to a WinMD file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference.GetLinkLibraryDependencyAsync">
            <summary>
            Gets a value indicating whether to link the referenced project's .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference.GetUseLibraryDependencyInputsAsync">
            <summary>
            Gets a value indicating whether to link the referenced project's individual .obj files rather than its .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference.GetSolutionIdentifierForReferencedProjectAsync">
            <summary>
            Gets the solution-assigned GUID for the referenced project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IComReference">
            <summary>
            Interface definition for resolvable COM references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetLocaleAsync">
            <summary>
            Gets the LCID on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetVersionAsync">
            <summary>
            Gets the version of a referenced COM component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetGuidAsync">
            <summary>
            Gets the GUID on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetWrapperToolAsync">
            <summary>
            Gets the name of the tool used to generate the COM interop assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetTypeLibraryNameAsync">
            <summary>
            Gets the simple type library name (lacks the "Interop." prefix and the ".1.0.dll" version and extension suffix).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetIsolatedAsync">
            <summary>
            Sets the Isolated metadata on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetControlFullPathAsync">
            <summary>
            Gets the full path to the ActiveX control's type library
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference">
            <summary>
            Interface definition for resolvable references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetCopyLocalAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to copy the referenced project's primary output to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetCopyLocalSatelliteAssembliesAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to copy the reference's satellite assemblies to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetNameAsync(System.String)">
            <summary>
            Sets the display name for the reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetReferenceOutputAssemblyAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether the assembly pointed to by this reference
            will actually be included on the command-line to the compiler.
            </summary>
            <value>
            <c>true</c> if reference the output assembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetRequiredTargetFrameworkAsync(System.String)">
            <summary>
            Sets the required target framework.
            </summary>
            <value>The required target framework.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.CanResolveAsync">
            <summary>
            Gets a value indicating whether this reference is resolvable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IReference">
            <summary>
            Interface definition for resolvable references.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetAssemblyNameAsync">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetCopyLocalAsync">
            <summary>
            Gets a value indicating whether to copy the referenced project's primary output to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetCopyLocalSatelliteAssembliesAsync">
            <summary>
            Gets a value indicating whether to copy the reference's satellite assemblies to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetNameAsync">
            <summary>
            Gets the display name for the reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetReferenceOutputAssemblyAsync">
            <summary>
            Gets a value indicating whether the assembly pointed to by this reference
            will actually be included on the command-line to the compiler.
            </summary>
            <value>
            <c>true</c> if reference the output assembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetRequiredTargetFrameworkAsync">
            <summary>
            Gets the required target framework.
            </summary>
            <value>The required target framework.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetDescriptionAsync">
            <summary>
            Gets the value of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/> that is embedded in the referenced assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetFullPathAsync">
            <summary>
            The full path to whatever will be referenced at compile/link time.
            </summary>
            <value>
            For a Project Reference, this is the primary output of the project.
            For an Assembly reference, it is the referenced .DLL file.
            For a COM reference, it is the referenced interop dll.
            For an SDK reference, it is the path to the SDK's directory.
            </value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference">
            <summary>
            Interface definition for resolvable assembly references.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.GetHintPathAsync">
            <summary>
            Gets or sets the path where the assembly is expected to be reside.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.GetSDKIdentityAsync">
            <summary>
            Gets or sets the identity of the SDK where this reference resides (valid if IsWinMDFile is true)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetAssemblyNameAsync(System.Reflection.AssemblyName)">
            <summary>
            Sets the assembly name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetIsWinMDFileAsync(System.Boolean)">
            <summary>
            Sets the IsWinMDFile metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetHintPathAsync(System.String)">
            <summary>
            Sets the HintPath metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetSDKIdentityAsync(System.String)">
            <summary>
            Sets the SDKIdentity metadata.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
            <remarks>
            This property is here to reconcile the two versions of this property that are in base interfaces.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.SetLinkLibraryDependencyAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to link the referenced project's .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.SetUseLibraryDependencyInputsAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to link the referenced project's individual .obj files rather than its .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.SetSolutionIdentifierForReferencedProjectAsync(System.Guid)">
            <summary>
            Sets the solution-assigned GUID for the referenced project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference">
            <summary>
            Interface definition for an unresolved COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference.SetLocaleAsync(System.Int32)">
            <summary>
            Gets the LCID on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference.SetWrapperToolAsync(System.String)">
            <summary>
            Gets or sets the name of the tool used to generate the COM interop assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference.SetIsolatedAsync(System.Boolean)">
            <summary>
            Sets the Isolated metadata on a COM reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService">
            <summary>
            This component handles the adding and removing of COM references to projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            This interface is kept around to add unique COM reference methods, and to
            facilitate factory creation of an object that will deliver just COM references.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.AddAsync(System.Guid,System.Version,System.Int32,System.String)">
            <summary>
            Creates a COM reference and adds it to the project.
            </summary>
            <param name="classId">The class id.</param>
            <param name="version">The version.</param>
            <param name="localeId">The locale id.</param>
            <param name="wrapperTool">The wrapper tool.</param>
            <returns>
            The added unresolved reference, or the existing one if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.AddAsync(System.String)">
            <summary>
            Creates a COM reference to the COM server found at the specified path and adds it to the project.
            </summary>
            <param name="path">The path to the COM .dll.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.CanResolveAsync(System.String)">
            <summary>
            Determines whether the project can resolve a COM reference to a COM .dll at the specified path.
            </summary>
            <param name="path">The path to the COM library.</param>
            <returns>A value indicating whether the reference could be resolved.</returns>
            <remarks>
            This method does not require a reference to already exist in the project and does not add one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.CanResolveAsync(System.Guid,System.Version,System.Int32,System.String)">
            <summary>
            Determines whether a reference to the described COM component can be resolved.
            </summary>
            <param name="classId">The classid of the COM component.</param>
            <param name="version">The version.</param>
            <param name="localeId">The LCID.</param>
            <param name="wrapperTool">The wrapper tool.</param>
            <returns>A value indicating whether the reference could be resolved.</returns>
            <remarks>
            This method does not require a reference to already exist in the project and does not add one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.RemoveAsync(System.Guid)">
            <summary>
            Attempts to remove all unresolved references with the given name from the project.
            </summary>
            <param name="classId">The class id.</param>
            <exception cref="T:System.ArgumentException">Thrown when a matching assembly reference cannot be found to remove.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult">
            <summary>
            Describes the result of resolving a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.#ctor(System.Boolean,System.Guid,System.Version,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.Success">
            <summary>
            Gets a value indicating whether the reference resolved successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.ClassId">
            <summary>
            Gets the class ID of the resolved service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.Version">
            <summary>
            Gets the version of the COM service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.LocaleId">
            <summary>
            Gets the locale of the COM service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.op_Equality(Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult,Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult)">
            <summary>
            Returns true if result1 == result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.op_Inequality(Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult,Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult)">
            <summary>
            Returns true if result1 != result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.Equals(System.Object)">
            <summary>
            Returns true if obj equals this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.GetHashCode">
            <summary>
            Returns the hashcode for the reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService">
            <summary>
            Interface definition for providing all project references representing compile-time dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.AddAsync(System.String)">
            <summary>
            Adds a project reference to the project with the specified project path.
            </summary>
            <param name="projectPath">The project path of the project to reference.  May be absolute, or relative to this project.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.GetUnresolvedReferenceAsync(System.String)">
            <summary>
            Gets an unresolved project reference.
            </summary>
            <param name="projectPath">The path to the other project.  May be absolute or relative to the current project.</param>
            <returns>A <see name="IUnresolvedBuildDependencyProjectReference"/> instance for the reference with the given name, or null if no references were found with that name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.GetResolvedReferenceAsync(System.String)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            </summary>
            <returns>
            Null if the named unresolved reference could not be found or if resolving it failed.
            </returns>
            <param name="projectPath">The path to the other project.  May be absolute or relative to the current project.</param>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.CanResolveAsync(System.String)">
            <summary>
            Tests whether a project reference could be resolved if it was in this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.ContainsAsync(System.String)">
            <summary>
            Tests whether a project reference already belongs to this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.RemoveAsync(System.String)">
            <summary>
            Attempts to remove all unresolved references with the given name from the project.
            </summary>
            <param name="projectPath">The path to the other project.  May be absolute or relative to the current project.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="projectPath"/> is null or empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2">
            <summary>
            This component handles the adding and removing of references to projects.
            </summary>
            <typeparam name="TUnresolvedReference">The interface that unresolved references will use.</typeparam>
            <typeparam name="TResolvedReference">The interface that resolved references will use.</typeparam>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetUnresolvedReferenceAsync(`1)">
            <summary>
            Gets the unresolved reference from a resolved reference. Null if resolving it failed.
            </summary>
            <param name="resolvedReference">The resolved reference.</param>
            <returns>The unresolved reference.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetUnresolvedReferencesAsync">
            <summary>
            Get the unresolved references from the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetResolvedReferencesAsync">
            <summary>
            Returns an enumerable of all resolved references.
            </summary>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            References that could not be resolved will not be included in the returned enumerable.
            If the build task that resolves references fails, an empty enumerable will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetResolvedReferenceAsync(`0)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            Null if resolving it failed.
            </summary>
            <param name="unresolvedReference">The unresolved reference.</param>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.RemoveAsync(`0)">
            <summary>
            Attempts to remove this unresolved reference from the project.
            </summary>
            <param name="reference">The resolvable reference to remove. Note that it must be part of this project instance.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the reference does not belong to this project instance or is not an unresolved resolvable reference item.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Attempts to atomically remove all given unresolved references from the project.
            </summary>
            <param name="references">The list of unresolved references to remove from the project.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject">
            <summary>
            The UnconfiguredProject represents the set of components that are available
            for a given set of project capabilities, as defined by the MSBuild project
            instance provided.
            </summary>
            <remarks>
            Implementing classes must be multi-thread safe.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectUnloading">
            <summary>
            An event raised after background tasks have completed (or timed out) but before the MEF container is disposed of.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectRenaming">
            <summary>
            Event that is fired on the writer thread when a project is renamed.
            </summary>
            <remarks>
            Clients should attach handlers to this event if they may need to make
            cascading changes as the result of the change causing this event to fire.
            Clients should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Clients should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectRenamedOnWriter">
            <summary>
            Event that is fired on the writer thread after the project is renamed.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectRenamed">
            <summary>
            Event that is fired on a background thread after the project is renamed.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.FullPath">
            <summary>
            Gets the full path of the project manifest file. Maybe null if not loaded from disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.RequiresReloadForExternalFileChange">
            <summary>
            Returns true if there has been an external change to the project file.
            </summary>
            <remarks>
            The project tracks the time it last saved the project file. If the current
            time of the project file matches its last save time, then there has not
            been an external change to the project file. We track this explicitly
            so we can avoid timing windows of when the OS fires its file change events.
            Clients like Visual Studio should ask for this property before deciding
            to prompt the user to reload the file.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.Capabilities">
            <summary>
            Gets the collection of project capabilities that apply to the unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectService">
            <summary>
            Returns the Project service that created this context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.Services">
            <summary>
            Gets an accessor to the well known services and arbitrary extensions published to this unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.LoadedConfiguredProjects">
            <summary>
            The set of configured projects that are currently loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.GetFileEncodingAsync">
            <summary>
            Gets the encoding to use for the project XML file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SetFileEncodingAsync(System.Text.Encoding)">
            <summary>
            Sets the encoding to use for the project XML file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.GetIsDirtyAsync">
            <summary>
            Returns true if the project in memory does not match the persistent copy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.LoadConfiguredProjectAsync(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Loads an instance of the project for the specified configuration.
            </summary>
            <param name="name">The name to be used for this configuration - cannot be null or empty.</param>
            <param name="configurationProperties">Name-value pairs of configuration properties to use for this configuration.  Must not be null.</param>
            <returns>The configured project evaluated to these configuration properties.</returns>
            <remarks>
            If a configured project with the same name and configuration properties has already been loaded, the same
            instance will be returned. However, the unload is still required by the caller since the load/unloads are reference counted.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.LoadConfiguredProjectAsync(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Loads an instance of the project for the specified configuration.
            </summary>
            <remarks>
            If a configured project with the same name and configuration properties has already been loaded, the same
            instance will be returned. However, the unload is still required by the caller since the load/unloads are reference counted.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.GetSuggestedConfiguredProjectAsync">
            <summary>
            Gets the suggested configured project to use at this moment, taking into account
            the active configuration, last known active configuration, any already loaded configurations,
            the default configuration for the project type, and an ultimate fallback configuration.
            </summary>
            <value>The result of the task may be null if this service is not available for this project.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.CanRenameAsync(System.String)">
            <summary>
            Checks to see if renaming this project is currently allowed.
            </summary>
            <param name="newFilePath">The new path of the project, if known.</param>
            <returns>True if the project can currently be renamed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.RenameAsync(System.String)">
            <summary>
            Renames this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SaveAsync(System.String)">
            <summary>
            Save the project file to disk.
            </summary>
            <param name="filePath">The file to save to. If null, the current project path is used.</param>
            <devremarks>
            Dev14 TODO: Remove filePath parameter, since we don't support Save As, and backups use SaveCopyAsync.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SaveCopyAsync(System.String,System.Text.Encoding)">
            <summary>
            Saves a copy of the project file without renaming the old one or switching to a new one.
            </summary>
            <param name="filePath">The full path to save the copy to.</param>
            <param name="fileEncoding">The encoding to use for the saved copy. A <c>null</c> value preserves the current encoding.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SaveUserFileAsync">
            <summary>
            Save the .user file to disk.
            </summary>
            <remarks>
            Instead of saving any changes of .user project file to disk immediately, we prefer to postpone saving until some events being fired
            to avoid the file lock contention with MSBuild; so we need to expose this method for those event handers to save .user project file explicitly.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal">
            <summary>
            Internal methods on the UnconfiguredProject objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.ReportProgressAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint)">
            <summary>
            Reports advancing to a checkpoint during project load.
            </summary>
            <param name="checkpoint">The checkpoint reached.</param>
            <returns>A task that should complete before project load proceeds further.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.RecalculateProjectCapabilitiesAsync(System.Threading.CancellationToken)">
            <summary>
            Requires project capabilities providers for the current set of project capabilities,
            without impacting the fixed set of capabilities returned by <see cref="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.Capabilities"/>.
            </summary>
            <returns>The set of capabilities that would be applied when the project next reloads.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.RenameCompanionFileAsync(System.String,System.String)">
            <summary>
            Renames a project file that is imported by this project, and updates all imports to it
            found in loaded projects.
            </summary>
            <param name="oldCompanionFileFullPath">The old full path to the individual companion file to rename.</param>
            <param name="newCompanionFilePath">The new name or path to the individual companion file.</param>
            <returns>A task that indicates completion of the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint">
            <summary>
            Describes the checkpoints of project load.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint.NotSpecified">
            <summary>
            Indicates the method's execution timing requirements are not specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint.CapabilitiesEstablished">
            <summary>
            Occurs when the project capabilities have been determined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint.InitialActiveConfigurationKnown">
            <summary>
            Occurs when the project has identified what the initial active configuration will be.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint.BeforeLoadInitialConfiguration">
            <summary>
            Occurs before the initial active configuration is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint.AfterLoadInitialConfiguration">
            <summary>
            Occurs when the initial active configuration has been loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectLoadCheckpoint.ProjectFactoryCompleted">
            <summary>
            Occurs when the project factory is about to report completion.
            </summary>
        </member>
    </members>
</doc>
