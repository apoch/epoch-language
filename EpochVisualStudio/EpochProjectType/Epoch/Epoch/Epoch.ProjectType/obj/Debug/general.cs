//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpochVS {
	
	
	internal partial class ConfigurationGeneral {
		
		/// <summary>Backing field for deserialized rule.<see cref='Microsoft.Build.Framework.XamlTypes.Rule'/>.</summary>
		private static Microsoft.Build.Framework.XamlTypes.Rule deserializedFallbackRule;
		
		/// <summary>The name of the schema to look for at runtime to fulfill property access.</summary>
		internal const string SchemaName = "ConfigurationGeneral";
		
		/// <summary>The ItemType given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
		internal const string PrimaryDataSourceItemType = null;
		
		/// <summary>The Label given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
		internal const string PrimaryDataSourceLabel = "Configuration";
		
		/// <summary> (The "ApplicationIcon" property).</summary>
		internal const string ApplicationIconProperty = "ApplicationIcon";
		
		/// <summary> (The "ProjectTypeGuids" property).</summary>
		internal const string ProjectTypeGuidsProperty = "ProjectTypeGuids";
		
		/// <summary> (The "ProjectGuid" property).</summary>
		internal const string ProjectGuidProperty = "ProjectGuid";
		
		/// <summary> (The "TargetFrameworkMoniker" property).</summary>
		internal const string TargetFrameworkMonikerProperty = "TargetFrameworkMoniker";
		
		/// <summary> (The "TargetFrameworkIdentifier" property).</summary>
		internal const string TargetFrameworkIdentifierProperty = "TargetFrameworkIdentifier";
		
		/// <summary> (The "TargetFrameworkVersion" property).</summary>
		internal const string TargetFrameworkVersionProperty = "TargetFrameworkVersion";
		
		/// <summary> (The "TargetFrameworkProfile" property).</summary>
		internal const string TargetFrameworkProfileProperty = "TargetFrameworkProfile";
		
		/// <summary> (The "TargetPath" property).</summary>
		internal const string TargetPathProperty = "TargetPath";
		
		/// <summary> (The "DocumentationFile" property).</summary>
		internal const string DocumentationFileProperty = "DocumentationFile";
		
		/// <summary> (The "AssemblyName" property).</summary>
		internal const string AssemblyNameProperty = "AssemblyName";
		
		/// <summary> (The "Name" property).</summary>
		internal const string NameProperty = "Name";
		
		/// <summary> (The "RootNamespace" property).</summary>
		internal const string RootNamespaceProperty = "RootNamespace";
		
		/// <summary> (The "OutputName" property).</summary>
		internal const string OutputNameProperty = "OutputName";
		
		/// <summary> (The "OutputPath" property).</summary>
		internal const string OutputPathProperty = "OutputPath";
		
		/// <summary> (The "OutputType" property).</summary>
		internal const string OutputTypeProperty = "OutputType";
		
		/// <summary> (The "AvailablePlatforms" property).</summary>
		internal const string AvailablePlatformsProperty = "AvailablePlatforms";
		
		/// <summary>Should compiler optimize output? (The "Optimize" property).</summary>
		internal const string OptimizeProperty = "Optimize";
		
		/// <summary> (The "MSBuildProjectDirectory" property).</summary>
		internal const string MSBuildProjectDirectoryProperty = "MSBuildProjectDirectory";
		
		/// <summary> (The "DefaultPlatform" property).</summary>
		internal const string DefaultPlatformProperty = "DefaultPlatform";
		
		/// <summary>The MSBuild target to use when packaging a project. (The "PackageAction" property).</summary>
		internal const string PackageActionProperty = "PackageAction";
		
		/// <summary>The default content type name to use when adding files. (The "DefaultContentType" property).</summary>
		internal const string DefaultContentTypeProperty = "DefaultContentType";
		
		/// <summary> (The "DebuggerSymbolsPath" property).</summary>
		internal const string DebuggerSymbolsPathProperty = "DebuggerSymbolsPath";
		
		/// <summary> (The "TargetPlatformWinMDLocation" property).</summary>
		internal const string TargetPlatformWinMDLocationProperty = "TargetPlatformWinMDLocation";
		
		/// <summary> (The "SDKReferenceDirectoryRoot" property).</summary>
		internal const string SDKReferenceDirectoryRootProperty = "SDKReferenceDirectoryRoot";
		
		/// <summary> (The "SDKReferenceRegistryRoot" property).</summary>
		internal const string SDKReferenceRegistryRootProperty = "SDKReferenceRegistryRoot";
		
		/// <summary> (The "TargetPlatformIdentifier" property).</summary>
		internal const string TargetPlatformIdentifierProperty = "TargetPlatformIdentifier";
		
		/// <summary> (The "TargetPlatformVersion" property).</summary>
		internal const string TargetPlatformVersionProperty = "TargetPlatformVersion";
		
		/// <summary> (The "WindowsAppContainer" property).</summary>
		internal const string WindowsAppContainerProperty = "WindowsAppContainer";
		
		/// <summary> (The "WinMDAssembly" property).</summary>
		internal const string WinMDAssemblyProperty = "WinMDAssembly";
		
		/// <summary> (The "TargetRuntime" property).</summary>
		internal const string TargetRuntimeProperty = "TargetRuntime";
		
		/// <summary> (The "AssemblySearchPaths" property).</summary>
		internal const string AssemblySearchPathsProperty = "AssemblySearchPaths";
		
		/// <summary> (The "WinRTReferenceTabs" property).</summary>
		internal const string WinRTReferenceTabsProperty = "WinRTReferenceTabs";
		
		/// <summary> (The "AssemblyReferenceTabs" property).</summary>
		internal const string AssemblyReferenceTabsProperty = "AssemblyReferenceTabs";
		
		/// <summary>True to just build out-of-date projects without ever prompting the user to confirm. (The "SuppressOutOfDateMessageOnBuild" property).</summary>
		internal const string SuppressOutOfDateMessageOnBuildProperty = "SuppressOutOfDateMessageOnBuild";
		
		/// <summary> (The "ShowAllFiles" property).</summary>
		internal const string ShowAllFilesProperty = "ShowAllFiles";
		
		/// <summary> (The "AutoRefresh" property).</summary>
		internal const string AutoRefreshProperty = "AutoRefresh";
		
		/// <summary>Backing field for the <see cref='Microsoft.Build.Framework.XamlTypes.Rule'/> property.</summary>
		private Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule;
		
		/// <summary>Backing field for the file name of the rule property.</summary>
		private string file;
		
		/// <summary>Backing field for the ItemType property.</summary>
		private string itemType;
		
		/// <summary>Backing field for the ItemName property.</summary>
		private string itemName;
		
		/// <summary>Configured Project</summary>
		private Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject;
		
		/// <summary>The dictionary of named catalogs.</summary>
		private System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs;
		
		/// <summary>Backing field for the <see cref='Microsoft.VisualStudio.ProjectSystem.Properties.IRule'/> property.</summary>
		private Microsoft.VisualStudio.ProjectSystem.Properties.IRule fallbackRule;
		
		/// <summary>Thread locking object</summary>
		private object locker = new object();
		
		/// <summary>Initializes a new instance of the ConfigurationGeneral class.</summary>
		internal ConfigurationGeneral(Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule) {
			this.rule = rule;
		}
		
		/// <summary>Initializes a new instance of the ConfigurationGeneral class.</summary>
		internal ConfigurationGeneral(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject, System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs, string context, string file, string itemType, string itemName) : 
				this(GetRule(System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault(catalogs, context), file, itemType, itemName)) {
			if ((configuredProject == null)) {
				throw new System.ArgumentNullException("configuredProject");
			}
			this.configuredProject = configuredProject;
			this.catalogs = catalogs;
			this.file = file;
			this.itemType = itemType;
			this.itemName = itemName;
		}
		
		/// <summary>Initializes a new instance of the ConfigurationGeneral class.</summary>
		internal ConfigurationGeneral(Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule, Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject) : 
				this(rule) {
			if ((rule == null)) {
				throw new System.ArgumentNullException("rule");
			}
			if ((configuredProject == null)) {
				throw new System.ArgumentNullException("configuredProject");
			}
			this.configuredProject = configuredProject;
			this.rule = rule;
			this.file = this.rule.File;
			this.itemType = this.rule.ItemType;
			this.itemName = this.rule.ItemName;
		}
		
		/// <summary>Initializes a new instance of the ConfigurationGeneral class.</summary>
		internal ConfigurationGeneral(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject, System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs, string context, Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext propertyContext) : 
				this(configuredProject, catalogs, context, GetContextFile(propertyContext), propertyContext.ItemType, propertyContext.ItemName) {
		}
		
		/// <summary>Initializes a new instance of the ConfigurationGeneral class that assumes a project context (neither property sheet nor items).</summary>
		internal ConfigurationGeneral(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject, System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs) : 
				this(configuredProject, catalogs, "Project", null, null, null) {
		}
		
		/// <summary>Gets the IRule used to get and set properties.</summary>
		public Microsoft.VisualStudio.ProjectSystem.Properties.IRule Rule {
			get {
				return this.rule;
			}
		}
		
		/// <summary>ApplicationIcon</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty ApplicationIcon {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ApplicationIconProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ApplicationIconProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ProjectTypeGuids</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty ProjectTypeGuids {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ProjectTypeGuidsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ProjectTypeGuidsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ProjectGuid</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty ProjectGuid {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ProjectGuidProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ProjectGuidProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetFrameworkMoniker</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetFrameworkMoniker {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkMonikerProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkMonikerProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetFrameworkIdentifier</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetFrameworkIdentifier {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkIdentifierProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkIdentifierProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetFrameworkVersion</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetFrameworkVersion {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkVersionProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkVersionProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetFrameworkProfile</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetFrameworkProfile {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkProfileProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetFrameworkProfileProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetPath</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>DocumentationFile</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty DocumentationFile {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DocumentationFileProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DocumentationFileProperty)));
				}
				return property;
			}
		}
		
		/// <summary>AssemblyName</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty AssemblyName {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AssemblyNameProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AssemblyNameProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Name</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty Name {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(NameProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(NameProperty)));
				}
				return property;
			}
		}
		
		/// <summary>RootNamespace</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty RootNamespace {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(RootNamespaceProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(RootNamespaceProperty)));
				}
				return property;
			}
		}
		
		/// <summary>OutputName</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty OutputName {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OutputNameProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OutputNameProperty)));
				}
				return property;
			}
		}
		
		/// <summary>OutputPath</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty OutputPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OutputPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OutputPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>OutputType</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty OutputType {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OutputTypeProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OutputTypeProperty)));
				}
				return property;
			}
		}
		
		/// <summary>AvailablePlatforms</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty AvailablePlatforms {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AvailablePlatformsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AvailablePlatformsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Should compiler optimize output?</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty Optimize {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OptimizeProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(OptimizeProperty)));
				}
				return property;
			}
		}
		
		/// <summary>MSBuildProjectDirectory</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty MSBuildProjectDirectory {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(MSBuildProjectDirectoryProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(MSBuildProjectDirectoryProperty)));
				}
				return property;
			}
		}
		
		/// <summary>DefaultPlatform</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty DefaultPlatform {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DefaultPlatformProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DefaultPlatformProperty)));
				}
				return property;
			}
		}
		
		/// <summary>The MSBuild target to use when packaging a project.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty PackageAction {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(PackageActionProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(PackageActionProperty)));
				}
				return property;
			}
		}
		
		/// <summary>The default content type name to use when adding files.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty DefaultContentType {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DefaultContentTypeProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DefaultContentTypeProperty)));
				}
				return property;
			}
		}
		
		/// <summary>DebuggerSymbolsPath</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty DebuggerSymbolsPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DebuggerSymbolsPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(DebuggerSymbolsPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetPlatformWinMDLocation</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetPlatformWinMDLocation {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPlatformWinMDLocationProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPlatformWinMDLocationProperty)));
				}
				return property;
			}
		}
		
		/// <summary>SDKReferenceDirectoryRoot</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty SDKReferenceDirectoryRoot {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(SDKReferenceDirectoryRootProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(SDKReferenceDirectoryRootProperty)));
				}
				return property;
			}
		}
		
		/// <summary>SDKReferenceRegistryRoot</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty SDKReferenceRegistryRoot {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(SDKReferenceRegistryRootProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(SDKReferenceRegistryRootProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetPlatformIdentifier</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetPlatformIdentifier {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPlatformIdentifierProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPlatformIdentifierProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetPlatformVersion</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetPlatformVersion {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPlatformVersionProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetPlatformVersionProperty)));
				}
				return property;
			}
		}
		
		/// <summary>WindowsAppContainer</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty WindowsAppContainer {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(WindowsAppContainerProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(WindowsAppContainerProperty)));
				}
				return property;
			}
		}
		
		/// <summary>WinMDAssembly</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty WinMDAssembly {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(WinMDAssemblyProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(WinMDAssemblyProperty)));
				}
				return property;
			}
		}
		
		/// <summary>TargetRuntime</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty TargetRuntime {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetRuntimeProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(TargetRuntimeProperty)));
				}
				return property;
			}
		}
		
		/// <summary>AssemblySearchPaths</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty AssemblySearchPaths {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AssemblySearchPathsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AssemblySearchPathsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>WinRTReferenceTabs</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty WinRTReferenceTabs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(WinRTReferenceTabsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(WinRTReferenceTabsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>AssemblyReferenceTabs</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty AssemblyReferenceTabs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AssemblyReferenceTabsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AssemblyReferenceTabsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>True to just build out-of-date projects without ever prompting the user to confirm.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty SuppressOutOfDateMessageOnBuild {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(SuppressOutOfDateMessageOnBuildProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(SuppressOutOfDateMessageOnBuildProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ShowAllFiles</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty ShowAllFiles {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ShowAllFilesProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(ShowAllFilesProperty)));
				}
				return property;
			}
		}
		
		/// <summary>AutoRefresh</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty AutoRefresh {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AutoRefreshProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(AutoRefreshProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Get the fallback rule if the current rule on disk is missing or a property in the rule on disk is missing</summary>
		private Microsoft.VisualStudio.ProjectSystem.Properties.IRule GeneratedFallbackRule {
			get {
				if (((this.fallbackRule == null) 
							&& (this.configuredProject != null))) {
					System.Threading.Monitor.Enter(this.locker);
					try {
						if ((this.fallbackRule == null)) {
							this.InitializeFallbackRule();
						}
					}
					finally {
						System.Threading.Monitor.Exit(this.locker);
					}
				}
				return this.fallbackRule;
			}
		}
		
		private static Microsoft.VisualStudio.ProjectSystem.Properties.IRule GetRule(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog catalog, string file, string itemType, string itemName) {
			if ((catalog == null)) {
				return null;
			}
			return catalog.BindToContext(SchemaName, file, itemType, itemName);
		}
		
		private static string GetContextFile(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext propertiesContext) {
			if ((propertiesContext.IsProjectFile == true)) {
				return null;
			}
			else {
				return propertiesContext.File;
			}
		}
		
		private void InitializeFallbackRule() {
			if ((this.configuredProject == null)) {
				return;
			}
			Microsoft.Build.Framework.XamlTypes.Rule unboundRule = ConfigurationGeneral.deserializedFallbackRule;
			if ((unboundRule == null)) {
				System.IO.Stream xamlStream = null;
				System.Reflection.Assembly thisAssembly = System.Reflection.Assembly.GetExecutingAssembly();
				try {
					xamlStream = thisAssembly.GetManifestResourceStream("XamlRuleToCode:general.xaml");
					Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode root = ((Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode)(System.Xaml.XamlServices.Load(xamlStream)));
					System.Collections.Generic.IEnumerator<System.Object> ruleEnumerator = root.GetSchemaObjects(typeof(Microsoft.Build.Framework.XamlTypes.Rule)).GetEnumerator();
					for (
					; ((unboundRule == null) 
								&& ruleEnumerator.MoveNext()); 
					) {
						Microsoft.Build.Framework.XamlTypes.Rule t = ((Microsoft.Build.Framework.XamlTypes.Rule)(ruleEnumerator.Current));
						if (System.StringComparer.OrdinalIgnoreCase.Equals(t.Name, SchemaName)) {
							unboundRule = t;
							unboundRule.Name = "83f0f649-699e-4aa9-a6fd-c1de7240c4c9";
							ConfigurationGeneral.deserializedFallbackRule = unboundRule;
						}
					}
				}
				finally {
					if ((xamlStream != null)) {
						((System.IDisposable)(xamlStream)).Dispose();
					}
				}
			}
			this.configuredProject.Services.AdditionalRuleDefinitions.AddRuleDefinition(unboundRule, "FallbackRuleCodeGenerationContext");
			Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog catalog = this.configuredProject.Services.PropertyPagesCatalog.GetMemoryOnlyCatalog("FallbackRuleCodeGenerationContext");
			this.fallbackRule = catalog.BindToContext(unboundRule.Name, this.file, this.itemType, this.itemName);
		}
		
		/// <summary>Enum values for the OutputType property.</summary>
		internal class OutputTypeValues {
			
			/// <summary>The  ("Library") value for the OutputType property.</summary>
			internal const string Library = "Library";
			
			/// <summary>The  ("exe") value for the OutputType property.</summary>
			internal const string exe = "exe";
			
			/// <summary>The  ("winexe") value for the OutputType property.</summary>
			internal const string winexe = "winexe";
			
			/// <summary>The  ("AppContainerExe") value for the OutputType property.</summary>
			internal const string AppContainerExe = "AppContainerExe";
			
			/// <summary>The  ("WinMDObj") value for the OutputType property.</summary>
			internal const string WinMDObj = "WinMDObj";
			
			/// <summary>Prevents automatic generation of a default constructor.</summary>
			private OutputTypeValues() {
			}
		}
		
		/// <summary>Enum values for the TargetRuntime property.</summary>
		internal class TargetRuntimeValues {
			
			/// <summary>The  ("Managed") value for the TargetRuntime property.</summary>
			internal const string Managed = "Managed";
			
			/// <summary>The  ("Native") value for the TargetRuntime property.</summary>
			internal const string Native = "Native";
			
			/// <summary>The  ("AppHost") value for the TargetRuntime property.</summary>
			internal const string AppHost = "AppHost";
			
			/// <summary>Prevents automatic generation of a default constructor.</summary>
			private TargetRuntimeValues() {
			}
		}
	}
	
	internal partial class ProjectProperties {
		
		private static System.Func<System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>>, object, ConfigurationGeneral> CreateConfigurationGeneralPropertiesDelegate = new System.Func<System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>>, object, ConfigurationGeneral>(CreateConfigurationGeneralProperties);
		
		private static ConfigurationGeneral CreateConfigurationGeneralProperties(System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>> namedCatalogs, object state) {
			ProjectProperties that = ((ProjectProperties)(state));
			return new ConfigurationGeneral(that.ConfiguredProject, namedCatalogs.Result, "Project", that.File, that.ItemType, that.ItemName);
		}
		
		/// <summary>Gets the strongly-typed property accessor used to get and set General properties.</summary>
		internal System.Threading.Tasks.Task<ConfigurationGeneral> GetConfigurationGeneralPropertiesAsync() {
			System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>> namedCatalogsTask = this.GetNamedCatalogsAsync();
			return namedCatalogsTask.ContinueWith(CreateConfigurationGeneralPropertiesDelegate, this, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously, System.Threading.Tasks.TaskScheduler.Default);
		}
	}
}
