{"name":"Epoch Language Project","tagline":"Building an Opinionated Language for General Purpose Development","body":"## Epoch Programming Language\r\nEvery seasoned programmer knows that building great software involves making some compromises. _Choosing a programming language doesn't have to be one of them!_\r\n\r\nEpoch is a language designed to be _opinionated_. It has been built from the ground up to emphasize certain mindsets and approaches to building software systems and applications, at all scales. Make no mistake, Epoch is probably not for everyone - but if you're a like-minded developer, working from a similar frame of reference, we hope it scratches your itch as well as it scratches our own.\r\n\r\n### Where It Is Today\r\nThis is a quick snapshot of what the language currently offers:\r\n\r\n - Strong, static typing for safety and correctness\r\n - Just-in-time compiles to native code for maximum performance\r\n - Garbage collection for memory management\r\n - Includes prototype editor with syntax highlighting\r\n\r\n### Where Things Are Going\r\nThere is always room for progress, but these are some of the areas where we feel it is most important for Epoch to grow:\r\n\r\n - Optional garbage collection for both memory and other resources\r\n - Deterministic resource management for cases where GC is suboptimal or not desired\r\n - Green thread/fiber model with fast message passing infrastructure for massive parallelism\r\n - Improved ahead-of-time compiler, including moving to 64-bit platforms\r\n - More diverse platform support, predominantly Linux, BSD, and OS X\r\n - Full IDE and first-class tool chain for editing, compiling, and debugging Epoch code\r\n\r\n\r\n### What It Looks Like\r\nTo get a taste of what a simple Epoch program looks like, check out the snippet below. More extensive examples can be found in our repositories on GitHub.\r\n\r\n    //\r\n    // Epoch Example Program\r\n    // These lines are simply comments.\r\n    //\r\n    \r\n    // User-defined function taking one parameter of type string\r\n    DisplayMessage : string message\r\n    {\r\n        // Invoke the standard library console print function\r\n        // The ; operator concatenates strings together\r\n        print(\"Important Message: \" ; message)\r\n    }\r\n    \r\n    // User-defined algebraic sum type (aka discriminated union) \r\n    // This type can hold a string, or it can hold \"nothing\"\r\n    // Epoch does not have null references; instead, \"nothing\"\r\n    // is used to indicate the absence of a value.\r\n    type OptionalString : string | nothing\r\n    \r\n    // Overload the DisplayMessage function\r\n    // This overload handles a \"nothing\" value for the message\r\n    DisplayMessage : nothing\r\n    {\r\n        print(\"No message provided.\")\r\n    }\r\n    \r\n    // This function is where the program begins execution\r\n    entrypoint :\r\n    {\r\n        // Create some variables to hold messages\r\n        OptionalString hello = \"Hello world!\"\r\n        OptionalString nada = nothing\r\n        \r\n        // Display our messages to the user\r\n        DisplayMessage(hello)\r\n        DisplayMessage(nada)\r\n    }\r\n    \r\n\r\n## GitHub Migration\r\nThe Epoch Language Project is currently in the process of migrating from the now-defunct Google Code onto GitHub. We appreciate your patience as we flesh out the resources available on this site as well as continue development of the core language and tools.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}