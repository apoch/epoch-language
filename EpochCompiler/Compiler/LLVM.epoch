//
// LLVM integration
//


type LLVMContextHandle : integer
type LLVMFunctionType : integer
type LLVMFunction : integer
type LLVMBasicBlock : integer
type LLVMBuffer : integer
type LLVMValue : integer

EpochLLVMContextCreate : -> LLVMContextHandle ret = 0 																		[external("EpochLLVM.dll", "EpochLLVMContextCreate")]
EpochLLVMContextDestroy : LLVMContextHandle context																			[external("EpochLLVM.dll", "EpochLLVMContextDestroy")]

EpochLLVMModuleDump : LLVMContextHandle context																				[external("EpochLLVM.dll", "EpochLLVMModuleDump")]
EpochLLVMModuleCreateBinary : LLVMContextHandle context																		[external("EpochLLVM.dll", "EpochLLVMModuleCreateBinary")]
EpochLLVMModuleFinalize : LLVMContextHandle context, integer baseAddress, integer codeOffset								[external("EpochLLVM.dll", "EpochLLVMModuleFinalize")]
EpochLLVMModuleGetCodeBuffer : LLVMContextHandle context, integer ref size -> LLVMBuffer ret = 0							[external("EpochLLVM.dll", "EpochLLVMModuleGetCodeBuffer")]
EpochLLVMModuleGetPDataBuffer : LLVMContextHandle context, integer ref size -> LLVMBuffer ret = 0							[external("EpochLLVM.dll", "EpochLLVMModuleGetPDataBuffer")]
EpochLLVMModuleGetXDataBuffer : LLVMContextHandle context, integer ref size -> LLVMBuffer ret = 0							[external("EpochLLVM.dll", "EpochLLVMModuleGetXDataBuffer")]
EpochLLVMModuleRelocateBuffers : LLVMContextHandle context, integer codeOffset, integer xDataOffset							[external("EpochLLVM.dll", "EpochLLVMModuleRelocateBuffers")]

EpochLLVMTypeCreateFunction : LLVMContextHandle context -> LLVMFunctionType ret = 0											[external("EpochLLVM.dll", "EpochLLVMTypeCreateFunction")]

EpochLLVMFunctionCreate : LLVMContextHandle context, LLVMFunctionType fty, string name  -> LLVMFunction ret = 0				[external("EpochLLVM.dll", "EpochLLVMFunctionCreate")]

EpochLLVMBasicBlockCreate : LLVMContextHandle context, LLVMFunction func -> LLVMBasicBlock ret = 0							[external("EpochLLVM.dll", "EpochLLVMBasicBlockCreate")]

EpochLLVMBasicBlockSetInsertPoint : LLVMContextHandle context, LLVMBasicBlock block											[external("EpochLLVM.dll", "EpochLLVMBasicBlockSetInsertPoint")]


EpochLLVMCodeCreateRetVoid : LLVMContextHandle context																		[external("EpochLLVM.dll", "EpochLLVMCodeCreateRetVoid")]
EpochLLVMCodeCreateCall : LLVMContextHandle context, LLVMFunction target -> LLVMValue ret = 0								[external("EpochLLVM.dll", "EpochLLVMCodeCreateCall")]



EpochLLVMModuleGetDebugBuffer : LLVMContextHandle context, integer ref size -> LLVMBuffer ret = 0							[external("EpochLLVM.dll", "EpochLLVMModuleGetDebugBuffer")]
EpochLLVMModuleGetDebugRelocBuffer : LLVMContextHandle context, integer ref size -> LLVMBuffer ret = 0						[external("EpochLLVM.dll", "EpochLLVMModuleGetDebugRelocBuffer")]
EpochLLVMModuleGetDebugSymbolsBuffer : LLVMContextHandle context, integer ref size, integer ref count -> LLVMBuffer ret = 0	[external("EpochLLVM.dll", "EpochLLVMModuleGetDebugSymbolsBuffer")]



structure CodeGenCache :
	LLVMContextHandle LLVM,
	LLVMFunction EntrypointFunction



CodeGenProgram : Program ref program, LLVMContextHandle context -> boolean success = false
{
	print("Generating code...")

	LLVMFunctionType initFuncType = EpochLLVMTypeCreateFunction(context)
	LLVMFunction initFunc = EpochLLVMFunctionCreate(context, initFuncType, "@init")
	LLVMBasicBlock initBB = EpochLLVMBasicBlockCreate(context, initFunc)

	LLVMFunction ep = 0
	CodeGenCache cache = context, ep

	if(!CodeGenNamespace(program.RootNamespace, cache))
	{
		return()
	}

	// TODO - validate that entrypoint exists

	EpochLLVMBasicBlockSetInsertPoint(context, initBB)
	EpochLLVMCodeCreateCall(context, cache.EntrypointFunction)
	EpochLLVMCodeCreateRetVoid(context)

	EpochLLVMModuleCreateBinary(context)
	success = true
}



CodeGenNamespace : Namespace ref namespace, CodeGenCache ref cache -> boolean success = false
{
	if(!CodeGenFunctions(namespace.Functions, cache))
	{
		return()
	}

	success = true
}


CodeGenFunctions : ListRef<Function> ref functions, CodeGenCache ref cache -> boolean success = false
{
	if(!CodeGenFunction(functions.Head, cache))
	{
		return()
	}

	if(CodeGenFunctions(functions.Next, cache))
	{
		success = true
	}
}

CodeGenFunctions : nothing, CodeGenCache ref cache -> true



CodeGenFunction : Function ref function, CodeGenCache ref cache -> boolean success = false
{
	LLVMFunctionType fty = EpochLLVMTypeCreateFunction(cache.LLVM)
	LLVMFunction llvmfunc = EpochLLVMFunctionCreate(cache.LLVM, fty, "entrypoint")

	LLVMBasicBlock bb = EpochLLVMBasicBlockCreate(cache.LLVM, llvmfunc)
	EpochLLVMBasicBlockSetInsertPoint(cache.LLVM, bb)
	
	// TODO

	cache.EntrypointFunction = llvmfunc
	
	EpochLLVMCodeCreateRetVoid(cache.LLVM)
	success = true
}

