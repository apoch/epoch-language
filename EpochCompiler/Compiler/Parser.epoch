//
// Parsing implementation
//



ParseFiles : ListValue<string> ref filelist -> boolean success = false
{
	integer filelen = -1
	string contents = ReadFileText(filelist.Head, filelen)

	if(filelen < 0)
	{
		print("*** ERROR: Failed to load file: " ; filelist.Head)
		return()
	}

	print("Parsing: " ; filelist.Head)
	if(!ParseFile(filelist.Head, contents, filelen))
	{
		print("*** ERROR: Failed to parse file: " ; filelist.Head)
		return()
	}

	success = ParseFiles(filelist.Next)
}


ParseFiles : nothing -> true






structure LexToken :
	string Token,
	string FileName,
	integer LineNumber,
	integer ColumnNumber


structure TokenContainer :
	ListRef<LexToken> List,
	ListRefNode<LexToken> Tail




ParseFile : string filename, string contents, integer len -> boolean success = false
{
	LexToken lt = "", filename, 0, 0
	ListRef<LexToken> list = lt, nothing
	TokenContainer tokens = list, list

	Lex(filename, contents, len, tokens)

	PopListHead<LexToken>(tokens.List)

	string headtoken = tokens.List.Head.Token
	while(headtoken != "")
	{
		if(ParseFunction(tokens))
		{
			// AST should now contain a function
		}
		else
		{
			ParserSignalError(tokens, "expected a function")
			return()
		}

		headtoken = tokens.List.Head.Token
	}

	success = true
}



PushToken : TokenContainer ref tokens, string token, string filename, integer linenumber, integer columnnumber
{
	LexToken lt = token, filename, linenumber, columnnumber
	InjectToken(tokens, tokens.Tail, lt)
}


InjectToken : TokenContainer ref tokens, ListRef<LexToken> ref tailnode, LexToken ref lt
{
	ListRef<LexToken> newlist = lt, nothing
	tailnode.Next = newlist
	tokens.Tail = newlist
}

InjectToken : TokenContainer ref tokens, nothing, LexToken ref lt
{
	assert(false)
}


ParserSignalError : TokenContainer ref tokens, string message
{
	print("*** ERROR: parsing failure - " ; message)
	DumpTokensCount(tokens.List, 3)
}



CompareTokens : ListRef<LexToken> ref tokenlist, integer index, string expected -> boolean matched = false
{
	if(index == 0)
	{
		if(tokenlist.Head.Token == expected)
		{
			matched = true
		}
	}
	else
	{
		matched = CompareTokens(tokenlist.Next, index - 1, expected)
	}
}

CompareTokens : nothing, integer index, string expected -> false



PopTokens : ListRef<LexToken> ref tokenlist, integer count
{
	if(count > 0)
	{
		PopTokens(tokenlist, tokenlist.Next, count - 1)
	}
}

PopTokens : ListRef<LexToken> ref tokenlist, ListRef<LexToken> ref newhead, integer count
{
	if(count > 0)
	{
		PopTokens(tokenlist, newhead.Next, count - 1)
	}
	else
	{
		PopListHead<LexToken>(tokenlist, newhead)
	}
}

PopTokens : ListRef<LexToken> ref tokenlist, nothing, integer count
{
	if(count > 0)
	{
		assert(false)
	}

	LexToken lt = "", "", 0, 0
	tokenlist.Head = lt
}


ParseFunction : TokenContainer ref tokens -> boolean success = false
{
	LexToken functionNameToken = tokens.List.Head

	if(!CompareTokens(tokens.List, 1, ":"))
	{
		return()
	}

	PopTokens(tokens.List, 2)

	if(!CompareTokens(tokens.List, 0, "{"))
	{
		// Function has no code body
		success = true
		return()
	}

	PopTokens(tokens.List, 1)

	success = ParseCodeBlock(tokens)
}



ParseCodeBlock : TokenContainer ref tokens -> boolean success = false
{
	string headtoken = tokens.List.Head.Token
	while(headtoken != "}")
	{
		if(headtoken == "")
		{
			ParserSignalError(tokens, "missing at least one }")
			return()
		}

		if(ParseStatement(tokens))
		{
			// AST should now contain a statement
		}
		else
		{
			ParserSignalError(tokens, "expected a statement")
			return()
		}

		headtoken = tokens.List.Head.Token
	}

	PopTokens(tokens.List, 1)
	success = true
}


ParseStatement : TokenContainer ref tokens -> boolean success = false
{
	LexToken statementNameToken = tokens.List.Head

	if(!CompareTokens(tokens.List, 1, "("))
	{
		return()
	}

	PopTokens(tokens.List, 2)

	string headtoken = tokens.List.Head.Token
	while(headtoken != ")")
	{
		if(headtoken == "")
		{
			ParserSignalError(tokens, "missing at least one )")
			return()
		}

		PopTokens(tokens.List, 1)
		headtoken = tokens.List.Head.Token
	}

	PopTokens(tokens.List, 1)
	success = true
}


