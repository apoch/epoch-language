//
// Parsing implementation
//



ParseFiles : ListValue<string> ref filelist -> boolean success = false
{
	integer filelen = -1
	string contents = ReadFileText(filelist.Head, filelen)

	if(filelen < 0)
	{
		print("*** ERROR: Failed to load file: " ; filelist.Head)
		return()
	}

	print("Parsing: " ; filelist.Head)
	if(!ParseFile(filelist.Head, contents, filelen))
	{
		print("*** ERROR: Failed to parse file: " ; filelist.Head)
		return()
	}

	success = ParseFiles(filelist.Next)
}


ParseFiles : nothing -> true






structure LexToken :
	string Token,
	string FileName,
	integer LineNumber,
	integer ColumnNumber


structure TokenContainer :
	ListRef<LexToken> List,
	ListRefNode<LexToken> Tail




ParseFile : string filename, string contents, integer len -> boolean success = false
{
	LexToken lt = "", filename, 0, 0
	ListRef<LexToken> list = lt, nothing
	TokenContainer tokens = list, list

	Lex(filename, contents, len, tokens)

	PopListHead<LexToken>(tokens.List)
	DumpTokens(tokens.List)

	success = true
}



PushToken : TokenContainer ref tokens, string token, string filename, integer linenumber, integer columnnumber
{
	LexToken lt = token, filename, linenumber, columnnumber
	InjectToken(tokens, tokens.Tail, lt)
}


InjectToken : TokenContainer ref tokens, ListRef<LexToken> ref tailnode, LexToken ref lt
{
	ListRef<LexToken> newlist = lt, nothing
	tailnode.Next = newlist
	tokens.Tail = newlist
}

InjectToken : TokenContainer ref tokens, nothing, LexToken ref lt
{
	assert(false)
}

